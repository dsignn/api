define(["meta", baseUrlJs + "/r-menu/shared_bundle_1.js"], function (meta, _shared_bundle_) {

        "use strict"; meta = babelHelpers.interopRequireWildcard(meta); function _templateObject41_e13d1b4010eb11ec83cd7fddb4847b33() { var data = babelHelpers.taggedTemplateLiteral(["\n    <style>\n      :host {\n        display: block;\n        position: fixed;\n        background-color: var(--paper-toast-background-color, #323232);\n        color: var(--paper-toast-color, #f1f1f1);\n        min-height: 48px;\n        min-width: 288px;\n        padding: 16px 24px;\n        box-sizing: border-box;\n        box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.26);\n        border-radius: 2px;\n        margin: 12px;\n        font-size: 14px;\n        cursor: default;\n        -webkit-transition: -webkit-transform 0.3s, opacity 0.3s;\n        transition: transform 0.3s, opacity 0.3s;\n        opacity: 0;\n        -webkit-transform: translateY(100px);\n        transform: translateY(100px);\n        @apply --paper-font-common-base;\n      }\n\n      :host(.capsule) {\n        border-radius: 24px;\n      }\n\n      :host(.fit-bottom) {\n        width: 100%;\n        min-width: 0;\n        border-radius: 0;\n        margin: 0;\n      }\n\n      :host(.paper-toast-open) {\n        opacity: 1;\n        -webkit-transform: translateY(0px);\n        transform: translateY(0px);\n      }\n    </style>\n\n    <span id=\"label\">{{text}}</span>\n    <slot></slot>\n"]); _templateObject41_e13d1b4010eb11ec83cd7fddb4847b33 = function _templateObject41_e13d1b4010eb11ec83cd7fddb4847b33() { return data; }; return data; } function _templateObject40_e13d1b4010eb11ec83cd7fddb4847b33() { var data = babelHelpers.taggedTemplateLiteral(["\n    <style>    \n       app-toolbar {\n         background-color:  #015b63;\n         padding-left: 6px;\n         padding-right: 6px;\n         color: white;\n       }\n       \n       app-toolbar paper-input,\n       app-toolbar paper-dropdown-menu {\n           --primary-text-color: white; \n           --paper-input-container-color: white;\n           --paper-input-container-focus-color: #BFBFBF;\n           --paper-input-container-invalid-color: white;\n       }\n       \n       app-toolbar paper-dropdown-menu paper-item {\n            color: #757575;; ;\n       }\n       \n       dsign-menu-favorites {\n            margin-bottom: 4px;\n       }\n       \n       .btn-order {\n           @apply --layout-flex;\n           background-color: var(--munu-background-color);\n           color: var(--munu-color);\n           margin: 0;\n       }\n       \n       dsign-badge {\n         --paper-badge-background: var(--munu-color);\n         --paper-badge-text-color: var(--munu-background-color);\n         --paper-badge : {\n            font-weight: 700;\n         }\n       }\n       \n       .restaurant-title {\n           font-family: var(--paper-font-common-base_-_font-family);\n           text-transform: capitalize;\n           margin-top: 10px;\n           margin-bottom: 10px;\n           font-size: 22px;\n           text-align: center;\n       }\n     \n       \n       h2.title {\n          font-family: var(--paper-font-common-base_-_font-family);\n          margin: 0;\n          margin-top: 10px;\n          margin-bottom: 10px;\n          text-align: center;\n          text-transform: uppercase;\n       }\n       \n       .subtitle {\n            @apply --layout-horizontal;\n            @apply --layout-center;\n            padding-bottom: 10px;\n            padding-top: 10px;\n       }\n       \n       .amount {\n            @apply --layout;\n            @apply --layout-flex;\n            @apply --layout-center;\n            @apply --layout-end-justified;\n            padding-right: 4px;\n            font-size: 20px;\n            font-weight: 600;\n            font-family: var(--paper-font-common-base_-_font-family);\n       }\n       \n       [no-padding] {\n            padding: 0;\n       }\n       \n       .item {\n       \n         background-color: #eee;\n         flex-basis: 13.9%;\n         -webkit-flex-basis: 13.9%;\n         margin: 0 6px 6px 0;\n       }\n       \n       .search {\n         width: 100%;\n       }\n       \n       .flex-row {\n         @apply --layout-horizontal;\n       }\n       \n       [down] {\n         @apply --layout-end;\n       }\n       \n       .search paper-input {\n         width: 100%;\n       }\n       \n       .padding-l-6 {\n         padding-left: 6px;\n       }\n       \n       paper-listbox {\n         min-width: 150px;\n         width: 100%;\n       }\n       \n       paper-select-language {\n            font-size: 18px;\n            font-family: \"Roboto\", \"Noto\", sans-serif;\n            color:rgb(33, 33, 33);\n       }\n       \n       .logo {\n          height: 64px;\n          width: 64px;\n          border-radius: 50%;\n          background-position: center center;\n          background-size: 60px;\n       }\n       \n       app-drawer {\n        padding: 6px;\n       }\n       \n       #action {\n           @apply --layout;\n           @apply --layout-center;\n           width: 40px;\n       }\n       \n       \n       paper-icon-button.menu-drawer {\n           color: #000000 !important;\n           width: 20px;\n           height: 20px;\n           border-radius: 50%;\n           --paper-icon-button : {\n                padding: 0;\n           }       \n       }\n       #paperAction {\n            padding-left: 12px;\n       }\n       \n       paper-icon-button.copy {\n           width: 34px;\n           height: 34px;\n           --paper-icon-button : {\n                padding: 3px;\n           }   \n       }\n       \n       #order {\n          @apply --layout;\n          @apply --layout-horizontal;\n          @apply --layout-center;\n       }\n       \n       .drawerContainer {\n        padding: 6px;\n       }\n       \n       paper-select-language {\n         width: 100%;\n       }   \n              \n       #menuContainer {\n         @apply --layout-horizontal;\n         @apply --layout-start-justified;\n         @apply --layout-wrap;\n         padding: 3px;\n       }\n       \n       .divider {\n            width: 6px;\n       }\n       \n       dsign-menu-wrap-item {\n           flex-basis: 10%;\n           -webkit-flex-basis: 10%;\n           --menu-wrap-container : {\n               margin-bottom: 8px;\n               margin-right: 8px;\n           }\n       }\n       \n       #whatsappIcon {\n        margin-right: 6px;\n       }\n       \n       #category {\n         padding-bottom: 2px;\n       }\n              \n       app-drawer {           \n           --app-drawer-width: 400px;\n       }\n  \n\n       @media only screen and (max-width: 2600px) and (min-width: 2201px) {\n           dsign-menu-wrap-item {\n                flex-basis: 12.5%;\n                -webkit-flex-basis: 12.5%;\n                max-width: 12.5%;\n           }\n           \n           dsign-menu-wrap-item:nth-child(8n) { \n               --menu-wrap-container : {\n                   margin-right: 0;\n               }\n           }\n       }\n\n       @media only screen and (max-width: 2200px) and (min-width: 1981px) {\n           dsign-menu-wrap-item {\n               flex-basis: 14.2%;\n               -webkit-flex-basis: 14.2%;\n               max-width: 14.2%;\n           }\n           \n           dsign-menu-wrap-item:nth-child(7n) { \n               --menu-wrap-container : {\n                   margin-right: 0;\n               }\n           }\n       }  \n       \n       @media only screen and (max-width: 1980px) and (min-width: 1701px) {\n           dsign-menu-wrap-item {\n               flex-basis: 16.66%;\n               -webkit-flex-basis: 16.66%;\n               max-width: 16.66%;\n           }\n           \n           dsign-menu-wrap-item:nth-child(6n) { \n               --menu-wrap-container : {\n                   margin-right: 0;\n               }\n           }\n       }  \n            \n       @media only screen and (max-width: 1700px) and (min-width: 1201px) {\n           dsign-menu-wrap-item {\n               flex-basis: 20%;\n               -webkit-flex-basis: 20%;\n               max-width: 20%;\n           }\n           \n           dsign-menu-wrap-item:nth-child(5n) { \n               --menu-wrap-container : {\n                   margin-right: 0;\n               }\n           }\n       }  \n\n       @media only screen and (max-width: 1200px) and (min-width: 971px) {\n           dsign-menu-wrap-item {\n               flex-basis: 25%;\n               -webkit-flex-basis: 25%;\n               max-width: 25%;\n           }\n           \n           dsign-menu-wrap-item:nth-child(4n) { \n               --menu-wrap-container : {\n                   margin-right: 0;\n               }\n           }\n       }        \n\n       @media only screen and (max-width: 970px) and (min-width: 771px) {\n            dsign-menu-wrap-item {\n                flex-basis: 33.3%;\n                -webkit-flex-basis: 33.3%;\n                max-width: 33.3%;\n            }\n            \n            dsign-menu-wrap-item:nth-child(3n) { \n               --menu-wrap-container : {\n                   margin-right: 0;\n               }\n            }\n       }\n              \n       @media only screen and (max-width: 770px) and (min-width: 501px) {\n       \n            app-drawer {           \n                --app-drawer-width: 250px;\n            }\n       \n            dsign-menu-wrap-item {\n                flex-basis: 50%;\n                -webkit-flex-basis:  50%;\n                max-width: 50%;\n            }\n            \n            dsign-menu-wrap-item:nth-child(2n) { \n               --menu-wrap-container : {\n                   margin-right: 0;\n               }\n            }\n       }\n       \n       @media only screen and (max-width: 500px)  {\n            app-drawer {           \n                --app-drawer-width: 250px;\n            }\n       \n            dsign-menu-wrap-item {\n                flex-basis: 100%;\n                -webkit-flex-basis:  100%;\n                --menu-wrap-container : {\n                   margin-bottom: 8px;\n                   margin-right: 0;\n                }\n            }\n            \n              #language, #category {\n                width: 96px;\n            }\n                       \n            .item {\n                flex-basis: 100%;\n               -webkit-flex-basis:  100%;\n            }\n       }      \n    </style>\n    <app-header-layout fullbleed>\n      <app-header slot=\"header\" fixed effects=\"waterfall\">\n        <app-toolbar>\n            <template is=\"dom-if\" if=\"{{hasLogo}}\">\n                <dsign-logo organization=\"{{organization}}\"></dsign-logo>\n            </template>\n            <div class=\"search flex-row\">\n                <paper-input id=\"search\" label=\"{{localize('search')}}\" on-input=\"searchByName\"></paper-input>\n            </div>\n            <div class=\"divider\"></div>\n            <div class=\"flex-row\" down>\n                <paper-dropdown-menu id=\"category\" label=\"{{localize('category')}}\" on-iron-select=\"searchByCategory\">\n                    <paper-listbox id=\"categories\" slot=\"dropdown-content\">\n                        <dom-repeat id=\"menu\" items=\"{{categories}}\" as=\"category\">\n                          <template>\n                             <paper-item value=\"{{category}}\">{{localize(category)}}</paper-item>\n                          </template>\n                        </dom-repeat>\n                    </paper-listbox>\n                </paper-dropdown-menu>\n                <paper-icon-button icon=\"clear\" on-tap=\"clearCategory\" disable down></paper-icon-button>\n            </div>\n            <div id=\"orderButtonContainer\" class=\"flex-row\">\n                <paper-icon-button id=\"btn-menu\" icon=\"v-menu\" on-tap=\"tapMenu\"></paper-icon-button>\n                <dsign-badge id=\"badgeMenu\" for=\"btn-menu\" label=\"{{totalOrder}}\" offset-y=\"6\"></dsign-badge>\n            </div>\n        </app-toolbar>\n      </app-header>\n      <div id=\"menuContainer\">\n          <dom-repeat id=\"list\" items=\"[[items]]\" as=\"menuItem\">\n              <template>\n                    <dsign-menu-wrap-item item=\"[[menuItem]]\" type=\"[[layoutType]]\" restaurant=\"[[organization]]\" show-order=\"[[menu.enable_order]]\" categories=\"{{allCategory}}\"></dsign-menu-wrap-item>\n              </template>\n          </dom-repeat>\n      </div>\n    </app-header-layout>\n    <app-drawer id=\"drawer\" align=\"right\">\n        <div class=\"drawerContainer\">\n            <div class=\"restaurant-title\">{{organization.name}}</div>\n            <div id=\"order\" style=\"display: flex\">\n                <paper-button class=\"btn-order\" on-tap=\"_sendOrder\">\n                    <iron-icon id=\"whatsappIcon\" icon=\"whatsapp\"></iron-icon>\n                    {{localize('order-whatsapp')}}\n                </paper-button>\n            </div>\n            <div class=\"subtitle\">\n                <div class=\"amount\">{{amount}}</div>\n            </div>\n            <dom-repeat id=\"favorites\" items=\"[[favorites]]\" as=\"favorite\" sort=\"sortArrayFavorites\">\n              <template>\n                <dsign-menu-favorites menu-item=\"{{favorite}}\"></dsign-menu-favorites>\n              </template>\n            </dom-repeat>\n        </div>\n    </app-drawer>"]); _templateObject40_e13d1b4010eb11ec83cd7fddb4847b33 = function _templateObject40_e13d1b4010eb11ec83cd7fddb4847b33() { return data; }; return data; } function _templateObject39_e13d1b4010eb11ec83cd7fddb4847b33() { var data = babelHelpers.taggedTemplateLiteral(["\n        <style>\n            :host {\n                bottom: 12px;\n                right: 12px;\n                z-index: 1;\n                display: block;\n                position: fixed;\n                background-color: var(--dsing-info-background-color, #323232);\n                color: var(--dsing-info-color, #f1f1f1);\n                min-height: 48px;\n                overflow: hidden;\n                padding: 8px !important;\n                box-sizing: border-box;\n                box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.26);\n                border-radius: 4px;\n                font-size: 14px;\n                cursor: default;\n                height: fit-content;\n\n                @apply --paper-font-common-base;\n            }\n            \n            #container {\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                flex-direction: row;\n            }\n            \n            #content {\n            white-space:pre-wrap;\n                display: flex;\n                align-items: center;\n                padding-left: 8px;\n                width: 300px;\n                overflow: hidden !important;\n                height: min-content;\n            }\n            \n            paper-icon-button {\n                -ms-transform: rotate(180deg); \n                -moz-transform: rotate(180deg); \n                -webkit-transform: rotate(180deg); \n                transform: rotate(180deg);\n                width: 26px !important;\n                height: 26px !important;\n                --paper-icon-button : {\n                    padding: 1px;\n               }  \n            }\n            \n            @-webkit-keyframes rotate-left { \n                from { \n                    -ms-transform: rotate(0deg); \n                    -moz-transform: rotate(0deg); \n                    -webkit-transform: rotate(0deg); \n                    transform: rotate(0deg); \n                } to { \n                    -ms-transform: rotate(180deg); \n                    -moz-transform: rotate(180deg); \n                    -webkit-transform: rotate(180deg); \n                    transform: rotate(180deg);\n                }\n            }\n            \n            @-webkit-keyframes rotate-right { \n               from { \n                    -ms-transform: rotate(180deg); \n                    -moz-transform: rotate(180deg); \n                    -webkit-transform: rotate(180deg); \n                    transform: rotate(180deg); \n               } to { \n                    -ms-transform: rotate(0deg); \n                    -moz-transform: rotate(0deg); \n                    -webkit-transform: rotate(0deg); \n                    transform: rotate(0deg); \n               }\n            }  \n           \n            @-webkit-keyframes close { \n               from { \n                    width: 300px; \n                    padding-left: 8px;\n               } to { \n                    width: 0;\n                    padding-left: 0;\n               }\n            }  \n            \n                       \n            @-webkit-keyframes open { \n               from { \n                   width: 0;\n                   padding-left: 0;\n               } to { \n                   width: 300px; \n                   padding-left: 8px;\n               }\n            }  \n                    \n        </style>\n        <div id=\"container\">\n            <paper-icon-button icon=\"arrow-left\" on-tap=\"toggle\"></paper-icon-button>\n            <p id=\"content\">{{text}}</p>\n        </div>"]); _templateObject39_e13d1b4010eb11ec83cd7fddb4847b33 = function _templateObject39_e13d1b4010eb11ec83cd7fddb4847b33() { return data; }; return data; } function _templateObject38_e13d1b4010eb11ec83cd7fddb4847b33() { var data = babelHelpers.taggedTemplateLiteral(["\n        <style>\n            :host {\n                display: block;\n            }\n        \n            .container {\n                height: 64px;\n                width: 64px;  \n                display: flex;\n                align-items: center;\n                justify-content: center;\n            }\n            \n            .logo {\n                height: 50px;\n                width: 50px;\n                border-radius: 50%;\n                background-position: center center;\n                background-repeat: no-repeat;\n                background-size: cover;\n            }\n        </style>\n        <div class=\"container\">\n            <div class=\"logo\"></div>\n        </div>"]); _templateObject38_e13d1b4010eb11ec83cd7fddb4847b33 = function _templateObject38_e13d1b4010eb11ec83cd7fddb4847b33() { return data; }; return data; } function _templateObject37_e13d1b4010eb11ec83cd7fddb4847b33() { var data = babelHelpers.taggedTemplateLiteral(["\n    <style> \n    \n       :host {\n          display: block;\n       }\n       \n       paper-card {\n          @apply --layout;\n          width: 100%;\n          height: 60px;\n       }\n       \n       .header {\n           height: 100%;\n           width: 60px !important;\n           background-position: center center ;\n           background-repeat: no-repeat;\n           background-size: cover;\n           position: relative;\n           border-right: 2px solid #eeeeee;\n       }\n       \n       .content {\n          flex: 1;\n          display: block;\n          white-space: nowrap;\n          overflow: hidden;\n          text-overflow: ellipsis;\n       }\n       \n       .header-card-content {\n          @apply --layout-vertical;\n          height: 30px;\n          padding-left: 4px;\n          padding-right: 4px;\n       }\n       \n       .header-card-title {\n          @apply --layout-center-justified;\n          @apply --layout-start;\n          font-size: 18px;\n          line-height: 30px;\n          display: block;\n          white-space: nowrap;\n          overflow: hidden;\n          text-overflow: ellipsis;\n          text-align: start;\n       }\n       \n       .header-card-action {\n          position: relative;\n          @apply --layout-horizontal;\n          @apply --layout-center;\n          @apply --layout-end-justified;\n       }\n       \n       paper-icon-button {\n\n           width: 22px;\n           height: 22px;\n           border-radius: 50%;\n           --paper-icon-button : {\n                padding: 0;\n           }       \n           background-color: var(--munu-background-color);\n           color: var(--munu-color);\n       }\n       \n       paper-icon-button[disabled] {\n            background-color:#757575;\n       }\n       \n       .count {\n          font-weight: 500;\n          min-width: 34px;\n          text-align: center;\n       }\n       \n       .partial-price {\n           @apply --layout;\n           @apply --layout-flex;\n           @apply --layout-end-justified;\n           font-weight: 600;\n           font-size: 18px;\n       }\n       \n       #action {\n           width: 40px !important;\n           @apply --layout;\n           @apply --layout-center;\n       }\n       \n       #action paper-icon-button {\n           background-color: #FFFFFF;\n           color: #000000;\n       }\n       \n       .triangle {\n           position: absolute;\n           width: 0;\n           height: 0;\n           font-size: 8px;\n           border-top: 56px solid #fc0303;\n           border-right: 56px solid transparent;\n       }\n       \n       .status-dish {\n          top: 10px;\n          right: 26px;\n        \u2003 transform:rotate(315deg);\n          -webkit-transform: rotate(315deg);\n          -o-transform: rotate(315deg);\n          -moz-transform: rotate(315deg);\n          -ms-transform: rotate(315deg);\n          position: absolute;\n          font-size: 10px;\n          font-weight: 500;\n          text-transform: uppercase;\n       }\n       \n       [hidden] {\n          visibility: hidden;\n       }\n    </style>\n    <paper-card>\n        <div id=\"image\" class=\"header\">\n            <div class=\"triangle\"></div>\n            <div class=\"status-dish\">{{localize(statusLabel)}}</div>\n        </div>\n        <div class=\"content\">\n             <div class=\"header-card-content header-card-title\">{{_capitalize(menuItem.name.it)}}</div>\n             <div class=\"header-card-content header-card-action\">\n               \n                   <paper-icon-button id=\"remove\" icon=\"remove\" on-tap=\"removeFavorite\"></paper-icon-button>\n                   <div class=\"count\"> {{menuItem.totalCount}}</div>\n                   <paper-icon-button id=\"add\" icon=\"add\" on-tap=\"addOneFavorite\"></paper-icon-button>\n                   <div class=\"partial-price\">{{amount(menuItem)}}</div>\n             </div>\n        </div>\n   \n    </paper-card>\n     "]); _templateObject37_e13d1b4010eb11ec83cd7fddb4847b33 = function _templateObject37_e13d1b4010eb11ec83cd7fddb4847b33() { return data; }; return data; } function _templateObject36_e13d1b4010eb11ec83cd7fddb4847b33() { var data = babelHelpers.taggedTemplateLiteral(["\n          <style>\n            .container {\n                @apply --menu-wrap-container;\n            }\n            \n          </style>\n          <div id=\"container\" class=\"container\"></div>\n        "]); _templateObject36_e13d1b4010eb11ec83cd7fddb4847b33 = function _templateObject36_e13d1b4010eb11ec83cd7fddb4847b33() { return data; }; return data; } function _templateObject35_e13d1b4010eb11ec83cd7fddb4847b33() { var data = babelHelpers.taggedTemplateLiteral(["\n    <style> \n    \n       :host {\n          display: block;\n       }\n    \n       paper-card {\n          @apply --layout;\n          width: 100%;\n          height: 120px;\n       }\n       \n       .header {\n           height: 100%;\n           width: 100px !important;\n           min-width: 100px;\n           background-position: center center ;\n           background-repeat: no-repeat;\n           background-size: cover;\n           position: relative;\n       }\n       \n       .content {\n         @apply --layout-vertical;\n         @apply --layout-flex;\n         width: 0vw;\n       }\n       \n       .action {\n           height: 32px;\n           display: flex;\n           padding: 0 6px;\n           @apply --layout-center;\n            @apply --layout-end-justified;\n       }\n       \n       .header-card-title {\n           text-rendering: optimizeLegibility;\n           font-size: 18px;\n           font-weight: 500;\n           height: 28px;\n           line-height: 28px;\n           display: block;\n           padding: 0 6px;\n           white-space: nowrap;\n           overflow: hidden;\n           text-overflow: ellipsis;\n       }\n       \n      \n       .header-card-category {\n            font-style: italic ;\n            padding: 0 6px;\n            color: #757575;\n       }\n       \n       .paragraph-card {\n           @apply --layout;\n           @apply --layout-start;\n           @apply --layout-flex;\n           text-overflow: ellipsis;\n           padding: 0 6px;\n           overflow: hidden;\n           -webkit-line-clamp: 2;\n           -webkit-box-orient: vertical;\n           overflow-y: auto;\n       }  \n       \n       [padding-4] {\n          padding: 6px;\n       }\n       \n       paper-icon-button {\n           width: 26px;\n           height: 26px;\n           border-radius: 50%;\n           --paper-icon-button : {\n                padding: 1px;\n           }\n           \n           background-color: var(--munu-background-color);\n           color: var(--munu-color);\n       }\n       \n       dsign-badge {\n         z-index: 1;\n         --paper-badge-background: var(--munu-color);\n         --paper-badge-text-color: var(--munu-background-color);\n         border: 1px solid var(--munu-background-color);\n         border-radius: 50%;\n         font-weight: bold;\n         --paper-badge : {\n            font-weight: 700;\n         }\n       }\n       \n       .price {\n            padding: 2px 8px;\n            font-size: 18px;\n            font-weight: 400;\n            width: max-content;\n            border-radius: 6px;\n            position: absolute;\n            top: 4px;\n            right: 4px;\n            background-color: var(--munu-background-color);\n            color: var(--munu-color);\n       }     \n       \n       .triangle {\n           position: absolute;\n           width: 0;\n           height: 0;\n           font-size: 8px;\n           border-top: 86px solid #fc0303;\n           border-right: 86px solid transparent;\n       }\n       \n       .status-dish {\n          top: 24px;\n          left: 2px;\n        \u2003 transform:rotate(315deg);\n          -webkit-transform: rotate(315deg);\n          -o-transform: rotate(315deg);\n          -moz-transform: rotate(315deg);\n          -ms-transform: rotate(315deg);\n          position: absolute;\n          font-size: 14px;\n          font-weight: 500;\n          text-transform: uppercase;\n       }\n       \n       paper-icon-button[disabled] {\n            background-color:#757575;\n       }\n       \n       [hidden] {\n          visibility: hidden;\n       }\n          \n    </style>\n    <paper-card>\n        <div id=\"image\" class=\"header\">\n            <div class=\"triangle\"></div>\n            <div class=\"status-dish\">{{localize(statusLabel)}}</div>\n            <template is=\"dom-if\" if=\"{{hasPrice}}\">\n                <div class=\"price\">\n                    {{_computePrice(menuItem.price)}} \u20AC\n                </div>\n            </template>\n        </div>\n        <div class=\"content\">\n             <div class=\"header-card-title\">{{_capitalize(menuItem.name.it)}}</div>\n             <div class=\"header-card-category\">{{localize(category)}}</div>\n             <div class=\"paragraph-card\">{{menuItem.description.it}}</div>\n             <div id=\"action\" class=\"action\">\n                 <dsign-badge id=\"badgeMenu\" for=\"btn-menu\" label=\"{{dishCount}}\" class=\"red\" offset-x=\"-2\"></dsign-badge>\n                 <paper-icon-button icon=\"add\" id=\"btn-menu\" on-tap=\"addFavorite\"></paper-icon-button>\n             </div>\n        </div>\n    </paper-card>"]); _templateObject35_e13d1b4010eb11ec83cd7fddb4847b33 = function _templateObject35_e13d1b4010eb11ec83cd7fddb4847b33() { return data; }; return data; } function _templateObject34_e13d1b4010eb11ec83cd7fddb4847b33() { var data = babelHelpers.taggedTemplateLiteral(["\n    <style>\n      :host {\n        display: block;\n        position: absolute;\n        outline: none;\n      }\n\n      :host([hidden]), [hidden] {\n        display: none !important;\n      }\n\n      iron-icon {\n        --iron-icon-width: var(--paper-badge-icon-width, 12px);\n        --iron-icon-height: var(--paper-badge-icon-height, 12px);\n      }\n\n      .badge {\n        @apply --layout;\n        @apply --layout-center-center;\n        @apply --paper-font-common-base;\n\n        font-weight: normal;\n        font-size: 11px;\n        border-radius: 50%;\n        margin-left: var(--paper-badge-margin-left, 0px);\n        margin-bottom: var(--paper-badge-margin-bottom, 0px);\n        width: var(--paper-badge-width, 20px);\n        height: var(--paper-badge-height, 20px);\n        background-color: var(--paper-badge-background, var(--accent-color));\n        opacity: var(--paper-badge-opacity, 1.0);\n        color: var(--paper-badge-text-color, white);\n\n        @apply --paper-badge;\n      }\n    </style>\n\n    <div class=\"badge\">\n      <iron-icon hidden$=\"{{!_computeIsIconBadge(icon)}}\" icon=\"{{icon}}\"></iron-icon>\n      <span id=\"badge-text\" hidden$=\"{{_computeIsIconBadge(icon)}}\">{{label}}</span>\n    </div>\n  "], ["\n    <style>\n      :host {\n        display: block;\n        position: absolute;\n        outline: none;\n      }\n\n      :host([hidden]), [hidden] {\n        display: none !important;\n      }\n\n      iron-icon {\n        --iron-icon-width: var(--paper-badge-icon-width, 12px);\n        --iron-icon-height: var(--paper-badge-icon-height, 12px);\n      }\n\n      .badge {\n        @apply --layout;\n        @apply --layout-center-center;\n        @apply --paper-font-common-base;\n\n        font-weight: normal;\n        font-size: 11px;\n        border-radius: 50%;\n        margin-left: var(--paper-badge-margin-left, 0px);\n        margin-bottom: var(--paper-badge-margin-bottom, 0px);\n        width: var(--paper-badge-width, 20px);\n        height: var(--paper-badge-height, 20px);\n        background-color: var(--paper-badge-background, var(--accent-color));\n        opacity: var(--paper-badge-opacity, 1.0);\n        color: var(--paper-badge-text-color, white);\n\n        @apply --paper-badge;\n      }\n    </style>\n\n    <div class=\"badge\">\n      <iron-icon hidden\\$=\"{{!_computeIsIconBadge(icon)}}\" icon=\"{{icon}}\"></iron-icon>\n      <span id=\"badge-text\" hidden\\$=\"{{_computeIsIconBadge(icon)}}\">{{label}}</span>\n    </div>\n  "]); _templateObject34_e13d1b4010eb11ec83cd7fddb4847b33 = function _templateObject34_e13d1b4010eb11ec83cd7fddb4847b33() { return data; }; return data; } function _templateObject33_e13d1b4010eb11ec83cd7fddb4847b33() { var data = babelHelpers.taggedTemplateLiteral(["\n    <style> \n        :host {\n            display: block;\n        }\n   \n        paper-card {\n            @apply --layout-vertical;\n            width: 100%;\n            height: 260px;\n        }\n       \n        .header {\n            @apply --layout;\n            @apply --layout-center;\n            height: 40px;\n            padding: 6px;\n        }\n        \n        .image {\n            @apply --layout-flex;\n            background-position: center center;\n            background-size: cover;\n            background-repeat: no-repeat;\n            position: relative;\n            border-bottom: 2px solid #eeeeee;\n            border-top: 2px solid #eeeeee;\n        }\n        \n        .content {\n            height: 60px;\n            padding: 6px;\n        }\n        \n        .header-card-title {\n           @apply --layout-flex;\n           @apply --layout-center;\n           text-rendering: optimizeLegibility;\n           font-size: 18px;\n           font-weight: 500;\n           height: 32px;\n           line-height: 32px;\n           display: block;\n           padding: 0 6px;\n           width: 1vw;\n           white-space: nowrap;\n           overflow: hidden;\n           text-overflow: ellipsis;\n       }\n       \n       .paragraph-card {\n           display: block;\n           height: 60px;\n           color: #757575;\n           font-size: 15px;\n           overflow: hidden;\n           overflow-y: auto;\n       }  \n       \n       .price {\n            padding: 2px 8px;\n            font-size: 18px;\n            font-weight: 400;\n            width: max-content;\n            border-radius: 6px;\n            position: absolute;\n            top: 4px;\n            right: 4px;\n            background-color: var(--munu-background-color);\n            color: var(--munu-color);\n       }  \n       \n       .header-card-category {\n            position: absolute;\n            border-radius: 6px;\n            bottom: 4px;\n            left: 4px;\n            padding: 4px;\n            background-color: var(--munu-background-color);\n            color: var(--munu-color);\n       }\n       \n        dsign-badge {\n         z-index: 1;\n         --paper-badge-background: var(--munu-color);\n         --paper-badge-text-color: var(--munu-background-color);\n         border: 1px solid var(--munu-background-color);\n         border-radius: 50%;\n         font-weight: bold;\n         --paper-badge : {\n            font-weight: 700;\n         }\n       }\n       \n       paper-icon-button {\n           position: absolute;\n           bottom: 4px;\n           right: 4px;\n           width: 26px;\n           height: 26px;\n           border-radius: 50%;\n           --paper-icon-button : {\n                padding: 1px;\n           }       \n           background-color: var(--munu-background-color);\n           color: var(--munu-color);\n       }\n       \n       paper-icon-button[disabled] {\n            background-color:#757575;\n       }\n       \n       .triangle {\n           position: absolute;\n           width: 0;\n           height: 0;\n           font-size: 8px;\n           border-top: 86px solid #fc0303;\n           border-right: 86px solid transparent;\n       }\n       \n       .status-dish {\n          top: 24px;\n          left: 10px;\n        \u2003 transform:rotate(315deg);\n          -webkit-transform: rotate(315deg);\n          -o-transform: rotate(315deg);\n          -moz-transform: rotate(315deg);\n          -ms-transform: rotate(315deg);\n          position: absolute;\n          font-size: 14px;\n          font-weight: 500;\n          text-transform: uppercase;\n       }\n          \n       [hidden] {\n          visibility: hidden;\n       }\n    </style>\n    <paper-card>\n        <div class=\"header\">\n            <div class=\"header-card-title\">{{_capitalize(menuItem.name.it )}}</div>\n        </div>\n        <div id=\"image\" class=\"image\">\n            <div class=\"triangle\"></div>\n            <div class=\"status-dish\">{{localize(statusLabel)}}</div>\n            <template is=\"dom-if\" if=\"{{hasPrice}}\">\n                <div class=\"price\">\n                    {{_computePrice(menuItem.price)}} \u20AC\n                </div>\n            </template>\n            <div class=\"header-card-category\">{{localize(category)}}</div>\n            <div id=\"action\">\n                <dsign-badge id=\"badgeMenu\" for=\"btn-menu\" label=\"{{dishCount}}\" class=\"red\" offset-x=\"-2\"></dsign-badge>\n                <paper-icon-button icon=\"add\" id=\"btn-menu\"  on-tap=\"addFavorite\"></paper-icon-button>\n            </div>\n        </div>\n        <div class=\"content\">\n            <div class=\"paragraph-card\">{{menuItem.description.it}}</div>\n        </div>\n    </paper-card>\n    "]); _templateObject33_e13d1b4010eb11ec83cd7fddb4847b33 = function _templateObject33_e13d1b4010eb11ec83cd7fddb4847b33() { return data; }; return data; } function _templateObject32_e13d1b4010eb11ec83cd7fddb4847b33() { var data = babelHelpers.taggedTemplateLiteral(["\n    <style>\n      :host {\n        display: block;\n      }\n    </style>\n\n    <slot></slot>\n  "]); _templateObject32_e13d1b4010eb11ec83cd7fddb4847b33 = function _templateObject32_e13d1b4010eb11ec83cd7fddb4847b33() { return data; }; return data; } function _templateObject31_e13d1b4010eb11ec83cd7fddb4847b33() { var data = babelHelpers.taggedTemplateLiteral(["\n    <style>\n      :host {\n        display: block;\n        position: relative;\n      }\n\n      :host > ::slotted(*) {\n        position: absolute;\n        top: 0;\n        left: 0;\n        bottom: 0;\n        right: 0;\n      }\n\n      :host > ::slotted(:not(.iron-selected):not(.neon-animating))\n       {\n        display: none !important;\n      }\n\n      :host > ::slotted(.neon-animating) {\n        pointer-events: none;\n      }\n    </style>\n\n    <slot id=\"content\"></slot>\n  "]); _templateObject31_e13d1b4010eb11ec83cd7fddb4847b33 = function _templateObject31_e13d1b4010eb11ec83cd7fddb4847b33() { return data; }; return data; } function _templateObject30_e13d1b4010eb11ec83cd7fddb4847b33() { var data = babelHelpers.taggedTemplateLiteral(["\n    <style include=\"paper-material-styles\">\n      :host {\n        display: inline-block;\n        position: relative;\n        box-sizing: border-box;\n        background-color: var(--paper-card-background-color, var(--primary-background-color));\n        border-radius: 2px;\n\n        @apply --paper-font-common-base;\n        @apply --paper-card;\n      }\n\n      /* IE 10 support for HTML5 hidden attr */\n      :host([hidden]), [hidden] {\n        display: none !important;\n      }\n\n      .header {\n        position: relative;\n        border-top-left-radius: inherit;\n        border-top-right-radius: inherit;\n        overflow: hidden;\n\n        @apply --paper-card-header;\n      }\n\n      .header iron-image {\n        display: block;\n        width: 100%;\n        --iron-image-width: 100%;\n        pointer-events: none;\n\n        @apply --paper-card-header-image;\n      }\n\n      .header .title-text {\n        padding: 16px;\n        font-size: 24px;\n        font-weight: 400;\n        color: var(--paper-card-header-color, #000);\n\n        @apply --paper-card-header-text;\n      }\n\n      .header .title-text.over-image {\n        position: absolute;\n        bottom: 0px;\n\n        @apply --paper-card-header-image-text;\n      }\n\n      :host ::slotted(.card-content) {\n        padding: 16px;\n        position:relative;\n\n        @apply --paper-card-content;\n      }\n\n      :host ::slotted(.card-actions) {\n        border-top: 1px solid #e8e8e8;\n        padding: 5px 16px;\n        position:relative;\n\n        @apply --paper-card-actions;\n      }\n\n      :host([elevation=\"1\"]) {\n        @apply --paper-material-elevation-1;\n      }\n\n      :host([elevation=\"2\"]) {\n        @apply --paper-material-elevation-2;\n      }\n\n      :host([elevation=\"3\"]) {\n        @apply --paper-material-elevation-3;\n      }\n\n      :host([elevation=\"4\"]) {\n        @apply --paper-material-elevation-4;\n      }\n\n      :host([elevation=\"5\"]) {\n        @apply --paper-material-elevation-5;\n      }\n    </style>\n\n    <div class=\"header\">\n      <iron-image hidden$=\"[[!image]]\" aria-hidden$=\"[[_isHidden(image)]]\" src=\"[[image]]\" alt=\"[[alt]]\" placeholder=\"[[placeholderImage]]\" preload=\"[[preloadImage]]\" fade=\"[[fadeImage]]\"></iron-image>\n      <div hidden$=\"[[!heading]]\" class$=\"title-text [[_computeHeadingClass(image)]]\">[[heading]]</div>\n    </div>\n\n    <slot></slot>\n"], ["\n    <style include=\"paper-material-styles\">\n      :host {\n        display: inline-block;\n        position: relative;\n        box-sizing: border-box;\n        background-color: var(--paper-card-background-color, var(--primary-background-color));\n        border-radius: 2px;\n\n        @apply --paper-font-common-base;\n        @apply --paper-card;\n      }\n\n      /* IE 10 support for HTML5 hidden attr */\n      :host([hidden]), [hidden] {\n        display: none !important;\n      }\n\n      .header {\n        position: relative;\n        border-top-left-radius: inherit;\n        border-top-right-radius: inherit;\n        overflow: hidden;\n\n        @apply --paper-card-header;\n      }\n\n      .header iron-image {\n        display: block;\n        width: 100%;\n        --iron-image-width: 100%;\n        pointer-events: none;\n\n        @apply --paper-card-header-image;\n      }\n\n      .header .title-text {\n        padding: 16px;\n        font-size: 24px;\n        font-weight: 400;\n        color: var(--paper-card-header-color, #000);\n\n        @apply --paper-card-header-text;\n      }\n\n      .header .title-text.over-image {\n        position: absolute;\n        bottom: 0px;\n\n        @apply --paper-card-header-image-text;\n      }\n\n      :host ::slotted(.card-content) {\n        padding: 16px;\n        position:relative;\n\n        @apply --paper-card-content;\n      }\n\n      :host ::slotted(.card-actions) {\n        border-top: 1px solid #e8e8e8;\n        padding: 5px 16px;\n        position:relative;\n\n        @apply --paper-card-actions;\n      }\n\n      :host([elevation=\"1\"]) {\n        @apply --paper-material-elevation-1;\n      }\n\n      :host([elevation=\"2\"]) {\n        @apply --paper-material-elevation-2;\n      }\n\n      :host([elevation=\"3\"]) {\n        @apply --paper-material-elevation-3;\n      }\n\n      :host([elevation=\"4\"]) {\n        @apply --paper-material-elevation-4;\n      }\n\n      :host([elevation=\"5\"]) {\n        @apply --paper-material-elevation-5;\n      }\n    </style>\n\n    <div class=\"header\">\n      <iron-image hidden\\$=\"[[!image]]\" aria-hidden\\$=\"[[_isHidden(image)]]\" src=\"[[image]]\" alt=\"[[alt]]\" placeholder=\"[[placeholderImage]]\" preload=\"[[preloadImage]]\" fade=\"[[fadeImage]]\"></iron-image>\n      <div hidden\\$=\"[[!heading]]\" class\\$=\"title-text [[_computeHeadingClass(image)]]\">[[heading]]</div>\n    </div>\n\n    <slot></slot>\n"]); _templateObject30_e13d1b4010eb11ec83cd7fddb4847b33 = function _templateObject30_e13d1b4010eb11ec83cd7fddb4847b33() { return data; }; return data; } function _templateObject29_e13d1b4010eb11ec83cd7fddb4847b33() { var data = babelHelpers.taggedTemplateLiteral(["\n    <style>\n      :host {\n        display: inline-block;\n        overflow: hidden;\n        position: relative;\n      }\n\n      #baseURIAnchor {\n        display: none;\n      }\n\n      #sizedImgDiv {\n        position: absolute;\n        top: 0px;\n        right: 0px;\n        bottom: 0px;\n        left: 0px;\n\n        display: none;\n      }\n\n      #img {\n        display: block;\n        width: var(--iron-image-width, auto);\n        height: var(--iron-image-height, auto);\n      }\n\n      :host([sizing]) #sizedImgDiv {\n        display: block;\n      }\n\n      :host([sizing]) #img {\n        display: none;\n      }\n\n      #placeholder {\n        position: absolute;\n        top: 0px;\n        right: 0px;\n        bottom: 0px;\n        left: 0px;\n\n        background-color: inherit;\n        opacity: 1;\n\n        @apply --iron-image-placeholder;\n      }\n\n      #placeholder.faded-out {\n        transition: opacity 0.5s linear;\n        opacity: 0;\n      }\n    </style>\n\n    <a id=\"baseURIAnchor\" href=\"#\"></a>\n    <div id=\"sizedImgDiv\" role=\"img\" hidden$=\"[[_computeImgDivHidden(sizing)]]\" aria-hidden$=\"[[_computeImgDivARIAHidden(alt)]]\" aria-label$=\"[[_computeImgDivARIALabel(alt, src)]]\"></div>\n    <img id=\"img\" alt$=\"[[alt]]\" hidden$=\"[[_computeImgHidden(sizing)]]\" crossorigin$=\"[[crossorigin]]\" on-load=\"_imgOnLoad\" on-error=\"_imgOnError\">\n    <div id=\"placeholder\" hidden$=\"[[_computePlaceholderHidden(preload, fade, loading, loaded)]]\" class$=\"[[_computePlaceholderClassName(preload, fade, loading, loaded)]]\"></div>\n"]); _templateObject29_e13d1b4010eb11ec83cd7fddb4847b33 = function _templateObject29_e13d1b4010eb11ec83cd7fddb4847b33() { return data; }; return data; } function _templateObject28_e13d1b4010eb11ec83cd7fddb4847b33() { var data = babelHelpers.taggedTemplateLiteral(["\n            <style>\n               paper-dropdown-menu {\n                width: 100%;\n                }\n            </style>\n            <paper-dropdown-menu id=\"category\" label=\"{{localize('language')}}\" on-iron-select=\"_selectLanguage\">\n                <paper-listbox id=\"listbox\" slot=\"dropdown-content\">\n                   <dom-repeat id=\"menu\" items=\"{{languages}}\" as=\"language\">\n                        <template>\n                             <paper-item value=\"{{language}}\">{{localize(language)}}</paper-item>\n                        </template>\n                    </dom-repeat>\n                </paper-listbox>\n            </paper-dropdown-menu>\n        "]); _templateObject28_e13d1b4010eb11ec83cd7fddb4847b33 = function _templateObject28_e13d1b4010eb11ec83cd7fddb4847b33() { return data; }; return data; } function _templateObject27_e13d1b4010eb11ec83cd7fddb4847b33() { var data = babelHelpers.taggedTemplateLiteral(["\n  <style include=\"paper-material-styles\">\n    /* Need to specify the same specificity as the styles imported from paper-material. */\n    :host {\n      @apply --layout-inline;\n      @apply --layout-center-center;\n      position: relative;\n      box-sizing: border-box;\n      min-width: 5.14em;\n      margin: 0 0.29em;\n      background: transparent;\n      -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n      -webkit-tap-highlight-color: transparent;\n      font: inherit;\n      text-transform: uppercase;\n      outline-width: 0;\n      border-radius: 3px;\n      -moz-user-select: none;\n      -ms-user-select: none;\n      -webkit-user-select: none;\n      user-select: none;\n      cursor: pointer;\n      z-index: 0;\n      padding: 0.7em 0.57em;\n\n      @apply --paper-font-common-base;\n      @apply --paper-button;\n    }\n\n    :host([elevation=\"1\"]) {\n      @apply --paper-material-elevation-1;\n    }\n\n    :host([elevation=\"2\"]) {\n      @apply --paper-material-elevation-2;\n    }\n\n    :host([elevation=\"3\"]) {\n      @apply --paper-material-elevation-3;\n    }\n\n    :host([elevation=\"4\"]) {\n      @apply --paper-material-elevation-4;\n    }\n\n    :host([elevation=\"5\"]) {\n      @apply --paper-material-elevation-5;\n    }\n\n    :host([hidden]) {\n      display: none !important;\n    }\n\n    :host([raised].keyboard-focus) {\n      font-weight: bold;\n      @apply --paper-button-raised-keyboard-focus;\n    }\n\n    :host(:not([raised]).keyboard-focus) {\n      font-weight: bold;\n      @apply --paper-button-flat-keyboard-focus;\n    }\n\n    :host([disabled]) {\n      background: none;\n      color: #a8a8a8;\n      cursor: auto;\n      pointer-events: none;\n\n      @apply --paper-button-disabled;\n    }\n\n    :host([disabled][raised]) {\n      background: #eaeaea;\n    }\n\n\n    :host([animated]) {\n      @apply --shadow-transition;\n    }\n\n    paper-ripple {\n      color: var(--paper-button-ink-color);\n    }\n  </style>\n\n  <slot></slot>"]); _templateObject27_e13d1b4010eb11ec83cd7fddb4847b33 = function _templateObject27_e13d1b4010eb11ec83cd7fddb4847b33() { return data; }; return data; } function _templateObject26_e13d1b4010eb11ec83cd7fddb4847b33() { var data = babelHelpers.taggedTemplateLiteral(["\n<dom-module id=\"paper-material-styles\">\n  <template>\n    <style>\n      html {\n        --paper-material: {\n          display: block;\n          position: relative;\n        };\n        --paper-material-elevation-1: {\n          @apply --shadow-elevation-2dp;\n        };\n        --paper-material-elevation-2: {\n          @apply --shadow-elevation-4dp;\n        };\n        --paper-material-elevation-3: {\n          @apply --shadow-elevation-6dp;\n        };\n        --paper-material-elevation-4: {\n          @apply --shadow-elevation-8dp;\n        };\n        --paper-material-elevation-5: {\n          @apply --shadow-elevation-16dp;\n        };\n      }\n      .paper-material {\n        @apply --paper-material;\n      }\n      .paper-material[elevation=\"1\"] {\n        @apply --paper-material-elevation-1;\n      }\n      .paper-material[elevation=\"2\"] {\n        @apply --paper-material-elevation-2;\n      }\n      .paper-material[elevation=\"3\"] {\n        @apply --paper-material-elevation-3;\n      }\n      .paper-material[elevation=\"4\"] {\n        @apply --paper-material-elevation-4;\n      }\n      .paper-material[elevation=\"5\"] {\n        @apply --paper-material-elevation-5;\n      }\n\n      /* Duplicate the styles because of https://github.com/webcomponents/shadycss/issues/193 */\n      :host {\n        --paper-material: {\n          display: block;\n          position: relative;\n        };\n        --paper-material-elevation-1: {\n          @apply --shadow-elevation-2dp;\n        };\n        --paper-material-elevation-2: {\n          @apply --shadow-elevation-4dp;\n        };\n        --paper-material-elevation-3: {\n          @apply --shadow-elevation-6dp;\n        };\n        --paper-material-elevation-4: {\n          @apply --shadow-elevation-8dp;\n        };\n        --paper-material-elevation-5: {\n          @apply --shadow-elevation-16dp;\n        };\n      }\n      :host(.paper-material) {\n        @apply --paper-material;\n      }\n      :host(.paper-material[elevation=\"1\"]) {\n        @apply --paper-material-elevation-1;\n      }\n      :host(.paper-material[elevation=\"2\"]) {\n        @apply --paper-material-elevation-2;\n      }\n      :host(.paper-material[elevation=\"3\"]) {\n        @apply --paper-material-elevation-3;\n      }\n      :host(.paper-material[elevation=\"4\"]) {\n        @apply --paper-material-elevation-4;\n      }\n      :host(.paper-material[elevation=\"5\"]) {\n        @apply --paper-material-elevation-5;\n      }\n    </style>\n  </template>\n</dom-module>"]); _templateObject26_e13d1b4010eb11ec83cd7fddb4847b33 = function _templateObject26_e13d1b4010eb11ec83cd7fddb4847b33() { return data; }; return data; } function _templateObject25_e13d1b4010eb11ec83cd7fddb4847b33() { var data = babelHelpers.taggedTemplateLiteral(["\n    <style>\n      :host {\n        display: block;\n        padding: 8px 0;\n\n        background: var(--paper-listbox-background-color, var(--primary-background-color));\n        color: var(--paper-listbox-color, var(--primary-text-color));\n\n        @apply --paper-listbox;\n      }\n    </style>\n\n    <slot></slot>\n"]); _templateObject25_e13d1b4010eb11ec83cd7fddb4847b33 = function _templateObject25_e13d1b4010eb11ec83cd7fddb4847b33() { return data; }; return data; } function _templateObject24_e13d1b4010eb11ec83cd7fddb4847b33() { var data = babelHelpers.taggedTemplateLiteral(["\n    <style>\n      :host {\n        display: inline-block;\n        position: relative;\n        padding: 8px;\n        outline: none;\n        -webkit-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        user-select: none;\n        cursor: pointer;\n        z-index: 0;\n        line-height: 1;\n\n        width: 40px;\n        height: 40px;\n\n        /*\n          NOTE: Both values are needed, since some phones require the value to\n          be `transparent`.\n        */\n        -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n        -webkit-tap-highlight-color: transparent;\n\n        /* Because of polymer/2558, this style has lower specificity than * */\n        box-sizing: border-box !important;\n\n        @apply --paper-icon-button;\n      }\n\n      :host #ink {\n        color: var(--paper-icon-button-ink-color, var(--primary-text-color));\n        opacity: 0.6;\n      }\n\n      :host([disabled]) {\n        color: var(--paper-icon-button-disabled-text, var(--disabled-text-color));\n        pointer-events: none;\n        cursor: auto;\n\n        @apply --paper-icon-button-disabled;\n      }\n\n      :host([hidden]) {\n        display: none !important;\n      }\n\n      :host(:hover) {\n        @apply --paper-icon-button-hover;\n      }\n\n      iron-icon {\n        --iron-icon-width: 100%;\n        --iron-icon-height: 100%;\n      }\n    </style>\n\n    <iron-icon id=\"icon\" src=\"[[src]]\" icon=\"[[icon]]\"\n               alt$=\"[[alt]]\"></iron-icon>\n  "], ["\n    <style>\n      :host {\n        display: inline-block;\n        position: relative;\n        padding: 8px;\n        outline: none;\n        -webkit-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        user-select: none;\n        cursor: pointer;\n        z-index: 0;\n        line-height: 1;\n\n        width: 40px;\n        height: 40px;\n\n        /*\n          NOTE: Both values are needed, since some phones require the value to\n          be \\`transparent\\`.\n        */\n        -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n        -webkit-tap-highlight-color: transparent;\n\n        /* Because of polymer/2558, this style has lower specificity than * */\n        box-sizing: border-box !important;\n\n        @apply --paper-icon-button;\n      }\n\n      :host #ink {\n        color: var(--paper-icon-button-ink-color, var(--primary-text-color));\n        opacity: 0.6;\n      }\n\n      :host([disabled]) {\n        color: var(--paper-icon-button-disabled-text, var(--disabled-text-color));\n        pointer-events: none;\n        cursor: auto;\n\n        @apply --paper-icon-button-disabled;\n      }\n\n      :host([hidden]) {\n        display: none !important;\n      }\n\n      :host(:hover) {\n        @apply --paper-icon-button-hover;\n      }\n\n      iron-icon {\n        --iron-icon-width: 100%;\n        --iron-icon-height: 100%;\n      }\n    </style>\n\n    <iron-icon id=\"icon\" src=\"[[src]]\" icon=\"[[icon]]\"\n               alt$=\"[[alt]]\"></iron-icon>\n  "]); _templateObject24_e13d1b4010eb11ec83cd7fddb4847b33 = function _templateObject24_e13d1b4010eb11ec83cd7fddb4847b33() { return data; }; return data; } function _templateObject23_e13d1b4010eb11ec83cd7fddb4847b33() { var data = babelHelpers.taggedTemplateLiteral(["\n    <style include=\"paper-item-shared-styles\">\n      :host {\n        @apply --layout-horizontal;\n        @apply --layout-center;\n        @apply --paper-font-subhead;\n\n        @apply --paper-item;\n      }\n    </style>\n    <slot></slot>\n"]); _templateObject23_e13d1b4010eb11ec83cd7fddb4847b33 = function _templateObject23_e13d1b4010eb11ec83cd7fddb4847b33() { return data; }; return data; } function _templateObject22_e13d1b4010eb11ec83cd7fddb4847b33() { var data = babelHelpers.taggedTemplateLiteral(["\n    <style include=\"paper-dropdown-menu-shared-styles\"></style>\n\n    <paper-menu-button id=\"menuButton\" vertical-align=\"[[verticalAlign]]\" horizontal-align=\"[[horizontalAlign]]\" dynamic-align=\"[[dynamicAlign]]\" vertical-offset=\"[[_computeMenuVerticalOffset(noLabelFloat, verticalOffset)]]\" disabled=\"[[disabled]]\" no-animations=\"[[noAnimations]]\" on-iron-select=\"_onIronSelect\" on-iron-deselect=\"_onIronDeselect\" opened=\"{{opened}}\" close-on-activate allow-outside-scroll=\"[[allowOutsideScroll]]\" restore-focus-on-close=\"[[restoreFocusOnClose]]\">\n      <!-- support hybrid mode: user might be using paper-menu-button 1.x which distributes via <content> -->\n      <div class=\"dropdown-trigger\" slot=\"dropdown-trigger\">\n        <paper-ripple></paper-ripple>\n        <!-- paper-input has type=\"text\" for a11y, do not remove -->\n        <paper-input id=\"input\" type=\"text\" invalid=\"[[invalid]]\" readonly disabled=\"[[disabled]]\" value=\"[[value]]\" placeholder=\"[[placeholder]]\" error-message=\"[[errorMessage]]\" always-float-label=\"[[alwaysFloatLabel]]\" no-label-float=\"[[noLabelFloat]]\" label=\"[[label]]\" input-role=\"button\" input-aria-haspopup=\"listbox\" autocomplete=\"off\">\n          <!-- support hybrid mode: user might be using paper-input 1.x which distributes via <content> -->\n          <iron-icon icon=\"paper-dropdown-menu:arrow-drop-down\" suffix slot=\"suffix\"></iron-icon>\n        </paper-input>\n      </div>\n      <slot id=\"content\" name=\"dropdown-content\" slot=\"dropdown-content\"></slot>\n    </paper-menu-button>\n"], ["\n    <style include=\"paper-dropdown-menu-shared-styles\"></style>\n\n    <paper-menu-button id=\"menuButton\" vertical-align=\"[[verticalAlign]]\" horizontal-align=\"[[horizontalAlign]]\" dynamic-align=\"[[dynamicAlign]]\" vertical-offset=\"[[_computeMenuVerticalOffset(noLabelFloat, verticalOffset)]]\" disabled=\"[[disabled]]\" no-animations=\"[[noAnimations]]\" on-iron-select=\"_onIronSelect\" on-iron-deselect=\"_onIronDeselect\" opened=\"{{opened}}\" close-on-activate allow-outside-scroll=\"[[allowOutsideScroll]]\" restore-focus-on-close=\"[[restoreFocusOnClose]]\">\n      \\x3c!-- support hybrid mode: user might be using paper-menu-button 1.x which distributes via <content> --\\x3e\n      <div class=\"dropdown-trigger\" slot=\"dropdown-trigger\">\n        <paper-ripple></paper-ripple>\n        \\x3c!-- paper-input has type=\"text\" for a11y, do not remove --\\x3e\n        <paper-input id=\"input\" type=\"text\" invalid=\"[[invalid]]\" readonly disabled=\"[[disabled]]\" value=\"[[value]]\" placeholder=\"[[placeholder]]\" error-message=\"[[errorMessage]]\" always-float-label=\"[[alwaysFloatLabel]]\" no-label-float=\"[[noLabelFloat]]\" label=\"[[label]]\" input-role=\"button\" input-aria-haspopup=\"listbox\" autocomplete=\"off\">\n          \\x3c!-- support hybrid mode: user might be using paper-input 1.x which distributes via <content> --\\x3e\n          <iron-icon icon=\"paper-dropdown-menu:arrow-drop-down\" suffix slot=\"suffix\"></iron-icon>\n        </paper-input>\n      </div>\n      <slot id=\"content\" name=\"dropdown-content\" slot=\"dropdown-content\"></slot>\n    </paper-menu-button>\n"]); _templateObject22_e13d1b4010eb11ec83cd7fddb4847b33 = function _templateObject22_e13d1b4010eb11ec83cd7fddb4847b33() { return data; }; return data; } function _templateObject21_e13d1b4010eb11ec83cd7fddb4847b33() { var data = babelHelpers.taggedTemplateLiteral(["\n    <style>\n      :host {\n        display: block;\n        position: absolute;\n        border-radius: inherit;\n        overflow: hidden;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n\n        /* See PolymerElements/paper-behaviors/issues/34. On non-Chrome browsers,\n         * creating a node (with a position:absolute) in the middle of an event\n         * handler \"interrupts\" that event handler (which happens when the\n         * ripple is created on demand) */\n        pointer-events: none;\n      }\n\n      :host([animating]) {\n        /* This resolves a rendering issue in Chrome (as of 40) where the\n           ripple is not properly clipped by its parent (which may have\n           rounded corners). See: http://jsbin.com/temexa/4\n\n           Note: We only apply this style conditionally. Otherwise, the browser\n           will create a new compositing layer for every ripple element on the\n           page, and that would be bad. */\n        -webkit-transform: translate(0, 0);\n        transform: translate3d(0, 0, 0);\n      }\n\n      #background,\n      #waves,\n      .wave-container,\n      .wave {\n        pointer-events: none;\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n      }\n\n      #background,\n      .wave {\n        opacity: 0;\n      }\n\n      #waves,\n      .wave {\n        overflow: hidden;\n      }\n\n      .wave-container,\n      .wave {\n        border-radius: 50%;\n      }\n\n      :host(.circle) #background,\n      :host(.circle) #waves {\n        border-radius: 50%;\n      }\n\n      :host(.circle) .wave-container {\n        overflow: hidden;\n      }\n    </style>\n\n    <div id=\"background\"></div>\n    <div id=\"waves\"></div>\n"]); _templateObject21_e13d1b4010eb11ec83cd7fddb4847b33 = function _templateObject21_e13d1b4010eb11ec83cd7fddb4847b33() { return data; }; return data; } function _templateObject20_e13d1b4010eb11ec83cd7fddb4847b33() { var data = babelHelpers.taggedTemplateLiteral(["\n    <style>\n      :host {\n        display: inline-block;\n        position: relative;\n        padding: 8px;\n        outline: none;\n\n        @apply --paper-menu-button;\n      }\n\n      :host([disabled]) {\n        cursor: auto;\n        color: var(--disabled-text-color);\n\n        @apply --paper-menu-button-disabled;\n      }\n\n      iron-dropdown {\n        @apply --paper-menu-button-dropdown;\n      }\n\n      .dropdown-content {\n        @apply --shadow-elevation-2dp;\n\n        position: relative;\n        border-radius: 2px;\n        background-color: var(--paper-menu-button-dropdown-background, var(--primary-background-color));\n\n        @apply --paper-menu-button-content;\n      }\n\n      :host([vertical-align=\"top\"]) .dropdown-content {\n        margin-bottom: 20px;\n        margin-top: -10px;\n        top: 10px;\n      }\n\n      :host([vertical-align=\"bottom\"]) .dropdown-content {\n        bottom: 10px;\n        margin-bottom: -10px;\n        margin-top: 20px;\n      }\n\n      #trigger {\n        cursor: pointer;\n      }\n    </style>\n\n    <div id=\"trigger\" on-tap=\"toggle\">\n      <slot name=\"dropdown-trigger\"></slot>\n    </div>\n\n    <iron-dropdown id=\"dropdown\" opened=\"{{opened}}\" horizontal-align=\"[[horizontalAlign]]\" vertical-align=\"[[verticalAlign]]\" dynamic-align=\"[[dynamicAlign]]\" horizontal-offset=\"[[horizontalOffset]]\" vertical-offset=\"[[verticalOffset]]\" no-overlap=\"[[noOverlap]]\" open-animation-config=\"[[openAnimationConfig]]\" close-animation-config=\"[[closeAnimationConfig]]\" no-animations=\"[[noAnimations]]\" focus-target=\"[[_dropdownContent]]\" allow-outside-scroll=\"[[allowOutsideScroll]]\" restore-focus-on-close=\"[[restoreFocusOnClose]]\" on-iron-overlay-canceled=\"__onIronOverlayCanceled\">\n      <div slot=\"dropdown-content\" class=\"dropdown-content\">\n        <slot id=\"content\" name=\"dropdown-content\"></slot>\n      </div>\n    </iron-dropdown>\n"]); _templateObject20_e13d1b4010eb11ec83cd7fddb4847b33 = function _templateObject20_e13d1b4010eb11ec83cd7fddb4847b33() { return data; }; return data; } function _templateObject19_e13d1b4010eb11ec83cd7fddb4847b33() { var data = babelHelpers.taggedTemplateLiteral(["\n<custom-style>\n  <style is=\"custom-style\">\n    html {\n\n      --shadow-transition: {\n        transition: box-shadow 0.28s cubic-bezier(0.4, 0, 0.2, 1);\n      };\n\n      --shadow-none: {\n        box-shadow: none;\n      };\n\n      /* from http://codepen.io/shyndman/pen/c5394ddf2e8b2a5c9185904b57421cdb */\n\n      --shadow-elevation-2dp: {\n        box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14),\n                    0 1px 5px 0 rgba(0, 0, 0, 0.12),\n                    0 3px 1px -2px rgba(0, 0, 0, 0.2);\n      };\n\n      --shadow-elevation-3dp: {\n        box-shadow: 0 3px 4px 0 rgba(0, 0, 0, 0.14),\n                    0 1px 8px 0 rgba(0, 0, 0, 0.12),\n                    0 3px 3px -2px rgba(0, 0, 0, 0.4);\n      };\n\n      --shadow-elevation-4dp: {\n        box-shadow: 0 4px 5px 0 rgba(0, 0, 0, 0.14),\n                    0 1px 10px 0 rgba(0, 0, 0, 0.12),\n                    0 2px 4px -1px rgba(0, 0, 0, 0.4);\n      };\n\n      --shadow-elevation-6dp: {\n        box-shadow: 0 6px 10px 0 rgba(0, 0, 0, 0.14),\n                    0 1px 18px 0 rgba(0, 0, 0, 0.12),\n                    0 3px 5px -1px rgba(0, 0, 0, 0.4);\n      };\n\n      --shadow-elevation-8dp: {\n        box-shadow: 0 8px 10px 1px rgba(0, 0, 0, 0.14),\n                    0 3px 14px 2px rgba(0, 0, 0, 0.12),\n                    0 5px 5px -3px rgba(0, 0, 0, 0.4);\n      };\n\n      --shadow-elevation-12dp: {\n        box-shadow: 0 12px 16px 1px rgba(0, 0, 0, 0.14),\n                    0 4px 22px 3px rgba(0, 0, 0, 0.12),\n                    0 6px 7px -4px rgba(0, 0, 0, 0.4);\n      };\n\n      --shadow-elevation-16dp: {\n        box-shadow: 0 16px 24px 2px rgba(0, 0, 0, 0.14),\n                    0  6px 30px 5px rgba(0, 0, 0, 0.12),\n                    0  8px 10px -5px rgba(0, 0, 0, 0.4);\n      };\n\n      --shadow-elevation-24dp: {\n        box-shadow: 0 24px 38px 3px rgba(0, 0, 0, 0.14),\n                    0 9px 46px 8px rgba(0, 0, 0, 0.12),\n                    0 11px 15px -7px rgba(0, 0, 0, 0.4);\n      };\n    }\n  </style>\n</custom-style>"]); _templateObject19_e13d1b4010eb11ec83cd7fddb4847b33 = function _templateObject19_e13d1b4010eb11ec83cd7fddb4847b33() { return data; }; return data; } function _templateObject18_e13d1b4010eb11ec83cd7fddb4847b33() { var data = babelHelpers.taggedTemplateLiteral(["\n    <style>\n      :host {\n        position: fixed;\n      }\n\n      #contentWrapper ::slotted(*) {\n        overflow: auto;\n      }\n\n      #contentWrapper.animating ::slotted(*) {\n        overflow: hidden;\n        pointer-events: none;\n      }\n    </style>\n\n    <div id=\"contentWrapper\">\n      <slot id=\"content\" name=\"dropdown-content\"></slot>\n    </div>\n"]); _templateObject18_e13d1b4010eb11ec83cd7fddb4847b33 = function _templateObject18_e13d1b4010eb11ec83cd7fddb4847b33() { return data; }; return data; } function _templateObject17_e13d1b4010eb11ec83cd7fddb4847b33() { var data = babelHelpers.taggedTemplateLiteral(["\n    <style>\n      :host {\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background-color: var(--iron-overlay-backdrop-background-color, #000);\n        opacity: 0;\n        transition: opacity 0.2s;\n        pointer-events: none;\n        @apply --iron-overlay-backdrop;\n      }\n\n      :host(.opened) {\n        opacity: var(--iron-overlay-backdrop-opacity, 0.6);\n        pointer-events: auto;\n        @apply --iron-overlay-backdrop-opened;\n      }\n    </style>\n\n    <slot></slot>\n"]); _templateObject17_e13d1b4010eb11ec83cd7fddb4847b33 = function _templateObject17_e13d1b4010eb11ec83cd7fddb4847b33() { return data; }; return data; } function _templateObject16_e13d1b4010eb11ec83cd7fddb4847b33() { var data = babelHelpers.taggedTemplateLiteral(["\n    <style>\n      :host {\n        display: block;\n      }\n\n      :host([focused]) {\n        outline: none;\n      }\n\n      :host([hidden]) {\n        display: none !important;\n      }\n\n      input {\n        /* Firefox sets a min-width on the input, which can cause layout issues */\n        min-width: 0;\n      }\n\n      /* In 1.x, the <input> is distributed to paper-input-container, which styles it.\n      In 2.x the <iron-input> is distributed to paper-input-container, which styles\n      it, but in order for this to work correctly, we need to reset some\n      of the native input's properties to inherit (from the iron-input) */\n      iron-input > input {\n        @apply --paper-input-container-shared-input-style;\n        font-family: inherit;\n        font-weight: inherit;\n        font-size: inherit;\n        letter-spacing: inherit;\n        word-spacing: inherit;\n        line-height: inherit;\n        text-shadow: inherit;\n        color: inherit;\n        cursor: inherit;\n      }\n\n      input:disabled {\n        @apply --paper-input-container-input-disabled;\n      }\n\n      input::-webkit-outer-spin-button,\n      input::-webkit-inner-spin-button {\n        @apply --paper-input-container-input-webkit-spinner;\n      }\n\n      input::-webkit-clear-button {\n        @apply --paper-input-container-input-webkit-clear;\n      }\n\n      input::-webkit-calendar-picker-indicator {\n        @apply --paper-input-container-input-webkit-calendar-picker-indicator;\n      }\n\n      input::-webkit-input-placeholder {\n        color: var(--paper-input-container-color, var(--secondary-text-color));\n      }\n\n      input:-moz-placeholder {\n        color: var(--paper-input-container-color, var(--secondary-text-color));\n      }\n\n      input::-moz-placeholder {\n        color: var(--paper-input-container-color, var(--secondary-text-color));\n      }\n\n      input::-ms-clear {\n        @apply --paper-input-container-ms-clear;\n      }\n\n      input::-ms-reveal {\n        @apply --paper-input-container-ms-reveal;\n      }\n\n      input:-ms-input-placeholder {\n        color: var(--paper-input-container-color, var(--secondary-text-color));\n      }\n\n      label {\n        pointer-events: none;\n      }\n    </style>\n\n    <paper-input-container id=\"container\" no-label-float=\"[[noLabelFloat]]\" always-float-label=\"[[_computeAlwaysFloatLabel(alwaysFloatLabel,placeholder)]]\" auto-validate$=\"[[autoValidate]]\" disabled$=\"[[disabled]]\" invalid=\"[[invalid]]\">\n\n      <slot name=\"prefix\" slot=\"prefix\"></slot>\n\n      <label hidden$=\"[[!label]]\" aria-hidden=\"true\" for$=\"[[_inputId]]\" slot=\"label\">[[label]]</label>\n\n      <!-- Need to bind maxlength so that the paper-input-char-counter works correctly -->\n      <iron-input bind-value=\"{{value}}\" slot=\"input\" class=\"input-element\" id$=\"[[_inputId]]\" maxlength$=\"[[maxlength]]\" allowed-pattern=\"[[allowedPattern]]\" invalid=\"{{invalid}}\" validator=\"[[validator]]\">\n        <input aria-labelledby$=\"[[_ariaLabelledBy]]\" aria-describedby$=\"[[_ariaDescribedBy]]\" disabled$=\"[[disabled]]\" title$=\"[[title]]\" type$=\"[[type]]\" pattern$=\"[[pattern]]\" required$=\"[[required]]\" autocomplete$=\"[[autocomplete]]\" autofocus$=\"[[autofocus]]\" inputmode$=\"[[inputmode]]\" minlength$=\"[[minlength]]\" maxlength$=\"[[maxlength]]\" min$=\"[[min]]\" max$=\"[[max]]\" step$=\"[[step]]\" name$=\"[[name]]\" placeholder$=\"[[placeholder]]\" readonly$=\"[[readonly]]\" list$=\"[[list]]\" size$=\"[[size]]\" autocapitalize$=\"[[autocapitalize]]\" autocorrect$=\"[[autocorrect]]\" on-change=\"_onChange\" tabindex$=\"[[tabIndex]]\" autosave$=\"[[autosave]]\" results$=\"[[results]]\" accept$=\"[[accept]]\" multiple$=\"[[multiple]]\" role$=\"[[inputRole]]\" aria-haspopup$=\"[[inputAriaHaspopup]]\">\n      </iron-input>\n\n      <slot name=\"suffix\" slot=\"suffix\"></slot>\n\n      <template is=\"dom-if\" if=\"[[errorMessage]]\">\n        <paper-input-error aria-live=\"assertive\" slot=\"add-on\">[[errorMessage]]</paper-input-error>\n      </template>\n\n      <template is=\"dom-if\" if=\"[[charCounter]]\">\n        <paper-input-char-counter slot=\"add-on\"></paper-input-char-counter>\n      </template>\n\n    </paper-input-container>\n  "], ["\n    <style>\n      :host {\n        display: block;\n      }\n\n      :host([focused]) {\n        outline: none;\n      }\n\n      :host([hidden]) {\n        display: none !important;\n      }\n\n      input {\n        /* Firefox sets a min-width on the input, which can cause layout issues */\n        min-width: 0;\n      }\n\n      /* In 1.x, the <input> is distributed to paper-input-container, which styles it.\n      In 2.x the <iron-input> is distributed to paper-input-container, which styles\n      it, but in order for this to work correctly, we need to reset some\n      of the native input's properties to inherit (from the iron-input) */\n      iron-input > input {\n        @apply --paper-input-container-shared-input-style;\n        font-family: inherit;\n        font-weight: inherit;\n        font-size: inherit;\n        letter-spacing: inherit;\n        word-spacing: inherit;\n        line-height: inherit;\n        text-shadow: inherit;\n        color: inherit;\n        cursor: inherit;\n      }\n\n      input:disabled {\n        @apply --paper-input-container-input-disabled;\n      }\n\n      input::-webkit-outer-spin-button,\n      input::-webkit-inner-spin-button {\n        @apply --paper-input-container-input-webkit-spinner;\n      }\n\n      input::-webkit-clear-button {\n        @apply --paper-input-container-input-webkit-clear;\n      }\n\n      input::-webkit-calendar-picker-indicator {\n        @apply --paper-input-container-input-webkit-calendar-picker-indicator;\n      }\n\n      input::-webkit-input-placeholder {\n        color: var(--paper-input-container-color, var(--secondary-text-color));\n      }\n\n      input:-moz-placeholder {\n        color: var(--paper-input-container-color, var(--secondary-text-color));\n      }\n\n      input::-moz-placeholder {\n        color: var(--paper-input-container-color, var(--secondary-text-color));\n      }\n\n      input::-ms-clear {\n        @apply --paper-input-container-ms-clear;\n      }\n\n      input::-ms-reveal {\n        @apply --paper-input-container-ms-reveal;\n      }\n\n      input:-ms-input-placeholder {\n        color: var(--paper-input-container-color, var(--secondary-text-color));\n      }\n\n      label {\n        pointer-events: none;\n      }\n    </style>\n\n    <paper-input-container id=\"container\" no-label-float=\"[[noLabelFloat]]\" always-float-label=\"[[_computeAlwaysFloatLabel(alwaysFloatLabel,placeholder)]]\" auto-validate$=\"[[autoValidate]]\" disabled$=\"[[disabled]]\" invalid=\"[[invalid]]\">\n\n      <slot name=\"prefix\" slot=\"prefix\"></slot>\n\n      <label hidden$=\"[[!label]]\" aria-hidden=\"true\" for$=\"[[_inputId]]\" slot=\"label\">[[label]]</label>\n\n      \\x3c!-- Need to bind maxlength so that the paper-input-char-counter works correctly --\\x3e\n      <iron-input bind-value=\"{{value}}\" slot=\"input\" class=\"input-element\" id$=\"[[_inputId]]\" maxlength$=\"[[maxlength]]\" allowed-pattern=\"[[allowedPattern]]\" invalid=\"{{invalid}}\" validator=\"[[validator]]\">\n        <input aria-labelledby$=\"[[_ariaLabelledBy]]\" aria-describedby$=\"[[_ariaDescribedBy]]\" disabled$=\"[[disabled]]\" title$=\"[[title]]\" type$=\"[[type]]\" pattern$=\"[[pattern]]\" required$=\"[[required]]\" autocomplete$=\"[[autocomplete]]\" autofocus$=\"[[autofocus]]\" inputmode$=\"[[inputmode]]\" minlength$=\"[[minlength]]\" maxlength$=\"[[maxlength]]\" min$=\"[[min]]\" max$=\"[[max]]\" step$=\"[[step]]\" name$=\"[[name]]\" placeholder$=\"[[placeholder]]\" readonly$=\"[[readonly]]\" list$=\"[[list]]\" size$=\"[[size]]\" autocapitalize$=\"[[autocapitalize]]\" autocorrect$=\"[[autocorrect]]\" on-change=\"_onChange\" tabindex$=\"[[tabIndex]]\" autosave$=\"[[autosave]]\" results$=\"[[results]]\" accept$=\"[[accept]]\" multiple$=\"[[multiple]]\" role$=\"[[inputRole]]\" aria-haspopup$=\"[[inputAriaHaspopup]]\">\n      </iron-input>\n\n      <slot name=\"suffix\" slot=\"suffix\"></slot>\n\n      <template is=\"dom-if\" if=\"[[errorMessage]]\">\n        <paper-input-error aria-live=\"assertive\" slot=\"add-on\">[[errorMessage]]</paper-input-error>\n      </template>\n\n      <template is=\"dom-if\" if=\"[[charCounter]]\">\n        <paper-input-char-counter slot=\"add-on\"></paper-input-char-counter>\n      </template>\n\n    </paper-input-container>\n  "]); _templateObject16_e13d1b4010eb11ec83cd7fddb4847b33 = function _templateObject16_e13d1b4010eb11ec83cd7fddb4847b33() { return data; }; return data; } function _templateObject15_e13d1b4010eb11ec83cd7fddb4847b33() { var data = babelHelpers.taggedTemplateLiteral(["\n    <style>\n      :host {\n        display: inline-block;\n        visibility: hidden;\n\n        color: var(--paper-input-container-invalid-color, var(--error-color));\n\n        @apply --paper-font-caption;\n        @apply --paper-input-error;\n        position: absolute;\n        left:0;\n        right:0;\n      }\n\n      :host([invalid]) {\n        visibility: visible;\n      }\n\n      #a11yWrapper {\n        visibility: hidden;\n      }\n\n      :host([invalid]) #a11yWrapper {\n        visibility: visible;\n      }\n    </style>\n\n    <!--\n    If the paper-input-error element is directly referenced by an\n    `aria-describedby` attribute, such as when used as a paper-input add-on,\n    then applying `visibility: hidden;` to the paper-input-error element itself\n    does not hide the error.\n\n    For more information, see:\n    https://www.w3.org/TR/accname-1.1/#mapping_additional_nd_description\n    -->\n    <div id=\"a11yWrapper\">\n      <slot></slot>\n    </div>\n"], ["\n    <style>\n      :host {\n        display: inline-block;\n        visibility: hidden;\n\n        color: var(--paper-input-container-invalid-color, var(--error-color));\n\n        @apply --paper-font-caption;\n        @apply --paper-input-error;\n        position: absolute;\n        left:0;\n        right:0;\n      }\n\n      :host([invalid]) {\n        visibility: visible;\n      }\n\n      #a11yWrapper {\n        visibility: hidden;\n      }\n\n      :host([invalid]) #a11yWrapper {\n        visibility: visible;\n      }\n    </style>\n\n    \\x3c!--\n    If the paper-input-error element is directly referenced by an\n    \\`aria-describedby\\` attribute, such as when used as a paper-input add-on,\n    then applying \\`visibility: hidden;\\` to the paper-input-error element itself\n    does not hide the error.\n\n    For more information, see:\n    https://www.w3.org/TR/accname-1.1/#mapping_additional_nd_description\n    --\\x3e\n    <div id=\"a11yWrapper\">\n      <slot></slot>\n    </div>\n"]); _templateObject15_e13d1b4010eb11ec83cd7fddb4847b33 = function _templateObject15_e13d1b4010eb11ec83cd7fddb4847b33() { return data; }; return data; } function _templateObject14_e13d1b4010eb11ec83cd7fddb4847b33() { var data = babelHelpers.taggedTemplateLiteral(["\n    <style>\n      :host {\n        display: block;\n        padding: 8px 0;\n        @apply --paper-input-container;\n      }\n\n      :host([inline]) {\n        display: inline-block;\n      }\n\n      :host([disabled]) {\n        pointer-events: none;\n        opacity: 0.33;\n\n        @apply --paper-input-container-disabled;\n      }\n\n      :host([hidden]) {\n        display: none !important;\n      }\n\n      [hidden] {\n        display: none !important;\n      }\n\n      .floated-label-placeholder {\n        @apply --paper-font-caption;\n      }\n\n      .underline {\n        height: 2px;\n        position: relative;\n      }\n\n      .focused-line {\n        @apply --layout-fit;\n        border-bottom: 2px solid var(--paper-input-container-focus-color, var(--primary-color));\n\n        -webkit-transform-origin: center center;\n        transform-origin: center center;\n        -webkit-transform: scale3d(0,1,1);\n        transform: scale3d(0,1,1);\n\n        @apply --paper-input-container-underline-focus;\n      }\n\n      .underline.is-highlighted .focused-line {\n        -webkit-transform: none;\n        transform: none;\n        -webkit-transition: -webkit-transform 0.25s;\n        transition: transform 0.25s;\n\n        @apply --paper-transition-easing;\n      }\n\n      .underline.is-invalid .focused-line {\n        border-color: var(--paper-input-container-invalid-color, var(--error-color));\n        -webkit-transform: none;\n        transform: none;\n        -webkit-transition: -webkit-transform 0.25s;\n        transition: transform 0.25s;\n\n        @apply --paper-transition-easing;\n      }\n\n      .unfocused-line {\n        @apply --layout-fit;\n        border-bottom: 1px solid var(--paper-input-container-color, var(--secondary-text-color));\n        @apply --paper-input-container-underline;\n      }\n\n      :host([disabled]) .unfocused-line {\n        border-bottom: 1px dashed;\n        border-color: var(--paper-input-container-color, var(--secondary-text-color));\n        @apply --paper-input-container-underline-disabled;\n      }\n\n      .input-wrapper {\n        @apply --layout-horizontal;\n        @apply --layout-center;\n        position: relative;\n      }\n\n      .input-content {\n        @apply --layout-flex-auto;\n        @apply --layout-relative;\n        max-width: 100%;\n      }\n\n      .input-content ::slotted(label),\n      .input-content ::slotted(.paper-input-label) {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        font: inherit;\n        color: var(--paper-input-container-color, var(--secondary-text-color));\n        -webkit-transition: -webkit-transform 0.25s, width 0.25s;\n        transition: transform 0.25s, width 0.25s;\n        -webkit-transform-origin: left top;\n        transform-origin: left top;\n        /* Fix for safari not focusing 0-height date/time inputs with -webkit-apperance: none; */\n        min-height: 1px;\n\n        @apply --paper-font-common-nowrap;\n        @apply --paper-font-subhead;\n        @apply --paper-input-container-label;\n        @apply --paper-transition-easing;\n      }\n\n\n      .input-content ::slotted(label):before,\n      .input-content ::slotted(.paper-input-label):before {\n        @apply --paper-input-container-label-before;\n      }\n\n      .input-content ::slotted(label):after,\n      .input-content ::slotted(.paper-input-label):after {\n        @apply --paper-input-container-label-after;\n      }\n\n      .input-content.label-is-floating ::slotted(label),\n      .input-content.label-is-floating ::slotted(.paper-input-label) {\n        -webkit-transform: translateY(-75%) scale(0.75);\n        transform: translateY(-75%) scale(0.75);\n\n        /* Since we scale to 75/100 of the size, we actually have 100/75 of the\n        original space now available */\n        width: 133%;\n\n        @apply --paper-input-container-label-floating;\n      }\n\n      :host(:dir(rtl)) .input-content.label-is-floating ::slotted(label),\n      :host(:dir(rtl)) .input-content.label-is-floating ::slotted(.paper-input-label) {\n        right: 0;\n        left: auto;\n        -webkit-transform-origin: right top;\n        transform-origin: right top;\n      }\n\n      .input-content.label-is-highlighted ::slotted(label),\n      .input-content.label-is-highlighted ::slotted(.paper-input-label) {\n        color: var(--paper-input-container-focus-color, var(--primary-color));\n\n        @apply --paper-input-container-label-focus;\n      }\n\n      .input-content.is-invalid ::slotted(label),\n      .input-content.is-invalid ::slotted(.paper-input-label) {\n        color: var(--paper-input-container-invalid-color, var(--error-color));\n      }\n\n      .input-content.label-is-hidden ::slotted(label),\n      .input-content.label-is-hidden ::slotted(.paper-input-label) {\n        visibility: hidden;\n      }\n\n      .input-content ::slotted(input),\n      .input-content ::slotted(iron-input),\n      .input-content ::slotted(textarea),\n      .input-content ::slotted(iron-autogrow-textarea),\n      .input-content ::slotted(.paper-input-input) {\n        @apply --paper-input-container-shared-input-style;\n        /* The apply shim doesn't apply the nested color custom property,\n          so we have to re-apply it here. */\n        color: var(--paper-input-container-input-color, var(--primary-text-color));\n        @apply --paper-input-container-input;\n      }\n\n      .input-content ::slotted(input)::-webkit-outer-spin-button,\n      .input-content ::slotted(input)::-webkit-inner-spin-button {\n        @apply --paper-input-container-input-webkit-spinner;\n      }\n\n      .input-content.focused ::slotted(input),\n      .input-content.focused ::slotted(iron-input),\n      .input-content.focused ::slotted(textarea),\n      .input-content.focused ::slotted(iron-autogrow-textarea),\n      .input-content.focused ::slotted(.paper-input-input) {\n        @apply --paper-input-container-input-focus;\n      }\n\n      .input-content.is-invalid ::slotted(input),\n      .input-content.is-invalid ::slotted(iron-input),\n      .input-content.is-invalid ::slotted(textarea),\n      .input-content.is-invalid ::slotted(iron-autogrow-textarea),\n      .input-content.is-invalid ::slotted(.paper-input-input) {\n        @apply --paper-input-container-input-invalid;\n      }\n\n      .prefix ::slotted(*) {\n        display: inline-block;\n        @apply --paper-font-subhead;\n        @apply --layout-flex-none;\n        @apply --paper-input-prefix;\n      }\n\n      .suffix ::slotted(*) {\n        display: inline-block;\n        @apply --paper-font-subhead;\n        @apply --layout-flex-none;\n\n        @apply --paper-input-suffix;\n      }\n\n      /* Firefox sets a min-width on the input, which can cause layout issues */\n      .input-content ::slotted(input) {\n        min-width: 0;\n      }\n\n      .input-content ::slotted(textarea) {\n        resize: none;\n      }\n\n      .add-on-content {\n        position: relative;\n      }\n\n      .add-on-content.is-invalid ::slotted(*) {\n        color: var(--paper-input-container-invalid-color, var(--error-color));\n      }\n\n      .add-on-content.is-highlighted ::slotted(*) {\n        color: var(--paper-input-container-focus-color, var(--primary-color));\n      }\n    </style>\n\n    <div class=\"floated-label-placeholder\" aria-hidden=\"true\" hidden=\"[[noLabelFloat]]\">&nbsp;</div>\n\n    <div class=\"input-wrapper\">\n      <span class=\"prefix\"><slot name=\"prefix\"></slot></span>\n\n      <div class$=\"[[_computeInputContentClass(noLabelFloat,alwaysFloatLabel,focused,invalid,_inputHasContent)]]\" id=\"labelAndInputContainer\">\n        <slot name=\"label\"></slot>\n        <slot name=\"input\"></slot>\n      </div>\n\n      <span class=\"suffix\"><slot name=\"suffix\"></slot></span>\n    </div>\n\n    <div class$=\"[[_computeUnderlineClass(focused,invalid)]]\">\n      <div class=\"unfocused-line\"></div>\n      <div class=\"focused-line\"></div>\n    </div>\n\n    <div class$=\"[[_computeAddOnContentClass(focused,invalid)]]\">\n      <slot name=\"add-on\"></slot>\n    </div>\n"]); _templateObject14_e13d1b4010eb11ec83cd7fddb4847b33 = function _templateObject14_e13d1b4010eb11ec83cd7fddb4847b33() { return data; }; return data; } function _templateObject13_e13d1b4010eb11ec83cd7fddb4847b33() { var data = babelHelpers.taggedTemplateLiteral(["\n<custom-style>\n  <style is=\"custom-style\">\n    html {\n      --paper-input-container-shared-input-style: {\n        position: relative; /* to make a stacking context */\n        outline: none;\n        box-shadow: none;\n        padding: 0;\n        margin: 0;\n        width: 100%;\n        max-width: 100%;\n        background: transparent;\n        border: none;\n        color: var(--paper-input-container-input-color, var(--primary-text-color));\n        -webkit-appearance: none;\n        text-align: inherit;\n        vertical-align: var(--paper-input-container-input-align, bottom);\n\n        @apply --paper-font-subhead;\n      };\n    }\n  </style>\n</custom-style>\n"]); _templateObject13_e13d1b4010eb11ec83cd7fddb4847b33 = function _templateObject13_e13d1b4010eb11ec83cd7fddb4847b33() { return data; }; return data; } function _templateObject12_e13d1b4010eb11ec83cd7fddb4847b33() { var data = babelHelpers.taggedTemplateLiteral(["\n<custom-style>\n  <style is=\"custom-style\">\n    html {\n      /*\n       * You can use these generic variables in your elements for easy theming.\n       * For example, if all your elements use `--primary-text-color` as its main\n       * color, then switching from a light to a dark theme is just a matter of\n       * changing the value of `--primary-text-color` in your application.\n       */\n      --primary-text-color: var(--light-theme-text-color);\n      --primary-background-color: var(--light-theme-background-color);\n      --secondary-text-color: var(--light-theme-secondary-color);\n      --disabled-text-color: var(--light-theme-disabled-color);\n      --divider-color: var(--light-theme-divider-color);\n      --error-color: var(--paper-deep-orange-a700);\n\n      /*\n       * Primary and accent colors. Also see color.js for more colors.\n       */\n      --primary-color: var(--paper-indigo-500);\n      --light-primary-color: var(--paper-indigo-100);\n      --dark-primary-color: var(--paper-indigo-700);\n\n      --accent-color: var(--paper-pink-a200);\n      --light-accent-color: var(--paper-pink-a100);\n      --dark-accent-color: var(--paper-pink-a400);\n\n\n      /*\n       * Material Design Light background theme\n       */\n      --light-theme-background-color: #ffffff;\n      --light-theme-base-color: #000000;\n      --light-theme-text-color: var(--paper-grey-900);\n      --light-theme-secondary-color: #737373;  /* for secondary text and icons */\n      --light-theme-disabled-color: #9b9b9b;  /* disabled/hint text */\n      --light-theme-divider-color: #dbdbdb;\n\n      /*\n       * Material Design Dark background theme\n       */\n      --dark-theme-background-color: var(--paper-grey-900);\n      --dark-theme-base-color: #ffffff;\n      --dark-theme-text-color: #ffffff;\n      --dark-theme-secondary-color: #bcbcbc;  /* for secondary text and icons */\n      --dark-theme-disabled-color: #646464;  /* disabled/hint text */\n      --dark-theme-divider-color: #3c3c3c;\n\n      /*\n       * Deprecated values because of their confusing names.\n       */\n      --text-primary-color: var(--dark-theme-text-color);\n      --default-primary-color: var(--primary-color);\n    }\n  </style>\n</custom-style>"], ["\n<custom-style>\n  <style is=\"custom-style\">\n    html {\n      /*\n       * You can use these generic variables in your elements for easy theming.\n       * For example, if all your elements use \\`--primary-text-color\\` as its main\n       * color, then switching from a light to a dark theme is just a matter of\n       * changing the value of \\`--primary-text-color\\` in your application.\n       */\n      --primary-text-color: var(--light-theme-text-color);\n      --primary-background-color: var(--light-theme-background-color);\n      --secondary-text-color: var(--light-theme-secondary-color);\n      --disabled-text-color: var(--light-theme-disabled-color);\n      --divider-color: var(--light-theme-divider-color);\n      --error-color: var(--paper-deep-orange-a700);\n\n      /*\n       * Primary and accent colors. Also see color.js for more colors.\n       */\n      --primary-color: var(--paper-indigo-500);\n      --light-primary-color: var(--paper-indigo-100);\n      --dark-primary-color: var(--paper-indigo-700);\n\n      --accent-color: var(--paper-pink-a200);\n      --light-accent-color: var(--paper-pink-a100);\n      --dark-accent-color: var(--paper-pink-a400);\n\n\n      /*\n       * Material Design Light background theme\n       */\n      --light-theme-background-color: #ffffff;\n      --light-theme-base-color: #000000;\n      --light-theme-text-color: var(--paper-grey-900);\n      --light-theme-secondary-color: #737373;  /* for secondary text and icons */\n      --light-theme-disabled-color: #9b9b9b;  /* disabled/hint text */\n      --light-theme-divider-color: #dbdbdb;\n\n      /*\n       * Material Design Dark background theme\n       */\n      --dark-theme-background-color: var(--paper-grey-900);\n      --dark-theme-base-color: #ffffff;\n      --dark-theme-text-color: #ffffff;\n      --dark-theme-secondary-color: #bcbcbc;  /* for secondary text and icons */\n      --dark-theme-disabled-color: #646464;  /* disabled/hint text */\n      --dark-theme-divider-color: #3c3c3c;\n\n      /*\n       * Deprecated values because of their confusing names.\n       */\n      --text-primary-color: var(--dark-theme-text-color);\n      --default-primary-color: var(--primary-color);\n    }\n  </style>\n</custom-style>"]); _templateObject12_e13d1b4010eb11ec83cd7fddb4847b33 = function _templateObject12_e13d1b4010eb11ec83cd7fddb4847b33() { return data; }; return data; } function _templateObject11_e13d1b4010eb11ec83cd7fddb4847b33() { var data = babelHelpers.taggedTemplateLiteral(["\n<custom-style>\n  <style is=\"custom-style\">\n    html {\n\n      /* Material Design color palette for Google products */\n\n      --google-red-100: #f4c7c3;\n      --google-red-300: #e67c73;\n      --google-red-500: #db4437;\n      --google-red-700: #c53929;\n\n      --google-blue-100: #c6dafc;\n      --google-blue-300: #7baaf7;\n      --google-blue-500: #4285f4;\n      --google-blue-700: #3367d6;\n\n      --google-green-100: #b7e1cd;\n      --google-green-300: #57bb8a;\n      --google-green-500: #0f9d58;\n      --google-green-700: #0b8043;\n\n      --google-yellow-100: #fce8b2;\n      --google-yellow-300: #f7cb4d;\n      --google-yellow-500: #f4b400;\n      --google-yellow-700: #f09300;\n\n      --google-grey-100: #f5f5f5;\n      --google-grey-300: #e0e0e0;\n      --google-grey-500: #9e9e9e;\n      --google-grey-700: #616161;\n\n      /* Material Design color palette from online spec document */\n\n      --paper-red-50: #ffebee;\n      --paper-red-100: #ffcdd2;\n      --paper-red-200: #ef9a9a;\n      --paper-red-300: #e57373;\n      --paper-red-400: #ef5350;\n      --paper-red-500: #f44336;\n      --paper-red-600: #e53935;\n      --paper-red-700: #d32f2f;\n      --paper-red-800: #c62828;\n      --paper-red-900: #b71c1c;\n      --paper-red-a100: #ff8a80;\n      --paper-red-a200: #ff5252;\n      --paper-red-a400: #ff1744;\n      --paper-red-a700: #d50000;\n\n      --paper-pink-50: #fce4ec;\n      --paper-pink-100: #f8bbd0;\n      --paper-pink-200: #f48fb1;\n      --paper-pink-300: #f06292;\n      --paper-pink-400: #ec407a;\n      --paper-pink-500: #e91e63;\n      --paper-pink-600: #d81b60;\n      --paper-pink-700: #c2185b;\n      --paper-pink-800: #ad1457;\n      --paper-pink-900: #880e4f;\n      --paper-pink-a100: #ff80ab;\n      --paper-pink-a200: #ff4081;\n      --paper-pink-a400: #f50057;\n      --paper-pink-a700: #c51162;\n\n      --paper-purple-50: #f3e5f5;\n      --paper-purple-100: #e1bee7;\n      --paper-purple-200: #ce93d8;\n      --paper-purple-300: #ba68c8;\n      --paper-purple-400: #ab47bc;\n      --paper-purple-500: #9c27b0;\n      --paper-purple-600: #8e24aa;\n      --paper-purple-700: #7b1fa2;\n      --paper-purple-800: #6a1b9a;\n      --paper-purple-900: #4a148c;\n      --paper-purple-a100: #ea80fc;\n      --paper-purple-a200: #e040fb;\n      --paper-purple-a400: #d500f9;\n      --paper-purple-a700: #aa00ff;\n\n      --paper-deep-purple-50: #ede7f6;\n      --paper-deep-purple-100: #d1c4e9;\n      --paper-deep-purple-200: #b39ddb;\n      --paper-deep-purple-300: #9575cd;\n      --paper-deep-purple-400: #7e57c2;\n      --paper-deep-purple-500: #673ab7;\n      --paper-deep-purple-600: #5e35b1;\n      --paper-deep-purple-700: #512da8;\n      --paper-deep-purple-800: #4527a0;\n      --paper-deep-purple-900: #311b92;\n      --paper-deep-purple-a100: #b388ff;\n      --paper-deep-purple-a200: #7c4dff;\n      --paper-deep-purple-a400: #651fff;\n      --paper-deep-purple-a700: #6200ea;\n\n      --paper-indigo-50: #e8eaf6;\n      --paper-indigo-100: #c5cae9;\n      --paper-indigo-200: #9fa8da;\n      --paper-indigo-300: #7986cb;\n      --paper-indigo-400: #5c6bc0;\n      --paper-indigo-500: #3f51b5;\n      --paper-indigo-600: #3949ab;\n      --paper-indigo-700: #303f9f;\n      --paper-indigo-800: #283593;\n      --paper-indigo-900: #1a237e;\n      --paper-indigo-a100: #8c9eff;\n      --paper-indigo-a200: #536dfe;\n      --paper-indigo-a400: #3d5afe;\n      --paper-indigo-a700: #304ffe;\n\n      --paper-blue-50: #e3f2fd;\n      --paper-blue-100: #bbdefb;\n      --paper-blue-200: #90caf9;\n      --paper-blue-300: #64b5f6;\n      --paper-blue-400: #42a5f5;\n      --paper-blue-500: #2196f3;\n      --paper-blue-600: #1e88e5;\n      --paper-blue-700: #1976d2;\n      --paper-blue-800: #1565c0;\n      --paper-blue-900: #0d47a1;\n      --paper-blue-a100: #82b1ff;\n      --paper-blue-a200: #448aff;\n      --paper-blue-a400: #2979ff;\n      --paper-blue-a700: #2962ff;\n\n      --paper-light-blue-50: #e1f5fe;\n      --paper-light-blue-100: #b3e5fc;\n      --paper-light-blue-200: #81d4fa;\n      --paper-light-blue-300: #4fc3f7;\n      --paper-light-blue-400: #29b6f6;\n      --paper-light-blue-500: #03a9f4;\n      --paper-light-blue-600: #039be5;\n      --paper-light-blue-700: #0288d1;\n      --paper-light-blue-800: #0277bd;\n      --paper-light-blue-900: #01579b;\n      --paper-light-blue-a100: #80d8ff;\n      --paper-light-blue-a200: #40c4ff;\n      --paper-light-blue-a400: #00b0ff;\n      --paper-light-blue-a700: #0091ea;\n\n      --paper-cyan-50: #e0f7fa;\n      --paper-cyan-100: #b2ebf2;\n      --paper-cyan-200: #80deea;\n      --paper-cyan-300: #4dd0e1;\n      --paper-cyan-400: #26c6da;\n      --paper-cyan-500: #00bcd4;\n      --paper-cyan-600: #00acc1;\n      --paper-cyan-700: #0097a7;\n      --paper-cyan-800: #00838f;\n      --paper-cyan-900: #006064;\n      --paper-cyan-a100: #84ffff;\n      --paper-cyan-a200: #18ffff;\n      --paper-cyan-a400: #00e5ff;\n      --paper-cyan-a700: #00b8d4;\n\n      --paper-teal-50: #e0f2f1;\n      --paper-teal-100: #b2dfdb;\n      --paper-teal-200: #80cbc4;\n      --paper-teal-300: #4db6ac;\n      --paper-teal-400: #26a69a;\n      --paper-teal-500: #009688;\n      --paper-teal-600: #00897b;\n      --paper-teal-700: #00796b;\n      --paper-teal-800: #00695c;\n      --paper-teal-900: #004d40;\n      --paper-teal-a100: #a7ffeb;\n      --paper-teal-a200: #64ffda;\n      --paper-teal-a400: #1de9b6;\n      --paper-teal-a700: #00bfa5;\n\n      --paper-green-50: #e8f5e9;\n      --paper-green-100: #c8e6c9;\n      --paper-green-200: #a5d6a7;\n      --paper-green-300: #81c784;\n      --paper-green-400: #66bb6a;\n      --paper-green-500: #4caf50;\n      --paper-green-600: #43a047;\n      --paper-green-700: #388e3c;\n      --paper-green-800: #2e7d32;\n      --paper-green-900: #1b5e20;\n      --paper-green-a100: #b9f6ca;\n      --paper-green-a200: #69f0ae;\n      --paper-green-a400: #00e676;\n      --paper-green-a700: #00c853;\n\n      --paper-light-green-50: #f1f8e9;\n      --paper-light-green-100: #dcedc8;\n      --paper-light-green-200: #c5e1a5;\n      --paper-light-green-300: #aed581;\n      --paper-light-green-400: #9ccc65;\n      --paper-light-green-500: #8bc34a;\n      --paper-light-green-600: #7cb342;\n      --paper-light-green-700: #689f38;\n      --paper-light-green-800: #558b2f;\n      --paper-light-green-900: #33691e;\n      --paper-light-green-a100: #ccff90;\n      --paper-light-green-a200: #b2ff59;\n      --paper-light-green-a400: #76ff03;\n      --paper-light-green-a700: #64dd17;\n\n      --paper-lime-50: #f9fbe7;\n      --paper-lime-100: #f0f4c3;\n      --paper-lime-200: #e6ee9c;\n      --paper-lime-300: #dce775;\n      --paper-lime-400: #d4e157;\n      --paper-lime-500: #cddc39;\n      --paper-lime-600: #c0ca33;\n      --paper-lime-700: #afb42b;\n      --paper-lime-800: #9e9d24;\n      --paper-lime-900: #827717;\n      --paper-lime-a100: #f4ff81;\n      --paper-lime-a200: #eeff41;\n      --paper-lime-a400: #c6ff00;\n      --paper-lime-a700: #aeea00;\n\n      --paper-yellow-50: #fffde7;\n      --paper-yellow-100: #fff9c4;\n      --paper-yellow-200: #fff59d;\n      --paper-yellow-300: #fff176;\n      --paper-yellow-400: #ffee58;\n      --paper-yellow-500: #ffeb3b;\n      --paper-yellow-600: #fdd835;\n      --paper-yellow-700: #fbc02d;\n      --paper-yellow-800: #f9a825;\n      --paper-yellow-900: #f57f17;\n      --paper-yellow-a100: #ffff8d;\n      --paper-yellow-a200: #ffff00;\n      --paper-yellow-a400: #ffea00;\n      --paper-yellow-a700: #ffd600;\n\n      --paper-amber-50: #fff8e1;\n      --paper-amber-100: #ffecb3;\n      --paper-amber-200: #ffe082;\n      --paper-amber-300: #ffd54f;\n      --paper-amber-400: #ffca28;\n      --paper-amber-500: #ffc107;\n      --paper-amber-600: #ffb300;\n      --paper-amber-700: #ffa000;\n      --paper-amber-800: #ff8f00;\n      --paper-amber-900: #ff6f00;\n      --paper-amber-a100: #ffe57f;\n      --paper-amber-a200: #ffd740;\n      --paper-amber-a400: #ffc400;\n      --paper-amber-a700: #ffab00;\n\n      --paper-orange-50: #fff3e0;\n      --paper-orange-100: #ffe0b2;\n      --paper-orange-200: #ffcc80;\n      --paper-orange-300: #ffb74d;\n      --paper-orange-400: #ffa726;\n      --paper-orange-500: #ff9800;\n      --paper-orange-600: #fb8c00;\n      --paper-orange-700: #f57c00;\n      --paper-orange-800: #ef6c00;\n      --paper-orange-900: #e65100;\n      --paper-orange-a100: #ffd180;\n      --paper-orange-a200: #ffab40;\n      --paper-orange-a400: #ff9100;\n      --paper-orange-a700: #ff6500;\n\n      --paper-deep-orange-50: #fbe9e7;\n      --paper-deep-orange-100: #ffccbc;\n      --paper-deep-orange-200: #ffab91;\n      --paper-deep-orange-300: #ff8a65;\n      --paper-deep-orange-400: #ff7043;\n      --paper-deep-orange-500: #ff5722;\n      --paper-deep-orange-600: #f4511e;\n      --paper-deep-orange-700: #e64a19;\n      --paper-deep-orange-800: #d84315;\n      --paper-deep-orange-900: #bf360c;\n      --paper-deep-orange-a100: #ff9e80;\n      --paper-deep-orange-a200: #ff6e40;\n      --paper-deep-orange-a400: #ff3d00;\n      --paper-deep-orange-a700: #dd2c00;\n\n      --paper-brown-50: #efebe9;\n      --paper-brown-100: #d7ccc8;\n      --paper-brown-200: #bcaaa4;\n      --paper-brown-300: #a1887f;\n      --paper-brown-400: #8d6e63;\n      --paper-brown-500: #795548;\n      --paper-brown-600: #6d4c41;\n      --paper-brown-700: #5d4037;\n      --paper-brown-800: #4e342e;\n      --paper-brown-900: #3e2723;\n\n      --paper-grey-50: #fafafa;\n      --paper-grey-100: #f5f5f5;\n      --paper-grey-200: #eeeeee;\n      --paper-grey-300: #e0e0e0;\n      --paper-grey-400: #bdbdbd;\n      --paper-grey-500: #9e9e9e;\n      --paper-grey-600: #757575;\n      --paper-grey-700: #616161;\n      --paper-grey-800: #424242;\n      --paper-grey-900: #212121;\n\n      --paper-blue-grey-50: #eceff1;\n      --paper-blue-grey-100: #cfd8dc;\n      --paper-blue-grey-200: #b0bec5;\n      --paper-blue-grey-300: #90a4ae;\n      --paper-blue-grey-400: #78909c;\n      --paper-blue-grey-500: #607d8b;\n      --paper-blue-grey-600: #546e7a;\n      --paper-blue-grey-700: #455a64;\n      --paper-blue-grey-800: #37474f;\n      --paper-blue-grey-900: #263238;\n\n      /* opacity for dark text on a light background */\n      --dark-divider-opacity: 0.12;\n      --dark-disabled-opacity: 0.38; /* or hint text or icon */\n      --dark-secondary-opacity: 0.54;\n      --dark-primary-opacity: 0.87;\n\n      /* opacity for light text on a dark background */\n      --light-divider-opacity: 0.12;\n      --light-disabled-opacity: 0.3; /* or hint text or icon */\n      --light-secondary-opacity: 0.7;\n      --light-primary-opacity: 1.0;\n\n    }\n\n  </style>\n</custom-style>\n"]); _templateObject11_e13d1b4010eb11ec83cd7fddb4847b33 = function _templateObject11_e13d1b4010eb11ec83cd7fddb4847b33() { return data; }; return data; } function _templateObject10_e13d1b4010eb11ec83cd7fddb4847b33() { var data = babelHelpers.taggedTemplateLiteral(["\n    <style>\n      :host {\n        display: inline-block;\n        float: right;\n\n        @apply --paper-font-caption;\n        @apply --paper-input-char-counter;\n      }\n\n      :host([hidden]) {\n        display: none !important;\n      }\n\n      :host(:dir(rtl)) {\n        float: left;\n      }\n    </style>\n\n    <span>[[_charCounterStr]]</span>\n"]); _templateObject10_e13d1b4010eb11ec83cd7fddb4847b33 = function _templateObject10_e13d1b4010eb11ec83cd7fddb4847b33() { return data; }; return data; } function _templateObject9_e13d1b4010eb11ec83cd7fddb4847b33() { var data = babelHelpers.taggedTemplateLiteral(["<custom-style>\n  <style is=\"custom-style\">\n    html {\n\n      /* Shared Styles */\n      --paper-font-common-base: {\n        font-family: 'Roboto', 'Noto', sans-serif;\n        -webkit-font-smoothing: antialiased;\n      };\n\n      --paper-font-common-code: {\n        font-family: 'Roboto Mono', 'Consolas', 'Menlo', monospace;\n        -webkit-font-smoothing: antialiased;\n      };\n\n      --paper-font-common-expensive-kerning: {\n        text-rendering: optimizeLegibility;\n      };\n\n      --paper-font-common-nowrap: {\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n      };\n\n      /* Material Font Styles */\n\n      --paper-font-display4: {\n        @apply --paper-font-common-base;\n        @apply --paper-font-common-nowrap;\n\n        font-size: 112px;\n        font-weight: 300;\n        letter-spacing: -.044em;\n        line-height: 120px;\n      };\n\n      --paper-font-display3: {\n        @apply --paper-font-common-base;\n        @apply --paper-font-common-nowrap;\n\n        font-size: 56px;\n        font-weight: 400;\n        letter-spacing: -.026em;\n        line-height: 60px;\n      };\n\n      --paper-font-display2: {\n        @apply --paper-font-common-base;\n\n        font-size: 45px;\n        font-weight: 400;\n        letter-spacing: -.018em;\n        line-height: 48px;\n      };\n\n      --paper-font-display1: {\n        @apply --paper-font-common-base;\n\n        font-size: 34px;\n        font-weight: 400;\n        letter-spacing: -.01em;\n        line-height: 40px;\n      };\n\n      --paper-font-headline: {\n        @apply --paper-font-common-base;\n\n        font-size: 24px;\n        font-weight: 400;\n        letter-spacing: -.012em;\n        line-height: 32px;\n      };\n\n      --paper-font-title: {\n        @apply --paper-font-common-base;\n        @apply --paper-font-common-nowrap;\n\n        font-size: 20px;\n        font-weight: 500;\n        line-height: 28px;\n      };\n\n      --paper-font-subhead: {\n        @apply --paper-font-common-base;\n\n        font-size: 16px;\n        font-weight: 400;\n        line-height: 24px;\n      };\n\n      --paper-font-body2: {\n        @apply --paper-font-common-base;\n\n        font-size: 14px;\n        font-weight: 500;\n        line-height: 24px;\n      };\n\n      --paper-font-body1: {\n        @apply --paper-font-common-base;\n\n        font-size: 14px;\n        font-weight: 400;\n        line-height: 20px;\n      };\n\n      --paper-font-caption: {\n        @apply --paper-font-common-base;\n        @apply --paper-font-common-nowrap;\n\n        font-size: 12px;\n        font-weight: 400;\n        letter-spacing: 0.011em;\n        line-height: 20px;\n      };\n\n      --paper-font-menu: {\n        @apply --paper-font-common-base;\n        @apply --paper-font-common-nowrap;\n\n        font-size: 13px;\n        font-weight: 500;\n        line-height: 24px;\n      };\n\n      --paper-font-button: {\n        @apply --paper-font-common-base;\n        @apply --paper-font-common-nowrap;\n\n        font-size: 14px;\n        font-weight: 500;\n        letter-spacing: 0.018em;\n        line-height: 24px;\n        text-transform: uppercase;\n      };\n\n      --paper-font-code2: {\n        @apply --paper-font-common-code;\n\n        font-size: 14px;\n        font-weight: 700;\n        line-height: 20px;\n      };\n\n      --paper-font-code1: {\n        @apply --paper-font-common-code;\n\n        font-size: 14px;\n        font-weight: 500;\n        line-height: 20px;\n      };\n\n    }\n\n  </style>\n</custom-style>"]); _templateObject9_e13d1b4010eb11ec83cd7fddb4847b33 = function _templateObject9_e13d1b4010eb11ec83cd7fddb4847b33() { return data; }; return data; } function _templateObject8_e13d1b4010eb11ec83cd7fddb4847b33() { var data = babelHelpers.taggedTemplateLiteral(["\n    <style>\n      :host {\n        display: inline-block;\n      }\n    </style>\n    <slot id=\"content\"></slot>\n"]); _templateObject8_e13d1b4010eb11ec83cd7fddb4847b33 = function _templateObject8_e13d1b4010eb11ec83cd7fddb4847b33() { return data; }; return data; } function _templateObject7_e13d1b4010eb11ec83cd7fddb4847b33() { var data = babelHelpers.taggedTemplateLiteral(["\n    <style>\n      :host {\n        display: inline-block;\n        position: fixed;\n        clip: rect(0px,0px,0px,0px);\n      }\n    </style>\n    <div aria-live$=\"[[mode]]\">[[_text]]</div>\n"]); _templateObject7_e13d1b4010eb11ec83cd7fddb4847b33 = function _templateObject7_e13d1b4010eb11ec83cd7fddb4847b33() { return data; }; return data; } function _templateObject6_e13d1b4010eb11ec83cd7fddb4847b33() { var data = babelHelpers.taggedTemplateLiteral(["\n    <style>\n      :host {\n        @apply --layout-inline;\n        @apply --layout-center-center;\n        position: relative;\n\n        vertical-align: middle;\n\n        fill: var(--iron-icon-fill-color, currentcolor);\n        stroke: var(--iron-icon-stroke-color, none);\n\n        width: var(--iron-icon-width, 24px);\n        height: var(--iron-icon-height, 24px);\n        @apply --iron-icon;\n      }\n\n      :host([hidden]) {\n        display: none;\n      }\n    </style>\n"]); _templateObject6_e13d1b4010eb11ec83cd7fddb4847b33 = function _templateObject6_e13d1b4010eb11ec83cd7fddb4847b33() { return data; }; return data; } function _templateObject5_e13d1b4010eb11ec83cd7fddb4847b33() { var data = babelHelpers.taggedTemplateLiteral(["\n    <style>\n      :host {\n        display: block;\n        /**\n         * Force app-header-layout to have its own stacking context so that its parent can\n         * control the stacking of it relative to other elements (e.g. app-drawer-layout).\n         * This could be done using `isolation: isolate`, but that's not well supported\n         * across browsers.\n         */\n        position: relative;\n        z-index: 0;\n      }\n\n      #wrapper ::slotted([slot=header]) {\n        @apply --layout-fixed-top;\n        z-index: 1;\n      }\n\n      #wrapper.initializing ::slotted([slot=header]) {\n        position: relative;\n      }\n\n      :host([has-scrolling-region]) {\n        height: 100%;\n      }\n\n      :host([has-scrolling-region]) #wrapper ::slotted([slot=header]) {\n        position: absolute;\n      }\n\n      :host([has-scrolling-region]) #wrapper.initializing ::slotted([slot=header]) {\n        position: relative;\n      }\n\n      :host([has-scrolling-region]) #wrapper #contentContainer {\n        @apply --layout-fit;\n        overflow-y: auto;\n        -webkit-overflow-scrolling: touch;\n      }\n\n      :host([has-scrolling-region]) #wrapper.initializing #contentContainer {\n        position: relative;\n      }\n\n      :host([fullbleed]) {\n        @apply --layout-vertical;\n        @apply --layout-fit;\n      }\n\n      :host([fullbleed]) #wrapper,\n      :host([fullbleed]) #wrapper #contentContainer {\n        @apply --layout-vertical;\n        @apply --layout-flex;\n      }\n\n      #contentContainer {\n        /* Create a stacking context here so that all children appear below the header. */\n        position: relative;\n        z-index: 0;\n      }\n\n      @media print {\n        :host([has-scrolling-region]) #wrapper #contentContainer {\n          overflow-y: visible;\n        }\n      }\n\n    </style>\n\n    <div id=\"wrapper\" class=\"initializing\">\n      <slot id=\"headerSlot\" name=\"header\"></slot>\n\n      <div id=\"contentContainer\">\n        <slot></slot>\n      </div>\n    </div>\n"], ["\n    <style>\n      :host {\n        display: block;\n        /**\n         * Force app-header-layout to have its own stacking context so that its parent can\n         * control the stacking of it relative to other elements (e.g. app-drawer-layout).\n         * This could be done using \\`isolation: isolate\\`, but that's not well supported\n         * across browsers.\n         */\n        position: relative;\n        z-index: 0;\n      }\n\n      #wrapper ::slotted([slot=header]) {\n        @apply --layout-fixed-top;\n        z-index: 1;\n      }\n\n      #wrapper.initializing ::slotted([slot=header]) {\n        position: relative;\n      }\n\n      :host([has-scrolling-region]) {\n        height: 100%;\n      }\n\n      :host([has-scrolling-region]) #wrapper ::slotted([slot=header]) {\n        position: absolute;\n      }\n\n      :host([has-scrolling-region]) #wrapper.initializing ::slotted([slot=header]) {\n        position: relative;\n      }\n\n      :host([has-scrolling-region]) #wrapper #contentContainer {\n        @apply --layout-fit;\n        overflow-y: auto;\n        -webkit-overflow-scrolling: touch;\n      }\n\n      :host([has-scrolling-region]) #wrapper.initializing #contentContainer {\n        position: relative;\n      }\n\n      :host([fullbleed]) {\n        @apply --layout-vertical;\n        @apply --layout-fit;\n      }\n\n      :host([fullbleed]) #wrapper,\n      :host([fullbleed]) #wrapper #contentContainer {\n        @apply --layout-vertical;\n        @apply --layout-flex;\n      }\n\n      #contentContainer {\n        /* Create a stacking context here so that all children appear below the header. */\n        position: relative;\n        z-index: 0;\n      }\n\n      @media print {\n        :host([has-scrolling-region]) #wrapper #contentContainer {\n          overflow-y: visible;\n        }\n      }\n\n    </style>\n\n    <div id=\"wrapper\" class=\"initializing\">\n      <slot id=\"headerSlot\" name=\"header\"></slot>\n\n      <div id=\"contentContainer\">\n        <slot></slot>\n      </div>\n    </div>\n"]); _templateObject5_e13d1b4010eb11ec83cd7fddb4847b33 = function _templateObject5_e13d1b4010eb11ec83cd7fddb4847b33() { return data; }; return data; } function _templateObject4_e13d1b4010eb11ec83cd7fddb4847b33() { var data = babelHelpers.taggedTemplateLiteral(["\n    <style>\n      :host {\n        position: relative;\n        display: block;\n        transition-timing-function: linear;\n        transition-property: -webkit-transform;\n        transition-property: transform;\n      }\n\n      :host::before {\n        position: absolute;\n        right: 0px;\n        bottom: -5px;\n        left: 0px;\n        width: 100%;\n        height: 5px;\n        content: \"\";\n        transition: opacity 0.4s;\n        pointer-events: none;\n        opacity: 0;\n        box-shadow: inset 0px 5px 6px -3px rgba(0, 0, 0, 0.4);\n        will-change: opacity;\n        @apply --app-header-shadow;\n      }\n\n      :host([shadow])::before {\n        opacity: 1;\n      }\n\n      #background {\n        @apply --layout-fit;\n        overflow: hidden;\n      }\n\n      #backgroundFrontLayer,\n      #backgroundRearLayer {\n        @apply --layout-fit;\n        height: 100%;\n        pointer-events: none;\n        background-size: cover;\n      }\n\n      #backgroundFrontLayer {\n        @apply --app-header-background-front-layer;\n      }\n\n      #backgroundRearLayer {\n        opacity: 0;\n        @apply --app-header-background-rear-layer;\n      }\n\n      #contentContainer {\n        position: relative;\n        width: 100%;\n        height: 100%;\n      }\n\n      :host([disabled]),\n      :host([disabled])::after,\n      :host([disabled]) #backgroundFrontLayer,\n      :host([disabled]) #backgroundRearLayer,\n      /* Silent scrolling should not run CSS transitions */\n      :host([silent-scroll]),\n      :host([silent-scroll])::after,\n      :host([silent-scroll]) #backgroundFrontLayer,\n      :host([silent-scroll]) #backgroundRearLayer {\n        transition: none !important;\n      }\n\n      :host([disabled]) ::slotted(app-toolbar:first-of-type),\n      :host([disabled]) ::slotted([sticky]),\n      /* Silent scrolling should not run CSS transitions */\n      :host([silent-scroll]) ::slotted(app-toolbar:first-of-type),\n      :host([silent-scroll]) ::slotted([sticky]) {\n        transition: none !important;\n      }\n\n    </style>\n    <div id=\"contentContainer\">\n      <slot id=\"slot\"></slot>\n    </div>\n"]); _templateObject4_e13d1b4010eb11ec83cd7fddb4847b33 = function _templateObject4_e13d1b4010eb11ec83cd7fddb4847b33() { return data; }; return data; } function _templateObject3_e13d1b4010eb11ec83cd7fddb4847b33() { var data = babelHelpers.taggedTemplateLiteral(["\n    <style>\n      :host {\n        position: fixed;\n        top: -120px;\n        right: 0;\n        bottom: -120px;\n        left: 0;\n\n        visibility: hidden;\n\n        transition-property: visibility;\n      }\n\n      :host([opened]) {\n        visibility: visible;\n      }\n\n      :host([persistent]) {\n        width: var(--app-drawer-width, 256px);\n      }\n\n      :host([persistent][position=left]) {\n        right: auto;\n      }\n\n      :host([persistent][position=right]) {\n        left: auto;\n      }\n\n      #contentContainer {\n        position: absolute;\n        top: 0;\n        bottom: 0;\n        left: 0;\n\n        width: var(--app-drawer-width, 256px);\n        padding: var(--app-drawer-content-padding, 120px 0);\n\n        transition-property: -webkit-transform;\n        transition-property: transform;\n        -webkit-transform: translate3d(-100%, 0, 0);\n        transform: translate3d(-100%, 0, 0);\n\n        background-color: #FFF;\n\n        @apply --app-drawer-content-container;\n      }\n\n      #contentContainer[persistent] {\n        width: 100%;\n      }\n\n      #contentContainer[position=right] {\n        right: 0;\n        left: auto;\n\n        -webkit-transform: translate3d(100%, 0, 0);\n        transform: translate3d(100%, 0, 0);\n      }\n\n      #contentContainer[swipe-open]::after {\n        position: fixed;\n        top: 0;\n        bottom: 0;\n        left: 100%;\n\n        visibility: visible;\n\n        width: 20px;\n\n        content: '';\n      }\n\n      #contentContainer[swipe-open][position=right]::after {\n        right: 100%;\n        left: auto;\n      }\n\n      #contentContainer[opened] {\n        -webkit-transform: translate3d(0, 0, 0);\n        transform: translate3d(0, 0, 0);\n      }\n\n      #scrim {\n        position: absolute;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n\n        transition-property: opacity;\n        -webkit-transform: translateZ(0);\n        transform:  translateZ(0);\n\n        opacity: 0;\n        background: var(--app-drawer-scrim-background, rgba(0, 0, 0, 0.5));\n      }\n\n      #scrim.visible {\n        opacity: 1;\n      }\n\n      :host([no-transition]) #contentContainer {\n        transition-property: none;\n      }\n    </style>\n\n    <div id=\"scrim\" on-click=\"close\"></div>\n\n    <!-- HACK(keanulee): Bind attributes here (in addition to :host) for styling to workaround Safari\n    bug. https://bugs.webkit.org/show_bug.cgi?id=170762 -->\n    <div id=\"contentContainer\" opened$=\"[[opened]]\" persistent$=\"[[persistent]]\" position$=\"[[position]]\" swipe-open$=\"[[swipeOpen]]\">\n      <slot></slot>\n    </div>\n"], ["\n    <style>\n      :host {\n        position: fixed;\n        top: -120px;\n        right: 0;\n        bottom: -120px;\n        left: 0;\n\n        visibility: hidden;\n\n        transition-property: visibility;\n      }\n\n      :host([opened]) {\n        visibility: visible;\n      }\n\n      :host([persistent]) {\n        width: var(--app-drawer-width, 256px);\n      }\n\n      :host([persistent][position=left]) {\n        right: auto;\n      }\n\n      :host([persistent][position=right]) {\n        left: auto;\n      }\n\n      #contentContainer {\n        position: absolute;\n        top: 0;\n        bottom: 0;\n        left: 0;\n\n        width: var(--app-drawer-width, 256px);\n        padding: var(--app-drawer-content-padding, 120px 0);\n\n        transition-property: -webkit-transform;\n        transition-property: transform;\n        -webkit-transform: translate3d(-100%, 0, 0);\n        transform: translate3d(-100%, 0, 0);\n\n        background-color: #FFF;\n\n        @apply --app-drawer-content-container;\n      }\n\n      #contentContainer[persistent] {\n        width: 100%;\n      }\n\n      #contentContainer[position=right] {\n        right: 0;\n        left: auto;\n\n        -webkit-transform: translate3d(100%, 0, 0);\n        transform: translate3d(100%, 0, 0);\n      }\n\n      #contentContainer[swipe-open]::after {\n        position: fixed;\n        top: 0;\n        bottom: 0;\n        left: 100%;\n\n        visibility: visible;\n\n        width: 20px;\n\n        content: '';\n      }\n\n      #contentContainer[swipe-open][position=right]::after {\n        right: 100%;\n        left: auto;\n      }\n\n      #contentContainer[opened] {\n        -webkit-transform: translate3d(0, 0, 0);\n        transform: translate3d(0, 0, 0);\n      }\n\n      #scrim {\n        position: absolute;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n\n        transition-property: opacity;\n        -webkit-transform: translateZ(0);\n        transform:  translateZ(0);\n\n        opacity: 0;\n        background: var(--app-drawer-scrim-background, rgba(0, 0, 0, 0.5));\n      }\n\n      #scrim.visible {\n        opacity: 1;\n      }\n\n      :host([no-transition]) #contentContainer {\n        transition-property: none;\n      }\n    </style>\n\n    <div id=\"scrim\" on-click=\"close\"></div>\n\n    \\x3c!-- HACK(keanulee): Bind attributes here (in addition to :host) for styling to workaround Safari\n    bug. https://bugs.webkit.org/show_bug.cgi?id=170762 --\\x3e\n    <div id=\"contentContainer\" opened\\$=\"[[opened]]\" persistent\\$=\"[[persistent]]\" position\\$=\"[[position]]\" swipe-open\\$=\"[[swipeOpen]]\">\n      <slot></slot>\n    </div>\n"]); _templateObject3_e13d1b4010eb11ec83cd7fddb4847b33 = function _templateObject3_e13d1b4010eb11ec83cd7fddb4847b33() { return data; }; return data; } function _templateObject2_e13d1b4010eb11ec83cd7fddb4847b33() { var data = babelHelpers.taggedTemplateLiteral(["\n    <style>\n\n      :host {\n        @apply --layout-horizontal;\n        @apply --layout-center;\n        position: relative;\n        height: 64px;\n        padding: 0 16px;\n        pointer-events: none;\n        font-size: var(--app-toolbar-font-size, 20px);\n      }\n\n      :host ::slotted(*) {\n        pointer-events: auto;\n      }\n\n      :host ::slotted(paper-icon-button) {\n        /* paper-icon-button/issues/33 */\n        font-size: 0;\n      }\n\n      :host ::slotted([main-title]),\n      :host ::slotted([condensed-title]) {\n        pointer-events: none;\n        @apply --layout-flex;\n      }\n\n      :host ::slotted([bottom-item]) {\n        position: absolute;\n        right: 0;\n        bottom: 0;\n        left: 0;\n      }\n\n      :host ::slotted([top-item]) {\n        position: absolute;\n        top: 0;\n        right: 0;\n        left: 0;\n      }\n\n      :host ::slotted([spacer]) {\n        margin-left: 64px;\n      }\n    </style>\n\n    <slot></slot>\n"]); _templateObject2_e13d1b4010eb11ec83cd7fddb4847b33 = function _templateObject2_e13d1b4010eb11ec83cd7fddb4847b33() { return data; }; return data; } function _templateObject_e13d1b4010eb11ec83cd7fddb4847b33() { var data = babelHelpers.taggedTemplateLiteral(["\n<custom-style>\n  <style is=\"custom-style\">\n    [hidden] {\n      display: none !important;\n    }\n  </style>\n</custom-style>\n<custom-style>\n  <style is=\"custom-style\">\n    html {\n\n      --layout: {\n        display: -ms-flexbox;\n        display: -webkit-flex;\n        display: flex;\n      };\n\n      --layout-inline: {\n        display: -ms-inline-flexbox;\n        display: -webkit-inline-flex;\n        display: inline-flex;\n      };\n\n      --layout-horizontal: {\n        @apply --layout;\n\n        -ms-flex-direction: row;\n        -webkit-flex-direction: row;\n        flex-direction: row;\n      };\n\n      --layout-horizontal-reverse: {\n        @apply --layout;\n\n        -ms-flex-direction: row-reverse;\n        -webkit-flex-direction: row-reverse;\n        flex-direction: row-reverse;\n      };\n\n      --layout-vertical: {\n        @apply --layout;\n\n        -ms-flex-direction: column;\n        -webkit-flex-direction: column;\n        flex-direction: column;\n      };\n\n      --layout-vertical-reverse: {\n        @apply --layout;\n\n        -ms-flex-direction: column-reverse;\n        -webkit-flex-direction: column-reverse;\n        flex-direction: column-reverse;\n      };\n\n      --layout-wrap: {\n        -ms-flex-wrap: wrap;\n        -webkit-flex-wrap: wrap;\n        flex-wrap: wrap;\n      };\n\n      --layout-wrap-reverse: {\n        -ms-flex-wrap: wrap-reverse;\n        -webkit-flex-wrap: wrap-reverse;\n        flex-wrap: wrap-reverse;\n      };\n\n      --layout-flex-auto: {\n        -ms-flex: 1 1 auto;\n        -webkit-flex: 1 1 auto;\n        flex: 1 1 auto;\n      };\n\n      --layout-flex-none: {\n        -ms-flex: none;\n        -webkit-flex: none;\n        flex: none;\n      };\n\n      --layout-flex: {\n        -ms-flex: 1 1 0.000000001px;\n        -webkit-flex: 1;\n        flex: 1;\n        -webkit-flex-basis: 0.000000001px;\n        flex-basis: 0.000000001px;\n      };\n\n      --layout-flex-2: {\n        -ms-flex: 2;\n        -webkit-flex: 2;\n        flex: 2;\n      };\n\n      --layout-flex-3: {\n        -ms-flex: 3;\n        -webkit-flex: 3;\n        flex: 3;\n      };\n\n      --layout-flex-4: {\n        -ms-flex: 4;\n        -webkit-flex: 4;\n        flex: 4;\n      };\n\n      --layout-flex-5: {\n        -ms-flex: 5;\n        -webkit-flex: 5;\n        flex: 5;\n      };\n\n      --layout-flex-6: {\n        -ms-flex: 6;\n        -webkit-flex: 6;\n        flex: 6;\n      };\n\n      --layout-flex-7: {\n        -ms-flex: 7;\n        -webkit-flex: 7;\n        flex: 7;\n      };\n\n      --layout-flex-8: {\n        -ms-flex: 8;\n        -webkit-flex: 8;\n        flex: 8;\n      };\n\n      --layout-flex-9: {\n        -ms-flex: 9;\n        -webkit-flex: 9;\n        flex: 9;\n      };\n\n      --layout-flex-10: {\n        -ms-flex: 10;\n        -webkit-flex: 10;\n        flex: 10;\n      };\n\n      --layout-flex-11: {\n        -ms-flex: 11;\n        -webkit-flex: 11;\n        flex: 11;\n      };\n\n      --layout-flex-12: {\n        -ms-flex: 12;\n        -webkit-flex: 12;\n        flex: 12;\n      };\n\n      /* alignment in cross axis */\n\n      --layout-start: {\n        -ms-flex-align: start;\n        -webkit-align-items: flex-start;\n        align-items: flex-start;\n      };\n\n      --layout-center: {\n        -ms-flex-align: center;\n        -webkit-align-items: center;\n        align-items: center;\n      };\n\n      --layout-end: {\n        -ms-flex-align: end;\n        -webkit-align-items: flex-end;\n        align-items: flex-end;\n      };\n\n      --layout-baseline: {\n        -ms-flex-align: baseline;\n        -webkit-align-items: baseline;\n        align-items: baseline;\n      };\n\n      /* alignment in main axis */\n\n      --layout-start-justified: {\n        -ms-flex-pack: start;\n        -webkit-justify-content: flex-start;\n        justify-content: flex-start;\n      };\n\n      --layout-center-justified: {\n        -ms-flex-pack: center;\n        -webkit-justify-content: center;\n        justify-content: center;\n      };\n\n      --layout-end-justified: {\n        -ms-flex-pack: end;\n        -webkit-justify-content: flex-end;\n        justify-content: flex-end;\n      };\n\n      --layout-around-justified: {\n        -ms-flex-pack: distribute;\n        -webkit-justify-content: space-around;\n        justify-content: space-around;\n      };\n\n      --layout-justified: {\n        -ms-flex-pack: justify;\n        -webkit-justify-content: space-between;\n        justify-content: space-between;\n      };\n\n      --layout-center-center: {\n        @apply --layout-center;\n        @apply --layout-center-justified;\n      };\n\n      /* self alignment */\n\n      --layout-self-start: {\n        -ms-align-self: flex-start;\n        -webkit-align-self: flex-start;\n        align-self: flex-start;\n      };\n\n      --layout-self-center: {\n        -ms-align-self: center;\n        -webkit-align-self: center;\n        align-self: center;\n      };\n\n      --layout-self-end: {\n        -ms-align-self: flex-end;\n        -webkit-align-self: flex-end;\n        align-self: flex-end;\n      };\n\n      --layout-self-stretch: {\n        -ms-align-self: stretch;\n        -webkit-align-self: stretch;\n        align-self: stretch;\n      };\n\n      --layout-self-baseline: {\n        -ms-align-self: baseline;\n        -webkit-align-self: baseline;\n        align-self: baseline;\n      };\n\n      /* multi-line alignment in main axis */\n\n      --layout-start-aligned: {\n        -ms-flex-line-pack: start;  /* IE10 */\n        -ms-align-content: flex-start;\n        -webkit-align-content: flex-start;\n        align-content: flex-start;\n      };\n\n      --layout-end-aligned: {\n        -ms-flex-line-pack: end;  /* IE10 */\n        -ms-align-content: flex-end;\n        -webkit-align-content: flex-end;\n        align-content: flex-end;\n      };\n\n      --layout-center-aligned: {\n        -ms-flex-line-pack: center;  /* IE10 */\n        -ms-align-content: center;\n        -webkit-align-content: center;\n        align-content: center;\n      };\n\n      --layout-between-aligned: {\n        -ms-flex-line-pack: justify;  /* IE10 */\n        -ms-align-content: space-between;\n        -webkit-align-content: space-between;\n        align-content: space-between;\n      };\n\n      --layout-around-aligned: {\n        -ms-flex-line-pack: distribute;  /* IE10 */\n        -ms-align-content: space-around;\n        -webkit-align-content: space-around;\n        align-content: space-around;\n      };\n\n      /*******************************\n                Other Layout\n      *******************************/\n\n      --layout-block: {\n        display: block;\n      };\n\n      --layout-invisible: {\n        visibility: hidden !important;\n      };\n\n      --layout-relative: {\n        position: relative;\n      };\n\n      --layout-fit: {\n        position: absolute;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n      };\n\n      --layout-scroll: {\n        -webkit-overflow-scrolling: touch;\n        overflow: auto;\n      };\n\n      --layout-fullbleed: {\n        margin: 0;\n        height: 100vh;\n      };\n\n      /* fixed position */\n\n      --layout-fixed-top: {\n        position: fixed;\n        top: 0;\n        left: 0;\n        right: 0;\n      };\n\n      --layout-fixed-right: {\n        position: fixed;\n        top: 0;\n        right: 0;\n        bottom: 0;\n      };\n\n      --layout-fixed-bottom: {\n        position: fixed;\n        right: 0;\n        bottom: 0;\n        left: 0;\n      };\n\n      --layout-fixed-left: {\n        position: fixed;\n        top: 0;\n        bottom: 0;\n        left: 0;\n      };\n\n    }\n  </style>\n</custom-style>"]); _templateObject_e13d1b4010eb11ec83cd7fddb4847b33 = function _templateObject_e13d1b4010eb11ec83cd7fddb4847b33() { return data; }; return data; } function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { keys.push.apply(keys, Object.getOwnPropertySymbols(object)); } if (enumerableOnly) keys = keys.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); return keys; } function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }/**
  @license
  Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
  This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
  The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
  The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
  Code distributed by Google as part of the polymer project is also
  subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
  */ /* eslint-disable no-unused-vars */ /**
                                          * When using Closure Compiler, JSCompiler_renameProperty(property, object) is replaced by the munged name for object[property]
                                          * We cannot alias this function, so we have to use a small shim that has the same behavior when not compiling.
                                          *
                                          * @param {?} prop Property name
                                          * @param {*} obj Reference object
                                          * @return {string} Potentially renamed property name
                                          */window.JSCompiler_renameProperty = function (prop, obj) { return prop; };/* eslint-enable */var CSS_URL_RX = /(url\()([^)]*)(\))/g; var ABS_URL = /(^\/[^\/])|(^#)|(^[\w-\d]*:)/; var workingURL; var resolveDoc;/**
                   * Resolves the given URL against the provided `baseUri'.
                   *
                   * Note that this function performs no resolution for URLs that start
                   * with `/` (absolute URLs) or `#` (hash identifiers).  For general purpose
                   * URL resolution, use `window.URL`.
                   *
                   * @param {string} url Input URL to resolve
                   * @param {?string=} baseURI Base URI to resolve the URL against
                   * @return {string} resolved URL
                   */function _resolveUrl(url, baseURI) {
          if (url && ABS_URL.test(url)) { return url; } if (url === '//') { return url; }// Lazy feature detection.
          if (workingURL === undefined) {
            workingURL = false; try { var u = new URL('b', 'http://a'); u.pathname = 'c%20d'; workingURL = u.href === 'http://a/c%20d'; } catch (e) {// silently fail
            }
          } if (!baseURI) { baseURI = document.baseURI || window.location.href; } if (workingURL) {
            try { return new URL(url, baseURI).href; } catch (e) {// Bad url or baseURI structure. Do not attempt to resolve.
              return url;
            }
          }// Fallback to creating an anchor into a disconnected document.
          if (!resolveDoc) { resolveDoc = document.implementation.createHTMLDocument('temp'); resolveDoc.base = resolveDoc.createElement('base'); resolveDoc.head.appendChild(resolveDoc.base); resolveDoc.anchor = resolveDoc.createElement('a'); resolveDoc.body.appendChild(resolveDoc.anchor); } resolveDoc.base.href = baseURI; resolveDoc.anchor.href = url; return resolveDoc.anchor.href || url;
        }/**
     * Resolves any relative URL's in the given CSS text against the provided
     * `ownerDocument`'s `baseURI`.
     *
     * @param {string} cssText CSS text to process
     * @param {string} baseURI Base URI to resolve the URL against
     * @return {string} Processed CSS text with resolved URL's
     */function resolveCss(cssText, baseURI) { return cssText.replace(CSS_URL_RX, function (m, pre, url, post) { return pre + '\'' + _resolveUrl(url.replace(/["']/g, ''), baseURI) + '\'' + post; }); }/**
     * Returns a path from a given `url`. The path includes the trailing
     * `/` from the url.
     *
     * @param {string} url Input URL to transform
     * @return {string} resolved path
     */function pathFromUrl(url) { return url.substring(0, url.lastIndexOf('/') + 1); } var useShadow = !window.ShadyDOM || !window.ShadyDOM.inUse; var useNativeCSSProperties = Boolean(!window.ShadyCSS || window.ShadyCSS.nativeCss); var useNativeCustomElements = !window.customElements.polyfillWrapFlushCallback; var supportsAdoptingStyleSheets = useShadow && 'adoptedStyleSheets' in Document.prototype && 'replaceSync' in CSSStyleSheet.prototype &&// Since spec may change, feature detect exact API we need
          function () { try { var sheet = new CSSStyleSheet(); sheet.replaceSync(''); var host = document.createElement('div'); host.attachShadow({ mode: 'open' }); host.shadowRoot.adoptedStyleSheets = [sheet]; return host.shadowRoot.adoptedStyleSheets[0] === sheet; } catch (e) { return false; } }();/**
         * Globally settable property that is automatically assigned to
         * `ElementMixin` instances, useful for binding in templates to
         * make URL's relative to an application's root.  Defaults to the main
         * document URL, but can be overridden by users.  It may be useful to set
         * `rootPath` to provide a stable application mount path when
         * using client side routing.
         */var rootPath = window.Polymer && window.Polymer.rootPath || pathFromUrl(document.baseURI || window.location.href);/**
                                                                                                                             * Sets the global rootPath property used by `ElementMixin` and
                                                                                                                             * available via `rootPath`.
                                                                                                                             *
                                                                                                                             * @param {string} path The new root path
                                                                                                                             * @return {void}
                                                                                                                             */var setRootPath = function setRootPath(path) { rootPath = path; };/**
      * A global callback used to sanitize any value before inserting it into the DOM.
      * The callback signature is:
      *
      *  function sanitizeDOMValue(value, name, type, node) { ... }
      *
      * Where:
      *
      * `value` is the value to sanitize.
      * `name` is the name of an attribute or property (for example, href).
      * `type` indicates where the value is being inserted: one of property, attribute, or text.
      * `node` is the node where the value is being inserted.
      *
      * @type {(function(*,string,string,?Node):*)|undefined}
      */var sanitizeDOMValue = window.Polymer && window.Polymer.sanitizeDOMValue || undefined;/**
                                                                                                 * Sets the global sanitizeDOMValue available via this module's exported
                                                                                                 * `sanitizeDOMValue` variable.
                                                                                                 *
                                                                                                 * @param {(function(*,string,string,?Node):*)|undefined} newSanitizeDOMValue the global sanitizeDOMValue callback
                                                                                                 * @return {void}
                                                                                                 */var setSanitizeDOMValue = function setSanitizeDOMValue(newSanitizeDOMValue) { sanitizeDOMValue = newSanitizeDOMValue; };/**
      * Gets sanitizeDOMValue, for environments that don't well support `export let`.
      *
      * @return {(function(*,string,string,?Node):*)|undefined} sanitizeDOMValue
      */var getSanitizeDOMValue = function getSanitizeDOMValue() { return sanitizeDOMValue; };/**
      * Globally settable property to make Polymer Gestures use passive TouchEvent listeners when recognizing gestures.
      * When set to `true`, gestures made from touch will not be able to prevent scrolling, allowing for smoother
      * scrolling performance.
      * Defaults to `false` for backwards compatibility.
      */var passiveTouchGestures = window.Polymer && window.Polymer.setPassiveTouchGestures || false;/**
                                                                                                        * Sets `passiveTouchGestures` globally for all elements using Polymer Gestures.
                                                                                                        *
                                                                                                        * @param {boolean} usePassive enable or disable passive touch gestures globally
                                                                                                        * @return {void}
                                                                                                        */var setPassiveTouchGestures = function setPassiveTouchGestures(usePassive) { passiveTouchGestures = usePassive; };/**
      * Setting to ensure Polymer template evaluation only occurs based on tempates
      * defined in trusted script.  When true, `<dom-module>` re-registration is
      * disallowed, `<dom-bind>` is disabled, and `<dom-if>`/`<dom-repeat>`
      * templates will only evaluate in the context of a trusted element template.
      */var strictTemplatePolicy = window.Polymer && window.Polymer.strictTemplatePolicy || false;/**
                                                                                                     * Sets `strictTemplatePolicy` globally for all elements
                                                                                                     *
                                                                                                     * @param {boolean} useStrictPolicy enable or disable strict template policy
                                                                                                     *   globally
                                                                                                     * @return {void}
                                                                                                     */var setStrictTemplatePolicy = function setStrictTemplatePolicy(useStrictPolicy) { strictTemplatePolicy = useStrictPolicy; };/**
      * Setting to enable dom-module lookup from Polymer.Element.  By default,
      * templates must be defined in script using the `static get template()`
      * getter and the `html` tag function.  To enable legacy loading of templates
      * via dom-module, set this flag to true.
      */var allowTemplateFromDomModule = window.Polymer && window.Polymer.allowTemplateFromDomModule || false;/**
                                                                                                                 * Sets `lookupTemplateFromDomModule` globally for all elements
                                                                                                                 *
                                                                                                                 * @param {boolean} allowDomModule enable or disable template lookup
                                                                                                                 *   globally
                                                                                                                 * @return {void}
                                                                                                                 */var setAllowTemplateFromDomModule = function setAllowTemplateFromDomModule(allowDomModule) { allowTemplateFromDomModule = allowDomModule; };/**
      * Setting to skip processing style includes and re-writing urls in css styles.
      * Normally "included" styles are pulled into the element and all urls in styles
      * are re-written to be relative to the containing script url.
      * If no includes or relative urls are used in styles, these steps can be
      * skipped as an optimization.
      */var legacyOptimizations = window.Polymer && window.Polymer.legacyOptimizations || false;/**
                                                                                                   * Sets `legacyOptimizations` globally for all elements to enable optimizations
                                                                                                   * when only legacy based elements are used.
                                                                                                   *
                                                                                                   * @param {boolean} useLegacyOptimizations enable or disable legacy optimizations
                                                                                                   * includes and url rewriting
                                                                                                   * @return {void}
                                                                                                   */var setLegacyOptimizations = function setLegacyOptimizations(useLegacyOptimizations) { legacyOptimizations = useLegacyOptimizations; };/**
      * Setting to add warnings useful when migrating from Polymer 1.x to 2.x.
      */var legacyWarnings = window.Polymer && window.Polymer.legacyWarnings || false;/**
                                                                                         * Sets `legacyWarnings` globally for all elements to migration warnings.
                                                                                         *
                                                                                         * @param {boolean} useLegacyWarnings enable or disable warnings
                                                                                         * @return {void}
                                                                                         */var setLegacyWarnings = function setLegacyWarnings(useLegacyWarnings) { legacyWarnings = useLegacyWarnings; };/**
      * Setting to perform initial rendering synchronously when running under ShadyDOM.
      * This matches the behavior of Polymer 1.
      */var syncInitialRender = window.Polymer && window.Polymer.syncInitialRender || false;/**
                                                                                               * Sets `syncInitialRender` globally for all elements to enable synchronous
                                                                                               * initial rendering.
                                                                                               *
                                                                                               * @param {boolean} useSyncInitialRender enable or disable synchronous initial
                                                                                               * rendering globally.
                                                                                               * @return {void}
                                                                                               */var setSyncInitialRender = function setSyncInitialRender(useSyncInitialRender) { syncInitialRender = useSyncInitialRender; };/**
      * Setting to retain the legacy Polymer 1 behavior for multi-property
      * observers around undefined values. Observers and computed property methods
      * are not called until no argument is undefined.
      */var legacyUndefined = window.Polymer && window.Polymer.legacyUndefined || false;/**
                                                                                           * Sets `legacyUndefined` globally for all elements to enable legacy
                                                                                           * multi-property behavior for undefined values.
                                                                                           *
                                                                                           * @param {boolean} useLegacyUndefined enable or disable legacy
                                                                                           * multi-property behavior for undefined.
                                                                                           * @return {void}
                                                                                           */var setLegacyUndefined = function setLegacyUndefined(useLegacyUndefined) { legacyUndefined = useLegacyUndefined; };/**
      * Setting to ensure computed properties are computed in order to ensure
      * re-computation never occurs in a given turn.
      */var orderedComputed = window.Polymer && window.Polymer.orderedComputed || false;/**
                                                                                           * Sets `orderedComputed` globally for all elements to enable ordered computed
                                                                                           * property computation.
                                                                                           *
                                                                                           * @param {boolean} useOrderedComputed enable or disable ordered computed effects
                                                                                           * @return {void}
                                                                                           */var setOrderedComputed = function setOrderedComputed(useOrderedComputed) { orderedComputed = useOrderedComputed; };/**
      * Setting to cancel synthetic click events fired by older mobile browsers. Modern browsers
      * no longer fire synthetic click events, and the cancellation behavior can interfere
      * when programmatically clicking on elements.
      */var cancelSyntheticClickEvents = true;/**
                                                 * Sets `setCancelSyntheticEvents` globally for all elements to cancel synthetic click events.
                                                 *
                                                 * @param {boolean} useCancelSyntheticClickEvents enable or disable cancelling synthetic
                                                 * events
                                                 * @return {void}
                                                 */var setCancelSyntheticClickEvents = function setCancelSyntheticClickEvents(useCancelSyntheticClickEvents) { cancelSyntheticClickEvents = useCancelSyntheticClickEvents; };/**
      * Setting to remove nested templates inside `dom-if` and `dom-repeat` as
      * part of element template parsing.  This is a performance optimization that
      * eliminates most of the tax of needing two elements due to the loss of
      * type-extended templates as a result of the V1 specification changes.
      */var removeNestedTemplates = window.Polymer && window.Polymer.removeNestedTemplates || false;/**
                                                                                                       * Sets `removeNestedTemplates` globally, to eliminate nested templates
                                                                                                       * inside `dom-if` and `dom-repeat` as part of template parsing.
                                                                                                       *
                                                                                                       * @param {boolean} useRemoveNestedTemplates enable or disable removing nested
                                                                                                       *   templates during parsing
                                                                                                       * @return {void}
                                                                                                       */var setRemoveNestedTemplates = function setRemoveNestedTemplates(useRemoveNestedTemplates) { removeNestedTemplates = useRemoveNestedTemplates; };/**
      * Setting to place `dom-if` elements in a performance-optimized mode that takes
      * advantage of lighter-weight host runtime template stamping to eliminate the
      * need for an intermediate Templatizer `TemplateInstance` to mange the nodes
      * stamped by `dom-if`.  Under this setting, any Templatizer-provided API's
      * such as `modelForElement` will not be available for nodes stamped by
      * `dom-if`.
      */var fastDomIf = window.Polymer && window.Polymer.fastDomIf || false;/**
                                                                               * Sets `fastDomIf` globally, to put `dom-if` in a performance-optimized mode.
                                                                               *
                                                                               * @param {boolean} useFastDomIf enable or disable `dom-if` fast-mode
                                                                               * @return {void}
                                                                               */var setFastDomIf = function setFastDomIf(useFastDomIf) { fastDomIf = useFastDomIf; };/**
      * Setting to disable `dom-change` and `rendered-item-count` events from
      * `dom-if` and `dom-repeat`. Users can opt back into `dom-change` events by
      * setting the `notify-dom-change` attribute (`notifyDomChange: true` property)
      * to `dom-if`/`don-repeat` instances.
      */var suppressTemplateNotifications = window.Polymer && window.Polymer.suppressTemplateNotifications || false;/**
                                                                                                                       * Sets `suppressTemplateNotifications` globally, to disable `dom-change` and
                                                                                                                       * `rendered-item-count` events from `dom-if` and `dom-repeat`.
                                                                                                                       *
                                                                                                                       * @param {boolean} suppress enable or disable `suppressTemplateNotifications`
                                                                                                                       * @return {void}
                                                                                                                       */var setSuppressTemplateNotifications = function setSuppressTemplateNotifications(suppress) { suppressTemplateNotifications = suppress; };/**
      * Setting to disable use of dynamic attributes. This is an optimization
      * to avoid setting `observedAttributes`. Instead attributes are read
      * once at create time and set/removeAttribute are patched.
      */var legacyNoObservedAttributes = window.Polymer && window.Polymer.legacyNoObservedAttributes || false;/**
                                                                                                                 * Sets `legacyNoObservedAttributes` globally, to disable `observedAttributes`.
                                                                                                                 *
                                                                                                                 * @param {boolean} noObservedAttributes enable or disable `legacyNoObservedAttributes`
                                                                                                                 * @return {void}
                                                                                                                 */var setLegacyNoObservedAttributes = function setLegacyNoObservedAttributes(noObservedAttributes) { legacyNoObservedAttributes = noObservedAttributes; };/**
      * Setting to enable use of `adoptedStyleSheets` for sharing style sheets
      * between component instances' shadow roots, if the app uses built Shady CSS
      * styles.
      */var useAdoptedStyleSheetsWithBuiltCSS = window.Polymer && window.Polymer.useAdoptedStyleSheetsWithBuiltCSS || false;/**
                                                                                                                               * Sets `useAdoptedStyleSheetsWithBuiltCSS` globally.
                                                                                                                               *
                                                                                                                               * @param {boolean} value enable or disable `useAdoptedStyleSheetsWithBuiltCSS`
                                                                                                                               * @return {void}
                                                                                                                               */var setUseAdoptedStyleSheetsWithBuiltCSS = function setUseAdoptedStyleSheetsWithBuiltCSS(value) { useAdoptedStyleSheetsWithBuiltCSS = value; }; var dedupeId = 0;/**
                     * @constructor
                     * @extends {Function}
                     * @private
                     */function MixinFunction() { }/** @type {(WeakMap | undefined)} */MixinFunction.prototype.__mixinApplications;/** @type {(Object | undefined)} */MixinFunction.prototype.__mixinSet;/* eslint-disable valid-jsdoc */ /**
                                                                        * Wraps an ES6 class expression mixin such that the mixin is only applied
                                                                        * if it has not already been applied its base argument. Also memoizes mixin
                                                                        * applications.
                                                                        *
                                                                        * @template T
                                                                        * @param {T} mixin ES6 class expression mixin to wrap
                                                                        * @return {T}
                                                                        * @suppress {invalidCasts}
                                                                        */var dedupingMixin = function dedupingMixin(mixin) {
          var mixinApplications =/** @type {!MixinFunction} */mixin.__mixinApplications; if (!mixinApplications) { mixinApplications = new WeakMap();/** @type {!MixinFunction} */mixin.__mixinApplications = mixinApplications; }// maintain a unique id for each mixin
          var mixinDedupeId = dedupeId++; function dedupingMixin(base) {
            var baseSet =/** @type {!MixinFunction} */base.__mixinSet; if (baseSet && baseSet[mixinDedupeId]) { return base; } var map = mixinApplications; var extended = map.get(base); if (!extended) {
              extended =/** @type {!Function} */mixin(base); map.set(base, extended);// copy inherited mixin set from the extended class, or the base class
              // NOTE: we avoid use of Set here because some browser (IE11)
              // cannot extend a base Set via the constructor.
              var mixinSet = Object.create(/** @type {!MixinFunction} */extended.__mixinSet || baseSet || null); mixinSet[mixinDedupeId] = true;/** @type {!MixinFunction} */extended.__mixinSet = mixinSet;
            } return extended;
          } return dedupingMixin;
        };/* eslint-enable valid-jsdoc */var modules = {}; var lcModules = {};/**
                       * Sets a dom-module into the global registry by id.
                       *
                       * @param {string} id dom-module id
                       * @param {DomModule} module dom-module instance
                       * @return {void}
                       */function setModule(id, module) {// store id separate from lowercased id so that
          // in all cases mixedCase id will stored distinctly
          // and lowercase version is a fallback
          modules[id] = lcModules[id.toLowerCase()] = module;
        }/**
     * Retrieves a dom-module from the global registry by id.
     *
     * @param {string} id dom-module id
     * @return {DomModule!} dom-module instance
     */function findModule(id) { return modules[id] || lcModules[id.toLowerCase()]; } function styleOutsideTemplateCheck(inst) { if (inst.querySelector('style')) { console.warn('dom-module %s has style outside template', inst.id); } }/**
     * The `dom-module` element registers the dom it contains to the name given
     * by the module's id attribute. It provides a unified database of dom
     * accessible via its static `import` API.
     *
     * A key use case of `dom-module` is for providing custom element `<template>`s
     * via HTML imports that are parsed by the native HTML parser, that can be
     * relocated during a bundling pass and still looked up by `id`.
     *
     * Example:
     *
     *     <dom-module id="foo">
     *       <img src="stuff.png">
     *     </dom-module>
     *
     * Then in code in some other location that cannot access the dom-module above
     *
     *     let img = customElements.get('dom-module').import('foo', 'img');
     *
     * @customElement
     * @extends HTMLElement
     * @summary Custom element that provides a registry of relocatable DOM content
     *   by `id` that is agnostic to bundling.
     * @unrestricted
     */var DomModule =/*#__PURE__*/function (_HTMLElement) {
          babelHelpers.inherits(DomModule, _HTMLElement); function DomModule() { babelHelpers.classCallCheck(this, DomModule); return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(DomModule).apply(this, arguments)); } babelHelpers.createClass(DomModule, [{
            key: "attributeChangedCallback",/* eslint-disable no-unused-vars */ /**
                                           * @param {string} name Name of attribute.
                                           * @param {?string} old Old value of attribute.
                                           * @param {?string} value Current value of attribute.
                                           * @param {?string} namespace Attribute namespace.
                                           * @return {void}
                                           * @override
                                           */value: function attributeChangedCallback(name, old, value, namespace) { if (old !== value) { this.register(); } }/* eslint-enable no-unused-args */ /**
                                          * The absolute URL of the original location of this `dom-module`.
                                          *
                                          * This value will differ from this element's `ownerDocument` in the
                                          * following ways:
                                          * - Takes into account any `assetpath` attribute added during bundling
                                          *   to indicate the original location relative to the bundled location
                                          * - Uses the HTMLImports polyfill's `importForElement` API to ensure
                                          *   the path is relative to the import document's location since
                                          *   `ownerDocument` is not currently polyfilled
                                          */}, {
            key: "register",/**
       * Registers the dom-module at a given id. This method should only be called
       * when a dom-module is imperatively created. For
       * example, `document.createElement('dom-module').register('foo')`.
       * @param {string=} id The id at which to register the dom-module.
       * @return {void}
       */value: function register(id) {
              id = id || this.id; if (id) {// Under strictTemplatePolicy, reject and null out any re-registered
                // dom-module since it is ambiguous whether first-in or last-in is trusted
                if (strictTemplatePolicy && findModule(id) !== undefined) { setModule(id, null); throw new Error("strictTemplatePolicy: dom-module ".concat(id, " re-registered")); } this.id = id; setModule(id, this); styleOutsideTemplateCheck(this);
              }
            }
          }, {
            key: "assetpath", get: function get() {// Don't override existing assetpath.
              if (!this.__assetpath) {// note: assetpath set via an attribute must be relative to this
                // element's location; accomodate polyfilled HTMLImports
                var owner = window.HTMLImports && HTMLImports.importForElement ? HTMLImports.importForElement(this) || document : this.ownerDocument; var url = _resolveUrl(this.getAttribute('assetpath') || '', owner.baseURI); this.__assetpath = pathFromUrl(url);
              } return this.__assetpath;
            }
          }], [{
            key: "import",/**
       * Retrieves the element specified by the css `selector` in the module
       * registered by `id`. For example, this.import('foo', 'img');
       * @param {string} id The id of the dom-module in which to search.
       * @param {string=} selector The css selector by which to find the element.
       * @return {Element} Returns the element which matches `selector` in the
       * module registered at the specified `id`.
       *
       * @export
       * @nocollapse Referred to indirectly in style-gather.js
       */value: function _import(id, selector) { if (id) { var m = findModule(id); if (m && selector) { return m.querySelector(selector); } return m; } return null; }
          }, { key: "observedAttributes",/** @override */get: function get() { return ['id']; } }]); return DomModule;
        }(babelHelpers.wrapNativeSuper(HTMLElement)); DomModule.prototype['modules'] = modules; customElements.define('dom-module', DomModule); var MODULE_STYLE_LINK_SELECTOR = 'link[rel=import][type~=css]'; var INCLUDE_ATTR = 'include'; var SHADY_UNSCOPED_ATTR = 'shady-unscoped';/**
                                                 * @param {string} moduleId .
                                                 * @return {?DomModule} .
                                                 */function importModule(moduleId) { return (/** @type {?DomModule} */DomModule.import(moduleId)); } function styleForImport(importDoc) {// NOTE: polyfill affordance.
          // under the HTMLImports polyfill, there will be no 'body',
          // but the import pseudo-doc can be used directly.
          var container = importDoc.body ? importDoc.body : importDoc; var importCss = resolveCss(container.textContent, importDoc.baseURI); var style = document.createElement('style'); style.textContent = importCss; return style;
        }/** @typedef {{assetpath: string}} */var templateWithAssetPath;// eslint-disable-line no-unused-vars
  /**
   * Returns a list of <style> elements in a space-separated list of `dom-module`s.
   *
   * @function
   * @param {string} moduleIds List of dom-module id's within which to
   * search for css.
   * @return {!Array<!HTMLStyleElement>} Array of contained <style> elements
   */function stylesFromModules(moduleIds) { var modules = moduleIds.trim().split(/\s+/); var styles = []; for (var i = 0; i < modules.length; i++) { styles.push.apply(styles, babelHelpers.toConsumableArray(stylesFromModule(modules[i]))); } return styles; }/**
     * Returns a list of <style> elements in a given `dom-module`.
     * Styles in a `dom-module` can come either from `<style>`s within the
     * first `<template>`, or else from one or more
     * `<link rel="import" type="css">` links outside the template.
     *
     * @param {string} moduleId dom-module id to gather styles from
     * @return {!Array<!HTMLStyleElement>} Array of contained styles.
     */function stylesFromModule(moduleId) {
          var m = importModule(moduleId); if (!m) { console.warn('Could not find style data in module named', moduleId); return []; } if (m._styles === undefined) {
            var styles = [];// module imports: <link rel="import" type="css">
            styles.push.apply(styles, babelHelpers.toConsumableArray(_stylesFromModuleImports(m)));// include css from the first template in the module
            var _template =/** @type {?HTMLTemplateElement} */m.querySelector('template'); if (_template) { styles.push.apply(styles, babelHelpers.toConsumableArray(stylesFromTemplate(_template,/** @type {templateWithAssetPath} */m.assetpath))); } m._styles = styles;
          } return m._styles;
        }/**
     * Returns the `<style>` elements within a given template.
     *
     * @param {!HTMLTemplateElement} template Template to gather styles from
     * @param {string=} baseURI baseURI for style content
     * @return {!Array<!HTMLStyleElement>} Array of styles
     */function stylesFromTemplate(template, baseURI) {
          if (!template._styles) {
            var styles = [];// if element is a template, get content from its .content
            var e$ = template.content.querySelectorAll('style'); for (var i = 0; i < e$.length; i++) {
              var e = e$[i];// support style sharing by allowing styles to "include"
              // other dom-modules that contain styling
              var include = e.getAttribute(INCLUDE_ATTR); if (include) { styles.push.apply(styles, babelHelpers.toConsumableArray(stylesFromModules(include).filter(function (item, index, self) { return self.indexOf(item) === index; }))); } if (baseURI) { e.textContent = resolveCss(e.textContent,/** @type {string} */baseURI); } styles.push(e);
            } template._styles = styles;
          } return template._styles;
        }/**
     * Returns a list of <style> elements  from stylesheets loaded via `<link rel="import" type="css">` links within the specified `dom-module`.
     *
     * @param {string} moduleId Id of `dom-module` to gather CSS from
     * @return {!Array<!HTMLStyleElement>} Array of contained styles.
     */function stylesFromModuleImports(moduleId) { var m = importModule(moduleId); return m ? _stylesFromModuleImports(m) : []; }/**
     * @param {!HTMLElement} module dom-module element that could contain `<link rel="import" type="css">` styles
     * @return {!Array<!HTMLStyleElement>} Array of contained styles
     */function _stylesFromModuleImports(module) { var styles = []; var p$ = module.querySelectorAll(MODULE_STYLE_LINK_SELECTOR); for (var i = 0; i < p$.length; i++) { var _p = p$[i]; if (_p.import) { var importDoc = _p.import; var unscoped = _p.hasAttribute(SHADY_UNSCOPED_ATTR); if (unscoped && !importDoc._unscopedStyle) { var _style = styleForImport(importDoc); _style.setAttribute(SHADY_UNSCOPED_ATTR, ''); importDoc._unscopedStyle = _style; } else if (!importDoc._style) { importDoc._style = styleForImport(importDoc); } styles.push(unscoped ? importDoc._unscopedStyle : importDoc._style); } } return styles; }/**
     *
     * Returns CSS text of styles in a space-separated list of `dom-module`s.
     * Note: This method is deprecated, use `stylesFromModules` instead.
     *
     * @deprecated
     * @param {string} moduleIds List of dom-module id's within which to
     * search for css.
     * @return {string} Concatenated CSS content from specified `dom-module`s
     */function cssFromModules(moduleIds) { var modules = moduleIds.trim().split(/\s+/); var cssText = ''; for (var i = 0; i < modules.length; i++) { cssText += cssFromModule(modules[i]); } return cssText; }/**
     * Returns CSS text of styles in a given `dom-module`.  CSS in a `dom-module`
     * can come either from `<style>`s within the first `<template>`, or else
     * from one or more `<link rel="import" type="css">` links outside the
     * template.
     *
     * Any `<styles>` processed are removed from their original location.
     * Note: This method is deprecated, use `styleFromModule` instead.
     *
     * @deprecated
     * @param {string} moduleId dom-module id to gather styles from
     * @return {string} Concatenated CSS content from specified `dom-module`
     */function cssFromModule(moduleId) {
          var m = importModule(moduleId); if (m && m._cssText === undefined) {// module imports: <link rel="import" type="css">
            var cssText = _cssFromModuleImports(m);// include css from the first template in the module
            var t =/** @type {?HTMLTemplateElement} */m.querySelector('template'); if (t) { cssText += cssFromTemplate(t,/** @type {templateWithAssetPath} */m.assetpath); } m._cssText = cssText || null;
          } if (!m) { console.warn('Could not find style data in module named', moduleId); } return m && m._cssText || '';
        }/**
     * Returns CSS text of `<styles>` within a given template.
     *
     * Any `<styles>` processed are removed from their original location.
     * Note: This method is deprecated, use `styleFromTemplate` instead.
     *
     * @deprecated
     * @param {!HTMLTemplateElement} template Template to gather styles from
     * @param {string} baseURI Base URI to resolve the URL against
     * @return {string} Concatenated CSS content from specified template
     */function cssFromTemplate(template, baseURI) {
          var cssText = ''; var e$ = stylesFromTemplate(template, baseURI);// if element is a template, get content from its .content
          for (var i = 0; i < e$.length; i++) { var e = e$[i]; if (e.parentNode) { e.parentNode.removeChild(e); } cssText += e.textContent; } return cssText;
        }/**
     * Returns CSS text from stylesheets loaded via `<link rel="import" type="css">`
     * links within the specified `dom-module`.
     *
     * Note: This method is deprecated, use `stylesFromModuleImports` instead.
     *
     * @deprecated
     *
     * @param {string} moduleId Id of `dom-module` to gather CSS from
     * @return {string} Concatenated CSS content from links in specified `dom-module`
     */function cssFromModuleImports(moduleId) { var m = importModule(moduleId); return m ? _cssFromModuleImports(m) : ''; }/**
     * @deprecated
     * @param {!HTMLElement} module dom-module element that could contain `<link rel="import" type="css">` styles
     * @return {string} Concatenated CSS content from links in the dom-module
     */function _cssFromModuleImports(module) { var cssText = ''; var styles = _stylesFromModuleImports(module); for (var i = 0; i < styles.length; i++) { cssText += styles[i].textContent; } return cssText; }/**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */ /* eslint-disable valid-jsdoc */ /**
                                         * Node wrapper to ensure ShadowDOM safe operation regardless of polyfill
                                         * presence or mode. Note that with the introduction of `ShadyDOM.noPatch`,
                                         * a node wrapper must be used to access ShadowDOM API.
                                         * This is similar to using `Polymer.dom` but relies exclusively
                                         * on the presence of the ShadyDOM polyfill rather than requiring the loading
                                         * of legacy (Polymer.dom) API.
                                         * @type {function(Node):Node}
                                         */var wrap = window['ShadyDOM'] && window['ShadyDOM']['noPatch'] && window['ShadyDOM']['wrap'] ? window['ShadyDOM']['wrap'] : window['ShadyDOM'] ? function (n) { return ShadyDOM['patch'](n); } : function (n) { return n; }; function isPath(path) { return path.indexOf('.') >= 0; }/**
     * Returns the root property name for the given path.
     *
     * Example:
     *
     * ```
     * root('foo.bar.baz') // 'foo'
     * root('foo')         // 'foo'
     * ```
     *
     * @param {string} path Path string
     * @return {string} Root property name
     */function root(path) { var dotIndex = path.indexOf('.'); if (dotIndex === -1) { return path; } return path.slice(0, dotIndex); }/**
     * Given `base` is `foo.bar`, `foo` is an ancestor, `foo.bar` is not
     * Returns true if the given path is an ancestor of the base path.
     *
     * Example:
     *
     * ```
     * isAncestor('foo.bar', 'foo')         // true
     * isAncestor('foo.bar', 'foo.bar')     // false
     * isAncestor('foo.bar', 'foo.bar.baz') // false
     * ```
     *
     * @param {string} base Path string to test against.
     * @param {string} path Path string to test.
     * @return {boolean} True if `path` is an ancestor of `base`.
     */function isAncestor(base, path) {//     base.startsWith(path + '.');
          return base.indexOf(path + '.') === 0;
        }/**
     * Given `base` is `foo.bar`, `foo.bar.baz` is an descendant
     *
     * Example:
     *
     * ```
     * isDescendant('foo.bar', 'foo.bar.baz') // true
     * isDescendant('foo.bar', 'foo.bar')     // false
     * isDescendant('foo.bar', 'foo')         // false
     * ```
     *
     * @param {string} base Path string to test against.
     * @param {string} path Path string to test.
     * @return {boolean} True if `path` is a descendant of `base`.
     */function isDescendant(base, path) {//     path.startsWith(base + '.');
          return path.indexOf(base + '.') === 0;
        }/**
     * Replaces a previous base path with a new base path, preserving the
     * remainder of the path.
     *
     * User must ensure `path` has a prefix of `base`.
     *
     * Example:
     *
     * ```
     * translate('foo.bar', 'zot', 'foo.bar.baz') // 'zot.baz'
     * ```
     *
     * @param {string} base Current base string to remove
     * @param {string} newBase New base string to replace with
     * @param {string} path Path to translate
     * @return {string} Translated string
     */function translate(base, newBase, path) { return newBase + path.slice(base.length); }/**
     * @param {string} base Path string to test against
     * @param {string} path Path string to test
     * @return {boolean} True if `path` is equal to `base`
     */function matches(base, path) { return base === path || isAncestor(base, path) || isDescendant(base, path); }/**
     * Converts array-based paths to flattened path.  String-based paths
     * are returned as-is.
     *
     * Example:
     *
     * ```
     * normalize(['foo.bar', 0, 'baz'])  // 'foo.bar.0.baz'
     * normalize('foo.bar.0.baz')        // 'foo.bar.0.baz'
     * ```
     *
     * @param {string | !Array<string|number>} path Input path
     * @return {string} Flattened path
     */function normalize(path) { if (Array.isArray(path)) { var parts = []; for (var i = 0; i < path.length; i++) { var args = path[i].toString().split('.'); for (var j = 0; j < args.length; j++) { parts.push(args[j]); } } return parts.join('.'); } else { return path; } }/**
     * Splits a path into an array of property names. Accepts either arrays
     * of path parts or strings.
     *
     * Example:
     *
     * ```
     * split(['foo.bar', 0, 'baz'])  // ['foo', 'bar', '0', 'baz']
     * split('foo.bar.0.baz')        // ['foo', 'bar', '0', 'baz']
     * ```
     *
     * @param {string | !Array<string|number>} path Input path
     * @return {!Array<string>} Array of path parts
     * @suppress {checkTypes}
     */function split(path) { if (Array.isArray(path)) { return normalize(path).split('.'); } return path.toString().split('.'); }/**
     * Reads a value from a path.  If any sub-property in the path is `undefined`,
     * this method returns `undefined` (will never throw.
     *
     * @param {Object} root Object from which to dereference path from
     * @param {string | !Array<string|number>} path Path to read
     * @param {Object=} info If an object is provided to `info`, the normalized
     *  (flattened) path will be set to `info.path`.
     * @return {*} Value at path, or `undefined` if the path could not be
     *  fully dereferenced.
     */function _get(root, path, info) {
          var prop = root; var parts = split(path);// Loop over path parts[0..n-1] and dereference
          for (var i = 0; i < parts.length; i++) { if (!prop) { return; } var part = parts[i]; prop = prop[part]; } if (info) { info.path = parts.join('.'); } return prop;
        }/**
     * Sets a value to a path.  If any sub-property in the path is `undefined`,
     * this method will no-op.
     *
     * @param {Object} root Object from which to dereference path from
     * @param {string | !Array<string|number>} path Path to set
     * @param {*} value Value to set to path
     * @return {string | undefined} The normalized version of the input path
     */function _set(root, path, value) {
          var prop = root; var parts = split(path); var last = parts[parts.length - 1]; if (parts.length > 1) {// Loop over path parts[0..n-2] and dereference
            for (var i = 0; i < parts.length - 1; i++) { var part = parts[i]; prop = prop[part]; if (!prop) { return; } }// Set value to object at end of path
            prop[last] = value;
          } else {// Simple property set
            prop[path] = value;
          } return parts.join('.');
        }/**
     * Returns true if the given string is a structured data path (has dots).
     *
     * This function is deprecated.  Use `isPath` instead.
     *
     * Example:
     *
     * ```
     * isDeep('foo.bar.baz') // true
     * isDeep('foo')         // false
     * ```
     *
     * @deprecated
     * @param {string} path Path string
     * @return {boolean} True if the string contained one or more dots
     */var isDeep = isPath; var caseMap = {}; var DASH_TO_CAMEL = /-[a-z]/g; var CAMEL_TO_DASH = /([A-Z])/g;/**
                                     * @fileoverview Module with utilities for converting between "dash-case" and
                                     * "camelCase" identifiers.
                                     */ /**
                                         * Converts "dash-case" identifier (e.g. `foo-bar-baz`) to "camelCase"
                                         * (e.g. `fooBarBaz`).
                                         *
                                         * @param {string} dash Dash-case identifier
                                         * @return {string} Camel-case representation of the identifier
                                         */function dashToCamelCase(dash) { return caseMap[dash] || (caseMap[dash] = dash.indexOf('-') < 0 ? dash : dash.replace(DASH_TO_CAMEL, function (m) { return m[1].toUpperCase(); })); }/**
     * Converts "camelCase" identifier (e.g. `fooBarBaz`) to "dash-case"
     * (e.g. `foo-bar-baz`).
     *
     * @param {string} camel Camel-case identifier
     * @return {string} Dash-case representation of the identifier
     */function camelToDashCase(camel) { return caseMap[camel] || (caseMap[camel] = camel.replace(CAMEL_TO_DASH, '-$1').toLowerCase()); } var microtaskCurrHandle = 0; var microtaskLastHandle = 0; var microtaskCallbacks = []; var microtaskNodeContent = 0; var microtaskScheduled = false; var microtaskNode = document.createTextNode(''); new window.MutationObserver(microtaskFlush).observe(microtaskNode, { characterData: true }); function microtaskFlush() { microtaskScheduled = false; var len = microtaskCallbacks.length; for (var i = 0; i < len; i++) { var cb = microtaskCallbacks[i]; if (cb) { try { cb(); } catch (e) { setTimeout(function () { throw e; }); } } } microtaskCallbacks.splice(0, len); microtaskLastHandle += len; }/**
     * Async interface wrapper around `setTimeout`.
     *
     * @namespace
     * @summary Async interface wrapper around `setTimeout`.
     */var timeOut = {/**
     * Returns a sub-module with the async interface providing the provided
     * delay.
     *
     * @memberof timeOut
     * @param {number=} delay Time to wait before calling callbacks in ms
     * @return {!AsyncInterface} An async timeout interface
     */after: function after(delay) { return { run: function run(fn) { return window.setTimeout(fn, delay); }, cancel: function cancel(handle) { window.clearTimeout(handle); } }; },/**
     * Enqueues a function called in the next task.
     *
     * @memberof timeOut
     * @param {!Function} fn Callback to run
     * @param {number=} delay Delay in milliseconds
     * @return {number} Handle used for canceling task
     */run: function run(fn, delay) { return window.setTimeout(fn, delay); },/**
     * Cancels a previously enqueued `timeOut` callback.
     *
     * @memberof timeOut
     * @param {number} handle Handle returned from `run` of callback to cancel
     * @return {void}
     */cancel: function cancel(handle) { window.clearTimeout(handle); }
        }; var animationFrame = {/**
     * Enqueues a function called at `requestAnimationFrame` timing.
     *
     * @memberof animationFrame
     * @param {function(number):void} fn Callback to run
     * @return {number} Handle used for canceling task
     */run: function run(fn) { return window.requestAnimationFrame(fn); },/**
     * Cancels a previously enqueued `animationFrame` callback.
     *
     * @memberof animationFrame
     * @param {number} handle Handle returned from `run` of callback to cancel
     * @return {void}
     */cancel: function cancel(handle) { window.cancelAnimationFrame(handle); }
        }; var idlePeriod = {/**
     * Enqueues a function called at `requestIdleCallback` timing.
     *
     * @memberof idlePeriod
     * @param {function(!IdleDeadline):void} fn Callback to run
     * @return {number} Handle used for canceling task
     */run: function run(fn) { return window.requestIdleCallback ? window.requestIdleCallback(fn) : window.setTimeout(fn, 16); },/**
     * Cancels a previously enqueued `idlePeriod` callback.
     *
     * @memberof idlePeriod
     * @param {number} handle Handle returned from `run` of callback to cancel
     * @return {void}
     */cancel: function cancel(handle) { window.cancelIdleCallback ? window.cancelIdleCallback(handle) : window.clearTimeout(handle); }
        }; var microTask = {/**
     * Enqueues a function called at microtask timing.
     *
     * @memberof microTask
     * @param {!Function=} callback Callback to run
     * @return {number} Handle used for canceling task
     */run: function run(callback) { if (!microtaskScheduled) { microtaskScheduled = true; microtaskNode.textContent = microtaskNodeContent++; } microtaskCallbacks.push(callback); return microtaskCurrHandle++; },/**
     * Cancels a previously enqueued `microTask` callback.
     *
     * @memberof microTask
     * @param {number} handle Handle returned from `run` of callback to cancel
     * @return {void}
     */cancel: function cancel(handle) { var idx = handle - microtaskLastHandle; if (idx >= 0) { if (!microtaskCallbacks[idx]) { throw new Error('invalid async handle: ' + handle); } microtaskCallbacks[idx] = null; } }
        }; var microtask = microTask;/**
                                * Element class mixin that provides basic meta-programming for creating one
                                * or more property accessors (getter/setter pair) that enqueue an async
                                * (batched) `_propertiesChanged` callback.
                                *
                                * For basic usage of this mixin, call `MyClass.createProperties(props)`
                                * once at class definition time to create property accessors for properties
                                * named in props, implement `_propertiesChanged` to react as desired to
                                * property changes, and implement `static get observedAttributes()` and
                                * include lowercase versions of any property names that should be set from
                                * attributes. Last, call `this._enableProperties()` in the element's
                                * `connectedCallback` to enable the accessors.
                                *
                                * @mixinFunction
                                * @polymer
                                * @summary Element class mixin for reacting to property changes from
                                *   generated property accessors.
                                * @template T
                                * @param {function(new:T)} superClass Class to apply mixin to.
                                * @return {function(new:T)} superClass with mixin applied.
                                */var PropertiesChanged = dedupingMixin(/**
                                                   * @template T
                                                   * @param {function(new:T)} superClass Class to apply mixin to.
                                                   * @return {function(new:T)} superClass with mixin applied.
                                                   */function (superClass) {/**
     * @polymer
     * @mixinClass
     * @implements {Polymer_PropertiesChanged}
     * @unrestricted
     */var PropertiesChanged =/*#__PURE__*/function (_superClass) {
              babelHelpers.inherits(PropertiesChanged, _superClass); babelHelpers.createClass(PropertiesChanged, [{
                key: "_createPropertyAccessor",//eslint-disable-line no-unused-vars
  /**
       * Creates a setter/getter pair for the named property with its own
       * local storage.  The getter returns the value in the local storage,
       * and the setter calls `_setProperty`, which updates the local storage
       * for the property and enqueues a `_propertiesChanged` callback.
       *
       * This method may be called on a prototype or an instance.  Calling
       * this method may overwrite a property value that already exists on
       * the prototype/instance by creating the accessor.
       *
       * @param {string} property Name of the property
       * @param {boolean=} readOnly When true, no setter is created; the
       *   protected `_setProperty` function must be used to set the property
       * @return {void}
       * @protected
       * @override
       */value: function _createPropertyAccessor(property, readOnly) { this._addPropertyToAttributeMap(property); if (!this.hasOwnProperty(JSCompiler_renameProperty('__dataHasAccessor', this))) { this.__dataHasAccessor = Object.assign({}, this.__dataHasAccessor); } if (!this.__dataHasAccessor[property]) { this.__dataHasAccessor[property] = true; this._definePropertyAccessor(property, readOnly); } }/**
         * Adds the given `property` to a map matching attribute names
         * to property names, using `attributeNameForProperty`. This map is
         * used when deserializing attribute values to properties.
         *
         * @param {string} property Name of the property
         * @override
         */}, {
                key: "_addPropertyToAttributeMap", value: function _addPropertyToAttributeMap(property) {
                  if (!this.hasOwnProperty(JSCompiler_renameProperty('__dataAttributes', this))) { this.__dataAttributes = Object.assign({}, this.__dataAttributes); }// This check is technically not correct; it's an optimization that
                  // assumes that if a _property_ name is already in the map (note this is
                  // an attr->property map), the property mapped directly to the attribute
                  // and it has already been mapped.  This would fail if
                  // `attributeNameForProperty` were overridden such that this was not the
                  // case.
                  var attr = this.__dataAttributes[property]; if (!attr) { attr = this.constructor.attributeNameForProperty(property); this.__dataAttributes[attr] = property; } return attr;
                }/**
         * Defines a property accessor for the given property.
         * @param {string} property Name of the property
         * @param {boolean=} readOnly When true, no setter is created
         * @return {void}
         * @override
         */}, {
                key: "_definePropertyAccessor", value: function _definePropertyAccessor(property, readOnly) {
                  Object.defineProperty(this, property, {/* eslint-disable valid-jsdoc */ /** @this {PropertiesChanged} */get: function get() {// Inline for perf instead of using `_getProperty`
                    return this.__data[property];
                  },/** @this {PropertiesChanged} */set: readOnly ? function () { } : function (value) {// Inline for perf instead of using `_setProperty`
                    if (this._setPendingProperty(property, value, true)) { this._invalidateProperties(); }
                  }/* eslint-enable */
                  });
                }
              }], [{
                key: "createProperties",/**
       * Creates property accessors for the given property names.
       * @param {!Object} props Object whose keys are names of accessors.
       * @return {void}
       * @protected
       * @nocollapse
       */value: function createProperties(props) {
                  var proto = this.prototype; for (var prop in props) {// don't stomp an existing accessor
                    if (!(prop in proto)) { proto._createPropertyAccessor(prop); }
                  }
                }/**
         * Returns an attribute name that corresponds to the given property.
         * The attribute name is the lowercased property name. Override to
         * customize this mapping.
         * @param {string} property Property to convert
         * @return {string} Attribute name corresponding to the given property.
         *
         * @protected
         * @nocollapse
         */}, {
                key: "attributeNameForProperty", value: function attributeNameForProperty(property) { return property.toLowerCase(); }/**
         * Override point to provide a type to which to deserialize a value to
         * a given property.
         * @param {string} name Name of property
         *
         * @protected
         * @nocollapse
         */}, { key: "typeForProperty", value: function typeForProperty(name) { } }]); function PropertiesChanged() {
                var _this; babelHelpers.classCallCheck(this, PropertiesChanged); _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(PropertiesChanged).call(this));/** @type {boolean} */_this.__dataEnabled = false; _this.__dataReady = false; _this.__dataInvalid = false; _this.__data = {}; _this.__dataPending = null; _this.__dataOld = null; _this.__dataInstanceProps = null;/** @type {number} */ // NOTE: used to track re-entrant calls to `_flushProperties`
                _this.__dataCounter = 0; _this.__serializing = false; _this._initializeProperties(); return _this;
              }/**
         * Lifecycle callback called when properties are enabled via
         * `_enableProperties`.
         *
         * Users may override this function to implement behavior that is
         * dependent on the element having its property data initialized, e.g.
         * from defaults (initialized from `constructor`, `_initializeProperties`),
         * `attributeChangedCallback`, or values propagated from host e.g. via
         * bindings.  `super.ready()` must be called to ensure the data system
         * becomes enabled.
         *
         * @return {void}
         * @public
         * @override
         */babelHelpers.createClass(PropertiesChanged, [{
                key: "ready", value: function ready() { this.__dataReady = true; this._flushProperties(); }/**
         * Initializes the local storage for property accessors.
         *
         * Provided as an override point for performing any setup work prior
         * to initializing the property accessor system.
         *
         * @return {void}
         * @protected
         * @override
         */}, {
                key: "_initializeProperties", value: function _initializeProperties() {// Capture instance properties; these will be set into accessors
                  // during first flush. Don't set them here, since we want
                  // these to overwrite defaults/constructor assignments
                  for (var _p2 in this.__dataHasAccessor) { if (this.hasOwnProperty(_p2)) { this.__dataInstanceProps = this.__dataInstanceProps || {}; this.__dataInstanceProps[_p2] = this[_p2]; delete this[_p2]; } }
                }/**
         * Called at ready time with bag of instance properties that overwrote
         * accessors when the element upgraded.
         *
         * The default implementation sets these properties back into the
         * setter at ready time.  This method is provided as an override
         * point for customizing or providing more efficient initialization.
         *
         * @param {Object} props Bag of property values that were overwritten
         *   when creating property accessors.
         * @return {void}
         * @protected
         * @override
         */}, {
                key: "_initializeInstanceProperties", value: function _initializeInstanceProperties(props) { Object.assign(this, props); }/**
         * Updates the local storage for a property (via `_setPendingProperty`)
         * and enqueues a `_proeprtiesChanged` callback.
         *
         * @param {string} property Name of the property
         * @param {*} value Value to set
         * @return {void}
         * @protected
         * @override
         */}, {
                key: "_setProperty", value: function _setProperty(property, value) { if (this._setPendingProperty(property, value)) { this._invalidateProperties(); } }/**
         * Returns the value for the given property.
         * @param {string} property Name of property
         * @return {*} Value for the given property
         * @protected
         * @override
         */}, {
                key: "_getProperty", value: function _getProperty(property) { return this.__data[property]; }/* eslint-disable no-unused-vars */ /**
                                             * Updates the local storage for a property, records the previous value,
                                             * and adds it to the set of "pending changes" that will be passed to the
                                             * `_propertiesChanged` callback.  This method does not enqueue the
                                             * `_propertiesChanged` callback.
                                             *
                                             * @param {string} property Name of the property
                                             * @param {*} value Value to set
                                             * @param {boolean=} ext Not used here; affordance for closure
                                             * @return {boolean} Returns true if the property changed
                                             * @protected
                                             * @override
                                             */}, {
                key: "_setPendingProperty", value: function _setPendingProperty(property, value, ext) {
                  var old = this.__data[property]; var changed = this._shouldPropertyChange(property, value, old); if (changed) {
                    if (!this.__dataPending) { this.__dataPending = {}; this.__dataOld = {}; }// Ensure old is captured from the last turn
                    if (this.__dataOld && !(property in this.__dataOld)) { this.__dataOld[property] = old; } this.__data[property] = value; this.__dataPending[property] = value;
                  } return changed;
                }/* eslint-enable */ /**
                             * @param {string} property Name of the property
                             * @return {boolean} Returns true if the property is pending.
                             */}, {
                key: "_isPropertyPending", value: function _isPropertyPending(property) { return !!(this.__dataPending && this.__dataPending.hasOwnProperty(property)); }/**
         * Marks the properties as invalid, and enqueues an async
         * `_propertiesChanged` callback.
         *
         * @return {void}
         * @protected
         * @override
         */}, {
                key: "_invalidateProperties", value: function _invalidateProperties() { var _this2 = this; if (!this.__dataInvalid && this.__dataReady) { this.__dataInvalid = true; microtask.run(function () { if (_this2.__dataInvalid) { _this2.__dataInvalid = false; _this2._flushProperties(); } }); } }/**
         * Call to enable property accessor processing. Before this method is
         * called accessor values will be set but side effects are
         * queued. When called, any pending side effects occur immediately.
         * For elements, generally `connectedCallback` is a normal spot to do so.
         * It is safe to call this method multiple times as it only turns on
         * property accessors once.
         *
         * @return {void}
         * @protected
         * @override
         */}, {
                key: "_enableProperties", value: function _enableProperties() { if (!this.__dataEnabled) { this.__dataEnabled = true; if (this.__dataInstanceProps) { this._initializeInstanceProperties(this.__dataInstanceProps); this.__dataInstanceProps = null; } this.ready(); } }/**
         * Calls the `_propertiesChanged` callback with the current set of
         * pending changes (and old values recorded when pending changes were
         * set), and resets the pending set of changes. Generally, this method
         * should not be called in user code.
         *
         * @return {void}
         * @protected
         * @override
         */}, {
                key: "_flushProperties", value: function _flushProperties() { this.__dataCounter++; var props = this.__data; var changedProps = this.__dataPending; var old = this.__dataOld; if (this._shouldPropertiesChange(props, changedProps, old)) { this.__dataPending = null; this.__dataOld = null; this._propertiesChanged(props, changedProps, old); } this.__dataCounter--; }/**
         * Called in `_flushProperties` to determine if `_propertiesChanged`
         * should be called. The default implementation returns true if
         * properties are pending. Override to customize when
         * `_propertiesChanged` is called.
         * @param {!Object} currentProps Bag of all current accessor values
         * @param {?Object} changedProps Bag of properties changed since the last
         *   call to `_propertiesChanged`
         * @param {?Object} oldProps Bag of previous values for each property
         *   in `changedProps`
         * @return {boolean} true if changedProps is truthy
         * @override
         */}, {
                key: "_shouldPropertiesChange", value: function _shouldPropertiesChange(currentProps, changedProps, oldProps) {// eslint-disable-line no-unused-vars
                  return Boolean(changedProps);
                }/**
         * Callback called when any properties with accessors created via
         * `_createPropertyAccessor` have been set.
         *
         * @param {!Object} currentProps Bag of all current accessor values
         * @param {?Object} changedProps Bag of properties changed since the last
         *   call to `_propertiesChanged`
         * @param {?Object} oldProps Bag of previous values for each property
         *   in `changedProps`
         * @return {void}
         * @protected
         * @override
         */}, {
                key: "_propertiesChanged", value: function _propertiesChanged(currentProps, changedProps, oldProps) { }// eslint-disable-line no-unused-vars
  /**
       * Method called to determine whether a property value should be
       * considered as a change and cause the `_propertiesChanged` callback
       * to be enqueued.
       *
       * The default implementation returns `true` if a strict equality
       * check fails. The method always returns false for `NaN`.
       *
       * Override this method to e.g. provide stricter checking for
       * Objects/Arrays when using immutable patterns.
       *
       * @param {string} property Property name
       * @param {*} value New property value
       * @param {*} old Previous property value
       * @return {boolean} Whether the property should be considered a change
       *   and enqueue a `_proeprtiesChanged` callback
       * @protected
       * @override
       */}, {
                key: "_shouldPropertyChange", value: function _shouldPropertyChange(property, value, old) {
                  return (// Strict equality check
                    old !== value && (// This ensures (old==NaN, value==NaN) always returns false
                      old === old || value === value));
                }/**
         * Implements native Custom Elements `attributeChangedCallback` to
         * set an attribute value to a property via `_attributeToProperty`.
         *
         * @param {string} name Name of attribute that changed
         * @param {?string} old Old attribute value
         * @param {?string} value New attribute value
         * @param {?string} namespace Attribute namespace.
         * @return {void}
         * @suppress {missingProperties} Super may or may not implement the callback
         * @override
         */}, {
                key: "attributeChangedCallback", value: function attributeChangedCallback(name, old, value, namespace) { if (old !== value) { this._attributeToProperty(name, value); } if (babelHelpers.get(babelHelpers.getPrototypeOf(PropertiesChanged.prototype), "attributeChangedCallback", this)) { babelHelpers.get(babelHelpers.getPrototypeOf(PropertiesChanged.prototype), "attributeChangedCallback", this).call(this, name, old, value, namespace); } }/**
         * Deserializes an attribute to its associated property.
         *
         * This method calls the `_deserializeValue` method to convert the string to
         * a typed value.
         *
         * @param {string} attribute Name of attribute to deserialize.
         * @param {?string} value of the attribute.
         * @param {*=} type type to deserialize to, defaults to the value
         * returned from `typeForProperty`
         * @return {void}
         * @override
         */}, {
                key: "_attributeToProperty", value: function _attributeToProperty(attribute, value, type) { if (!this.__serializing) { var map = this.__dataAttributes; var property = map && map[attribute] || attribute; this[property] = this._deserializeValue(value, type || this.constructor.typeForProperty(property)); } }/**
         * Serializes a property to its associated attribute.
         *
         * @suppress {invalidCasts} Closure can't figure out `this` is an element.
         *
         * @param {string} property Property name to reflect.
         * @param {string=} attribute Attribute name to reflect to.
         * @param {*=} value Property value to refect.
         * @return {void}
         * @override
         */}, {
                key: "_propertyToAttribute", value: function _propertyToAttribute(property, attribute, value) { this.__serializing = true; value = arguments.length < 3 ? this[property] : value; this._valueToNodeAttribute(/** @type {!HTMLElement} */this, value, attribute || this.constructor.attributeNameForProperty(property)); this.__serializing = false; }/**
         * Sets a typed value to an HTML attribute on a node.
         *
         * This method calls the `_serializeValue` method to convert the typed
         * value to a string.  If the `_serializeValue` method returns `undefined`,
         * the attribute will be removed (this is the default for boolean
         * type `false`).
         *
         * @param {Element} node Element to set attribute to.
         * @param {*} value Value to serialize.
         * @param {string} attribute Attribute name to serialize to.
         * @return {void}
         * @override
         */}, {
                key: "_valueToNodeAttribute", value: function _valueToNodeAttribute(node, value, attribute) { var str = this._serializeValue(value); if (attribute === 'class' || attribute === 'name' || attribute === 'slot') { node =/** @type {?Element} */wrap(node); } if (str === undefined) { node.removeAttribute(attribute); } else { node.setAttribute(attribute, str); } }/**
         * Converts a typed JavaScript value to a string.
         *
         * This method is called when setting JS property values to
         * HTML attributes.  Users may override this method to provide
         * serialization for custom types.
         *
         * @param {*} value Property value to serialize.
         * @return {string | undefined} String serialized from the provided
         * property  value.
         * @override
         */}, {
                key: "_serializeValue", value: function _serializeValue(value) { switch (babelHelpers.typeof(value)) { case 'boolean': return value ? '' : undefined; default: return value != null ? value.toString() : undefined; } }/**
         * Converts a string to a typed JavaScript value.
         *
         * This method is called when reading HTML attribute values to
         * JS properties.  Users may override this method to provide
         * deserialization for custom `type`s. Types for `Boolean`, `String`,
         * and `Number` convert attributes to the expected types.
         *
         * @param {?string} value Value to deserialize.
         * @param {*=} type Type to deserialize the string to.
         * @return {*} Typed value deserialized from the provided string.
         * @override
         */}, { key: "_deserializeValue", value: function _deserializeValue(value, type) { switch (type) { case Boolean: return value !== null; case Number: return Number(value); default: return value; } } }]); return PropertiesChanged;
            }(superClass); return PropertiesChanged;
          });// that won't have their values "saved" by `saveAccessorValue`, since
        // reading from an HTMLElement accessor from the context of a prototype throws
        var nativeProperties = {}; var proto = HTMLElement.prototype; while (proto) { var props = Object.getOwnPropertyNames(proto); for (var i = 0; i < props.length; i++) { nativeProperties[props[i]] = true; } proto = Object.getPrototypeOf(proto); }/**
     * Used to save the value of a property that will be overridden with
     * an accessor. If the `model` is a prototype, the values will be saved
     * in `__dataProto`, and it's up to the user (or downstream mixin) to
     * decide how/when to set these values back into the accessors.
     * If `model` is already an instance (it has a `__data` property), then
     * the value will be set as a pending property, meaning the user should
     * call `_invalidateProperties` or `_flushProperties` to take effect
     *
     * @param {Object} model Prototype or instance
     * @param {string} property Name of property
     * @return {void}
     * @private
     */function saveAccessorValue(model, property) {// Don't read/store value for any native properties since they could throw
          if (!nativeProperties[property]) {
            var value = model[property]; if (value !== undefined) {
              if (model.__data) {// Adding accessor to instance; update the property
                // It is the user's responsibility to call _flushProperties
                model._setPendingProperty(property, value);
              } else {// Adding accessor to proto; save proto's value for instance-time use
                if (!model.__dataProto) { model.__dataProto = {}; } else if (!model.hasOwnProperty(JSCompiler_renameProperty('__dataProto', model))) { model.__dataProto = Object.create(model.__dataProto); } model.__dataProto[property] = value;
              }
            }
          }
        }/**
     * Element class mixin that provides basic meta-programming for creating one
     * or more property accessors (getter/setter pair) that enqueue an async
     * (batched) `_propertiesChanged` callback.
     *
     * For basic usage of this mixin:
     *
     * -   Declare attributes to observe via the standard `static get
     *     observedAttributes()`. Use `dash-case` attribute names to represent
     *     `camelCase` property names.
     * -   Implement the `_propertiesChanged` callback on the class.
     * -   Call `MyClass.createPropertiesForAttributes()` **once** on the class to
     *     generate property accessors for each observed attribute. This must be
     *     called before the first instance is created, for example, by calling it
     *     before calling `customElements.define`. It can also be called lazily from
     *     the element's `constructor`, as long as it's guarded so that the call is
     *     only made once, when the first instance is created.
     * -   Call `this._enableProperties()` in the element's `connectedCallback` to
     *     enable the accessors.
     *
     * Any `observedAttributes` will automatically be
     * deserialized via `attributeChangedCallback` and set to the associated
     * property using `dash-case`-to-`camelCase` convention.
     *
     * @mixinFunction
     * @polymer
     * @appliesMixin PropertiesChanged
     * @summary Element class mixin for reacting to property changes from
     *   generated property accessors.
     * @template T
     * @param {function(new:T)} superClass Class to apply mixin to.
     * @return {function(new:T)} superClass with mixin applied.
     */var PropertyAccessors = dedupingMixin(function (superClass) {/**
     * @constructor
     * @implements {Polymer_PropertiesChanged}
     * @unrestricted
     * @private
     */var base = PropertiesChanged(superClass);/**
                                                    * @polymer
                                                    * @mixinClass
                                                    * @implements {Polymer_PropertyAccessors}
                                                    * @extends {base}
                                                    * @unrestricted
                                                    */var PropertyAccessors =/*#__PURE__*/function (_base) {
            babelHelpers.inherits(PropertyAccessors, _base); function PropertyAccessors() { babelHelpers.classCallCheck(this, PropertyAccessors); return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(PropertyAccessors).apply(this, arguments)); } babelHelpers.createClass(PropertyAccessors, [{
              key: "_initializeProperties",/**
         * Overrides PropertiesChanged implementation to initialize values for
         * accessors created for values that already existed on the element
         * prototype.
         *
         * @return {void}
         * @protected
         * @override
         */value: function _initializeProperties() { if (this.__dataProto) { this._initializeProtoProperties(this.__dataProto); this.__dataProto = null; } babelHelpers.get(babelHelpers.getPrototypeOf(PropertyAccessors.prototype), "_initializeProperties", this).call(this); }/**
         * Called at instance time with bag of properties that were overwritten
         * by accessors on the prototype when accessors were created.
         *
         * The default implementation sets these properties back into the
         * setter at instance time.  This method is provided as an override
         * point for customizing or providing more efficient initialization.
         *
         * @param {Object} props Bag of property values that were overwritten
         *   when creating property accessors.
         * @return {void}
         * @protected
         * @override
         */}, {
              key: "_initializeProtoProperties", value: function _initializeProtoProperties(props) { for (var _p3 in props) { this._setProperty(_p3, props[_p3]); } }/**
         * Ensures the element has the given attribute. If it does not,
         * assigns the given value to the attribute.
         *
         * @suppress {invalidCasts} Closure can't figure out `this` is infact an
         *     element
         *
         * @param {string} attribute Name of attribute to ensure is set.
         * @param {string} value of the attribute.
         * @return {void}
         * @override
         */}, {
              key: "_ensureAttribute", value: function _ensureAttribute(attribute, value) { var el =/** @type {!HTMLElement} */this; if (!el.hasAttribute(attribute)) { this._valueToNodeAttribute(el, value, attribute); } }/**
         * Overrides PropertiesChanged implemention to serialize objects as JSON.
         *
         * @param {*} value Property value to serialize.
         * @return {string | undefined} String serialized from the provided property
         *     value.
         * @override
         */}, {
              key: "_serializeValue", value: function _serializeValue(value) {/* eslint-disable no-fallthrough */switch (babelHelpers.typeof(value)) { case 'object': if (babelHelpers.instanceof(value, Date)) { return value.toString(); } else if (value) { try { return JSON.stringify(value); } catch (x) { return ''; } } default: return babelHelpers.get(babelHelpers.getPrototypeOf(PropertyAccessors.prototype), "_serializeValue", this).call(this, value); } }/**
         * Converts a string to a typed JavaScript value.
         *
         * This method is called by Polymer when reading HTML attribute values to
         * JS properties.  Users may override this method on Polymer element
         * prototypes to provide deserialization for custom `type`s.  Note,
         * the `type` argument is the value of the `type` field provided in the
         * `properties` configuration object for a given property, and is
         * by convention the constructor for the type to deserialize.
         *
         *
         * @param {?string} value Attribute value to deserialize.
         * @param {*=} type Type to deserialize the string to.
         * @return {*} Typed value deserialized from the provided string.
         * @override
         */}, {
              key: "_deserializeValue", value: function _deserializeValue(value, type) {/**
         * @type {*}
         */var outValue; switch (type) {
                  case Object: try { outValue = JSON.parse(/** @type {string} */value); } catch (x) {// allow non-JSON literals like Strings and Numbers
                    outValue = value;
                  } break; case Array: try { outValue = JSON.parse(/** @type {string} */value); } catch (x) { outValue = null; console.warn("Polymer::Attributes: couldn't decode Array as JSON: ".concat(value)); } break; case Date: outValue = isNaN(value) ? String(value) : Number(value); outValue = new Date(outValue); break; default: outValue = babelHelpers.get(babelHelpers.getPrototypeOf(PropertyAccessors.prototype), "_deserializeValue", this).call(this, value, type); break;
                }return outValue;
              }/* eslint-enable no-fallthrough */ /**
                                            * Overrides PropertiesChanged implementation to save existing prototype
                                            * property value so that it can be reset.
                                            * @param {string} property Name of the property
                                            * @param {boolean=} readOnly When true, no setter is created
                                            *
                                            * When calling on a prototype, any overwritten values are saved in
                                            * `__dataProto`, and it is up to the subclasser to decide how/when
                                            * to set those properties back into the accessor.  When calling on an
                                            * instance, the overwritten value is set via `_setPendingProperty`,
                                            * and the user should call `_invalidateProperties` or `_flushProperties`
                                            * for the values to take effect.
                                            * @protected
                                            * @return {void}
                                            * @override
                                            */}, {
              key: "_definePropertyAccessor", value: function _definePropertyAccessor(property, readOnly) { saveAccessorValue(this, property); babelHelpers.get(babelHelpers.getPrototypeOf(PropertyAccessors.prototype), "_definePropertyAccessor", this).call(this, property, readOnly); }/**
         * Returns true if this library created an accessor for the given property.
         *
         * @param {string} property Property name
         * @return {boolean} True if an accessor was created
         * @override
         */}, {
              key: "_hasAccessor", value: function _hasAccessor(property) { return this.__dataHasAccessor && this.__dataHasAccessor[property]; }/**
         * Returns true if the specified property has a pending change.
         *
         * @param {string} prop Property name
         * @return {boolean} True if property has a pending change
         * @protected
         * @override
         */}, { key: "_isPropertyPending", value: function _isPropertyPending(prop) { return Boolean(this.__dataPending && prop in this.__dataPending); } }], [{
              key: "createPropertiesForAttributes",/**
       * Generates property accessors for all attributes in the standard
       * static `observedAttributes` array.
       *
       * Attribute names are mapped to property names using the `dash-case` to
       * `camelCase` convention
       *
       * @return {void}
       * @nocollapse
       */value: function createPropertiesForAttributes() { var a$ =/** @type {?} */this.observedAttributes; for (var _i = 0; _i < a$.length; _i++) { this.prototype._createPropertyAccessor(dashToCamelCase(a$[_i])); } }/**
         * Returns an attribute name that corresponds to the given property.
         * By default, converts camel to dash case, e.g. `fooBar` to `foo-bar`.
         * @param {string} property Property to convert
         * @return {string} Attribute name corresponding to the given property.
         *
         * @protected
         * @nocollapse
         */}, { key: "attributeNameForProperty", value: function attributeNameForProperty(property) { return camelToDashCase(property); } }]); return PropertyAccessors;
          }(base); return PropertyAccessors;
        });// This is a clear layering violation and gives favored-nation status to
        // dom-if and dom-repeat templates.  This is a conceit we're choosing to keep
        // a.) to ease 1.x backwards-compatibility due to loss of `is`, and
        // b.) to maintain if/repeat capability in parser-constrained elements
        //     (e.g. table, select) in lieu of native CE type extensions without
        //     massive new invention in this space (e.g. directive system)
        var templateExtensions = { 'dom-if': true, 'dom-repeat': true }; var placeholderBugDetect = false; var placeholderBug = false; function hasPlaceholderBug() { if (!placeholderBugDetect) { placeholderBugDetect = true; var t = document.createElement('textarea'); t.placeholder = 'a'; placeholderBug = t.placeholder === t.textContent; } return placeholderBug; }/**
     * Some browsers have a bug with textarea, where placeholder text is copied as
     * a textnode child of the textarea.
     *
     * If the placeholder is a binding, this can break template stamping in two
     * ways.
     *
     * One issue is that when the `placeholder` attribute is removed when the
     * binding is processed, the textnode child of the textarea is deleted, and the
     * template info tries to bind into that node.
     *
     * With `legacyOptimizations` in use, when the template is stamped and the
     * `textarea.textContent` binding is processed, no corresponding node is found
     * because it was removed during parsing. An exception is generated when this
     * binding is updated.
     *
     * With `legacyOptimizations` not in use, the template is cloned before
     * processing and this changes the above behavior. The cloned template also has
     * a value property set to the placeholder and textContent. This prevents the
     * removal of the textContent when the placeholder attribute is removed.
     * Therefore the exception does not occur. However, there is an extra
     * unnecessary binding.
     *
     * @param {!Node} node Check node for placeholder bug
     * @return {void}
     */function fixPlaceholder(node) { if (hasPlaceholderBug() && node.localName === 'textarea' && node.placeholder && node.placeholder === node.textContent) { node.textContent = null; } } function wrapTemplateExtension(node) { var is = node.getAttribute('is'); if (is && templateExtensions[is]) { var t = node; t.removeAttribute('is'); node = t.ownerDocument.createElement(is); t.parentNode.replaceChild(node, t); node.appendChild(t); while (t.attributes.length) { node.setAttribute(t.attributes[0].name, t.attributes[0].value); t.removeAttribute(t.attributes[0].name); } } return node; } function findTemplateNode(root, nodeInfo) {// recursively ascend tree until we hit root
          var parent = nodeInfo.parentInfo && findTemplateNode(root, nodeInfo.parentInfo);// unwind the stack, returning the indexed node at each level
          if (parent) {// note: marginally faster than indexing via childNodes
            // (http://jsperf.com/childnodes-lookup)
            for (var n = parent.firstChild, _i2 = 0; n; n = n.nextSibling) { if (nodeInfo.parentIndex === _i2++) { return n; } }
          } else { return root; }
        }// construct `$` map (from id annotations)
        function applyIdToMap(inst, map, node, nodeInfo) { if (nodeInfo.id) { map[nodeInfo.id] = node; } }// install event listeners (from event annotations)
        function applyEventListener(inst, node, nodeInfo) { if (nodeInfo.events && nodeInfo.events.length) { for (var j = 0, e$ = nodeInfo.events, e; j < e$.length && (e = e$[j]); j++) { inst._addMethodEventListenerToNode(node, e.name, e.value, inst); } } }// push configuration references at configure time
        function applyTemplateInfo(inst, node, nodeInfo, parentTemplateInfo) {
          if (nodeInfo.templateInfo) {// Give the node an instance of this templateInfo and set its parent
            node._templateInfo = nodeInfo.templateInfo; node._parentTemplateInfo = parentTemplateInfo;
          }
        } function createNodeEventHandler(context, eventName, methodName) {// Instances can optionally have a _methodHost which allows redirecting where
          // to find methods. Currently used by `templatize`.
          context = context._methodHost || context; var handler = function handler(e) { if (context[methodName]) { context[methodName](e, e.detail); } else { console.warn('listener method `' + methodName + '` not defined'); } }; return handler;
        }/**
     * Element mixin that provides basic template parsing and stamping, including
     * the following template-related features for stamped templates:
     *
     * - Declarative event listeners (`on-eventname="listener"`)
     * - Map of node id's to stamped node instances (`this.$.id`)
     * - Nested template content caching/removal and re-installation (performance
     *   optimization)
     *
     * @mixinFunction
     * @polymer
     * @summary Element class mixin that provides basic template parsing and stamping
     */var TemplateStamp = dedupingMixin(/**
                                               * @template T
                                               * @param {function(new:T)} superClass Class to apply mixin to.
                                               * @return {function(new:T)} superClass with mixin applied.
                                               */function (superClass) {/**
     * @polymer
     * @mixinClass
     * @implements {Polymer_TemplateStamp}
     */var TemplateStamp =/*#__PURE__*/function (_superClass2) {
              babelHelpers.inherits(TemplateStamp, _superClass2); function TemplateStamp() { babelHelpers.classCallCheck(this, TemplateStamp); return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(TemplateStamp).apply(this, arguments)); } babelHelpers.createClass(TemplateStamp, [{
                key: "_stampTemplate",/**
         * Clones the provided template content and returns a document fragment
         * containing the cloned dom.
         *
         * The template is parsed (once and memoized) using this library's
         * template parsing features, and provides the following value-added
         * features:
         * * Adds declarative event listeners for `on-event="handler"` attributes
         * * Generates an "id map" for all nodes with id's under `$` on returned
         *   document fragment
         * * Passes template info including `content` back to templates as
         *   `_templateInfo` (a performance optimization to avoid deep template
         *   cloning)
         *
         * Note that the memoized template parsing process is destructive to the
         * template: attributes for bindings and declarative event listeners are
         * removed after being noted in notes, and any nested `<template>.content`
         * is removed and stored in notes as well.
         *
         * @param {!HTMLTemplateElement} template Template to stamp
         * @param {TemplateInfo=} templateInfo Optional template info associated
         *   with the template to be stamped; if omitted the template will be
         *   automatically parsed.
         * @return {!StampedTemplate} Cloned template content
         * @override
         */value: function _stampTemplate(template, templateInfo) {// Polyfill support: bootstrap the template if it has not already been
                  if (template && !template.content && window.HTMLTemplateElement && HTMLTemplateElement.decorate) { HTMLTemplateElement.decorate(template); }// Accepting the `templateInfo` via an argument allows for creating
                  // instances of the `templateInfo` by the caller, useful for adding
                  // instance-time information to the prototypical data
                  templateInfo = templateInfo || this.constructor._parseTemplate(template); var nodeInfo = templateInfo.nodeInfoList; var content = templateInfo.content || template.content; var dom =/** @type {DocumentFragment} */document.importNode(content, true);// NOTE: ShadyDom optimization indicating there is an insertion point
                  dom.__noInsertionPoint = !templateInfo.hasInsertionPoint; var nodes = dom.nodeList = new Array(nodeInfo.length); dom.$ = {}; for (var _i3 = 0, l = nodeInfo.length, info; _i3 < l && (info = nodeInfo[_i3]); _i3++) { var node = nodes[_i3] = findTemplateNode(dom, info); applyIdToMap(this, dom.$, node, info); applyTemplateInfo(this, node, info, templateInfo); applyEventListener(this, node, info); } dom =/** @type {!StampedTemplate} */dom;// eslint-disable-line no-self-assign
                  return dom;
                }/**
         * Adds an event listener by method name for the event provided.
         *
         * This method generates a handler function that looks up the method
         * name at handling time.
         *
         * @param {!EventTarget} node Node to add listener on
         * @param {string} eventName Name of event
         * @param {string} methodName Name of method
         * @param {*=} context Context the method will be called on (defaults
         *   to `node`)
         * @return {Function} Generated handler function
         * @override
         */}, {
                key: "_addMethodEventListenerToNode", value: function _addMethodEventListenerToNode(node, eventName, methodName, context) { context = context || node; var handler = createNodeEventHandler(context, eventName, methodName); this._addEventListenerToNode(node, eventName, handler); return handler; }/**
         * Override point for adding custom or simulated event handling.
         *
         * @param {!EventTarget} node Node to add event listener to
         * @param {string} eventName Name of event
         * @param {function(!Event):void} handler Listener function to add
         * @return {void}
         * @override
         */}, {
                key: "_addEventListenerToNode", value: function _addEventListenerToNode(node, eventName, handler) { node.addEventListener(eventName, handler); }/**
         * Override point for adding custom or simulated event handling.
         *
         * @param {!EventTarget} node Node to remove event listener from
         * @param {string} eventName Name of event
         * @param {function(!Event):void} handler Listener function to remove
         * @return {void}
         * @override
         */}, { key: "_removeEventListenerFromNode", value: function _removeEventListenerFromNode(node, eventName, handler) { node.removeEventListener(eventName, handler); } }], [{
                key: "_parseTemplate",/**
       * Scans a template to produce template metadata.
       *
       * Template-specific metadata are stored in the object returned, and node-
       * specific metadata are stored in objects in its flattened `nodeInfoList`
       * array.  Only nodes in the template that were parsed as nodes of
       * interest contain an object in `nodeInfoList`.  Each `nodeInfo` object
       * contains an `index` (`childNodes` index in parent) and optionally
       * `parent`, which points to node info of its parent (including its index).
       *
       * The template metadata object returned from this method has the following
       * structure (many fields optional):
       *
       * ```js
       *   {
       *     // Flattened list of node metadata (for nodes that generated metadata)
       *     nodeInfoList: [
       *       {
       *         // `id` attribute for any nodes with id's for generating `$` map
       *         id: {string},
       *         // `on-event="handler"` metadata
       *         events: [
       *           {
       *             name: {string},   // event name
       *             value: {string},  // handler method name
       *           }, ...
       *         ],
       *         // Notes when the template contained a `<slot>` for shady DOM
       *         // optimization purposes
       *         hasInsertionPoint: {boolean},
       *         // For nested `<template>`` nodes, nested template metadata
       *         templateInfo: {object}, // nested template metadata
       *         // Metadata to allow efficient retrieval of instanced node
       *         // corresponding to this metadata
       *         parentInfo: {number},   // reference to parent nodeInfo>
       *         parentIndex: {number},  // index in parent's `childNodes` collection
       *         infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`
       *       },
       *       ...
       *     ],
       *     // When true, the template had the `strip-whitespace` attribute
       *     // or was nested in a template with that setting
       *     stripWhitespace: {boolean},
       *     // For nested templates, nested template content is moved into
       *     // a document fragment stored here; this is an optimization to
       *     // avoid the cost of nested template cloning
       *     content: {DocumentFragment}
       *   }
       * ```
       *
       * This method kicks off a recursive treewalk as follows:
       *
       * ```
       *    _parseTemplate <---------------------+
       *      _parseTemplateContent              |
       *        _parseTemplateNode  <------------|--+
       *          _parseTemplateNestedTemplate --+  |
       *          _parseTemplateChildNodes ---------+
       *          _parseTemplateNodeAttributes
       *            _parseTemplateNodeAttribute
       *
       * ```
       *
       * These methods may be overridden to add custom metadata about templates
       * to either `templateInfo` or `nodeInfo`.
       *
       * Note that this method may be destructive to the template, in that
       * e.g. event annotations may be removed after being noted in the
       * template metadata.
       *
       * @param {!HTMLTemplateElement} template Template to parse
       * @param {TemplateInfo=} outerTemplateInfo Template metadata from the outer
       *   template, for parsing nested templates
       * @return {!TemplateInfo} Parsed template metadata
       * @nocollapse
       */value: function _parseTemplate(template, outerTemplateInfo) {// since a template may be re-used, memo-ize metadata
                  if (!template._templateInfo) {// TODO(rictic): fix typing
                    var/** ? */templateInfo = template._templateInfo = {}; templateInfo.nodeInfoList = []; templateInfo.nestedTemplate = Boolean(outerTemplateInfo); templateInfo.stripWhiteSpace = outerTemplateInfo && outerTemplateInfo.stripWhiteSpace || template.hasAttribute('strip-whitespace');// TODO(rictic): fix typing
                    this._parseTemplateContent(template, templateInfo,/** @type {?} */{ parent: null });
                  } return template._templateInfo;
                }/**
         * See docs for _parseTemplateNode.
         *
         * @param {!HTMLTemplateElement} template .
         * @param {!TemplateInfo} templateInfo .
         * @param {!NodeInfo} nodeInfo .
         * @return {boolean} .
         * @nocollapse
         */}, {
                key: "_parseTemplateContent", value: function _parseTemplateContent(template, templateInfo, nodeInfo) { return this._parseTemplateNode(template.content, templateInfo, nodeInfo); }/**
         * Parses template node and adds template and node metadata based on
         * the current node, and its `childNodes` and `attributes`.
         *
         * This method may be overridden to add custom node or template specific
         * metadata based on this node.
         *
         * @param {Node} node Node to parse
         * @param {!TemplateInfo} templateInfo Template metadata for current template
         * @param {!NodeInfo} nodeInfo Node metadata for current template.
         * @return {boolean} `true` if the visited node added node-specific
         *   metadata to `nodeInfo`
         * @nocollapse
         */}, {
                key: "_parseTemplateNode", value: function _parseTemplateNode(node, templateInfo, nodeInfo) {
                  var noted = false; var element =/** @type {!HTMLTemplateElement} */node; if (element.localName == 'template' && !element.hasAttribute('preserve-content')) { noted = this._parseTemplateNestedTemplate(element, templateInfo, nodeInfo) || noted; } else if (element.localName === 'slot') {// For ShadyDom optimization, indicating there is an insertion point
                    templateInfo.hasInsertionPoint = true;
                  } fixPlaceholder(element); if (element.firstChild) { this._parseTemplateChildNodes(element, templateInfo, nodeInfo); } if (element.hasAttributes && element.hasAttributes()) { noted = this._parseTemplateNodeAttributes(element, templateInfo, nodeInfo) || noted; }// Checking `nodeInfo.noted` allows a child node of this node (who gets
                  // access to `parentInfo`) to cause the parent to be noted, which
                  // otherwise has no return path via `_parseTemplateChildNodes` (used by
                  // some optimizations)
                  return noted || nodeInfo.noted;
                }/**
         * Parses template child nodes for the given root node.
         *
         * This method also wraps whitelisted legacy template extensions
         * (`is="dom-if"` and `is="dom-repeat"`) with their equivalent element
         * wrappers, collapses text nodes, and strips whitespace from the template
         * if the `templateInfo.stripWhitespace` setting was provided.
         *
         * @param {Node} root Root node whose `childNodes` will be parsed
         * @param {!TemplateInfo} templateInfo Template metadata for current template
         * @param {!NodeInfo} nodeInfo Node metadata for current template.
         * @return {void}
         */}, {
                key: "_parseTemplateChildNodes", value: function _parseTemplateChildNodes(root, templateInfo, nodeInfo) {
                  if (root.localName === 'script' || root.localName === 'style') { return; } for (var node = root.firstChild, parentIndex = 0, next; node; node = next) {// Wrap templates
                    if (node.localName == 'template') { node = wrapTemplateExtension(node); }// collapse adjacent textNodes: fixes an IE issue that can cause
                    // text nodes to be inexplicably split =(
                    // note that root.normalize() should work but does not so we do this
                    // manually.
                    next = node.nextSibling; if (node.nodeType === Node.TEXT_NODE) {
                      var/** Node */n = next; while (n && n.nodeType === Node.TEXT_NODE) { node.textContent += n.textContent; next = n.nextSibling; root.removeChild(n); n = next; }// optionally strip whitespace
                      if (templateInfo.stripWhiteSpace && !node.textContent.trim()) { root.removeChild(node); continue; }
                    } var childInfo =/** @type {!NodeInfo} */{ parentIndex: parentIndex, parentInfo: nodeInfo }; if (this._parseTemplateNode(node, templateInfo, childInfo)) { childInfo.infoIndex = templateInfo.nodeInfoList.push(childInfo) - 1; }// Increment if not removed
                    if (node.parentNode) { parentIndex++; }
                  }
                }/**
         * Parses template content for the given nested `<template>`.
         *
         * Nested template info is stored as `templateInfo` in the current node's
         * `nodeInfo`. `template.content` is removed and stored in `templateInfo`.
         * It will then be the responsibility of the host to set it back to the
         * template and for users stamping nested templates to use the
         * `_contentForTemplate` method to retrieve the content for this template
         * (an optimization to avoid the cost of cloning nested template content).
         *
         * @param {HTMLTemplateElement} node Node to parse (a <template>)
         * @param {TemplateInfo} outerTemplateInfo Template metadata for current template
         *   that includes the template `node`
         * @param {!NodeInfo} nodeInfo Node metadata for current template.
         * @return {boolean} `true` if the visited node added node-specific
         *   metadata to `nodeInfo`
         * @nocollapse
         */}, {
                key: "_parseTemplateNestedTemplate", value: function _parseTemplateNestedTemplate(node, outerTemplateInfo, nodeInfo) {// TODO(rictic): the type of node should be non-null
                  var element =/** @type {!HTMLTemplateElement} */node; var templateInfo = this._parseTemplate(element, outerTemplateInfo); var content = templateInfo.content = element.content.ownerDocument.createDocumentFragment(); content.appendChild(element.content); nodeInfo.templateInfo = templateInfo; return true;
                }/**
         * Parses template node attributes and adds node metadata to `nodeInfo`
         * for nodes of interest.
         *
         * @param {Element} node Node to parse
         * @param {!TemplateInfo} templateInfo Template metadata for current
         *     template
         * @param {!NodeInfo} nodeInfo Node metadata for current template.
         * @return {boolean} `true` if the visited node added node-specific
         *   metadata to `nodeInfo`
         * @nocollapse
         */}, {
                key: "_parseTemplateNodeAttributes", value: function _parseTemplateNodeAttributes(node, templateInfo, nodeInfo) {// Make copy of original attribute list, since the order may change
                  // as attributes are added and removed
                  var noted = false; var attrs = Array.from(node.attributes); for (var _i4 = attrs.length - 1, a; a = attrs[_i4]; _i4--) { noted = this._parseTemplateNodeAttribute(node, templateInfo, nodeInfo, a.name, a.value) || noted; } return noted;
                }/**
         * Parses a single template node attribute and adds node metadata to
         * `nodeInfo` for attributes of interest.
         *
         * This implementation adds metadata for `on-event="handler"` attributes
         * and `id` attributes.
         *
         * @param {Element} node Node to parse
         * @param {!TemplateInfo} templateInfo Template metadata for current template
         * @param {!NodeInfo} nodeInfo Node metadata for current template.
         * @param {string} name Attribute name
         * @param {string} value Attribute value
         * @return {boolean} `true` if the visited node added node-specific
         *   metadata to `nodeInfo`
         * @nocollapse
         */}, {
                key: "_parseTemplateNodeAttribute", value: function _parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value) {// events (on-*)
                  if (name.slice(0, 3) === 'on-') { node.removeAttribute(name); nodeInfo.events = nodeInfo.events || []; nodeInfo.events.push({ name: name.slice(3), value: value }); return true; }// static id
                  else if (name === 'id') { nodeInfo.id = value; return true; } return false;
                }/**
         * Returns the `content` document fragment for a given template.
         *
         * For nested templates, Polymer performs an optimization to cache nested
         * template content to avoid the cost of cloning deeply nested templates.
         * This method retrieves the cached content for a given template.
         *
         * @param {HTMLTemplateElement} template Template to retrieve `content` for
         * @return {DocumentFragment} Content fragment
         * @nocollapse
         */}, { key: "_contentForTemplate", value: function _contentForTemplate(template) { var templateInfo =/** @type {HTMLTemplateElementWithInfo} */template._templateInfo; return templateInfo && templateInfo.content || template.content; } }]); return TemplateStamp;
            }(superClass); return TemplateStamp;
          });// from multiple properties in the same turn
        var dedupeId$1 = 0; var NOOP = [];/**
                    * Property effect types; effects are stored on the prototype using these keys
                    * @enum {string}
                    */var TYPES = { COMPUTE: '__computeEffects', REFLECT: '__reflectEffects', NOTIFY: '__notifyEffects', PROPAGATE: '__propagateEffects', OBSERVE: '__observeEffects', READ_ONLY: '__readOnly' }; var COMPUTE_INFO = '__computeInfo';/** @const {!RegExp} */var capitalAttributeRegex = /[A-Z]/;/**
                                          * @typedef {{
                                          * name: (string | undefined),
                                          * structured: (boolean | undefined),
                                          * wildcard: (boolean | undefined)
                                          * }}
                                          */var DataTrigger;//eslint-disable-line no-unused-vars
  /**
   * @typedef {{
   * info: ?,
   * trigger: (!DataTrigger | undefined),
   * fn: (!Function | undefined)
   * }}
   */var DataEffect;//eslint-disable-line no-unused-vars
  /**
   * Ensures that the model has an own-property map of effects for the given type.
   * The model may be a prototype or an instance.
   *
   * Property effects are stored as arrays of effects by property in a map,
   * by named type on the model. e.g.
   *
   *   __computeEffects: {
   *     foo: [ ... ],
   *     bar: [ ... ]
   *   }
   *
   * If the model does not yet have an effect map for the type, one is created
   * and returned.  If it does, but it is not an own property (i.e. the
   * prototype had effects), the the map is deeply cloned and the copy is
   * set on the model and returned, ready for new effects to be added.
   *
   * @param {Object} model Prototype or instance
   * @param {string} type Property effect type
   * @param {boolean=} cloneArrays Clone any arrays assigned to the map when
   *   extending a superclass map onto this subclass
   * @return {Object} The own-property map of effects for the given type
   * @private
   */function ensureOwnEffectMap(model, type, cloneArrays) {
          var effects = model[type]; if (!effects) { effects = model[type] = {}; } else if (!model.hasOwnProperty(type)) {
            effects = model[type] = Object.create(model[type]); if (cloneArrays) {
              for (var _p4 in effects) {
                var protoFx = effects[_p4];// Perf optimization over Array.slice
                var instFx = effects[_p4] = Array(protoFx.length); for (var _i5 = 0; _i5 < protoFx.length; _i5++) { instFx[_i5] = protoFx[_i5]; }
              }
            }
          } return effects;
        }// -- effects ----------------------------------------------
  /**
   * Runs all effects of a given type for the given set of property changes
   * on an instance.
   *
   * @param {!Polymer_PropertyEffects} inst The instance with effects to run
   * @param {?Object} effects Object map of property-to-Array of effects
   * @param {?Object} props Bag of current property changes
   * @param {?Object=} oldProps Bag of previous values for changed properties
   * @param {boolean=} hasPaths True with `props` contains one or more paths
   * @param {*=} extraArgs Additional metadata to pass to effect function
   * @return {boolean} True if an effect ran for this property
   * @private
   */function runEffects(inst, effects, props, oldProps, hasPaths, extraArgs) {
          if (effects) {
            var ran = false; var id = dedupeId$1++; for (var prop in props) {// Inline `runEffectsForProperty` for perf.
              var rootProperty = hasPaths ? root(prop) : prop; var fxs = effects[rootProperty]; if (fxs) { for (var _i6 = 0, l = fxs.length, fx; _i6 < l && (fx = fxs[_i6]); _i6++) { if ((!fx.info || fx.info.lastRun !== id) && (!hasPaths || pathMatchesTrigger(prop, fx.trigger))) { if (fx.info) { fx.info.lastRun = id; } fx.fn(inst, prop, props, oldProps, fx.info, hasPaths, extraArgs); ran = true; } } }
            } return ran;
          } return false;
        }/**
     * Runs a list of effects for a given property.
     *
     * @param {!Polymer_PropertyEffects} inst The instance with effects to run
     * @param {!Object} effects Object map of property-to-Array of effects
     * @param {number} dedupeId Counter used for de-duping effects
     * @param {string} prop Name of changed property
     * @param {*} props Changed properties
     * @param {*} oldProps Old properties
     * @param {boolean=} hasPaths True with `props` contains one or more paths
     * @param {*=} extraArgs Additional metadata to pass to effect function
     * @return {boolean} True if an effect ran for this property
     * @private
     */function runEffectsForProperty(inst, effects, dedupeId, prop, props, oldProps, hasPaths, extraArgs) { var ran = false; var rootProperty = hasPaths ? root(prop) : prop; var fxs = effects[rootProperty]; if (fxs) { for (var _i7 = 0, l = fxs.length, fx; _i7 < l && (fx = fxs[_i7]); _i7++) { if ((!fx.info || fx.info.lastRun !== dedupeId) && (!hasPaths || pathMatchesTrigger(prop, fx.trigger))) { if (fx.info) { fx.info.lastRun = dedupeId; } fx.fn(inst, prop, props, oldProps, fx.info, hasPaths, extraArgs); ran = true; } } } return ran; }/**
     * Determines whether a property/path that has changed matches the trigger
     * criteria for an effect.  A trigger is a descriptor with the following
     * structure, which matches the descriptors returned from `parseArg`.
     * e.g. for `foo.bar.*`:
     * ```
     * trigger: {
     *   name: 'a.b',
     *   structured: true,
     *   wildcard: true
     * }
     * ```
     * If no trigger is given, the path is deemed to match.
     *
     * @param {string} path Path or property that changed
     * @param {?DataTrigger} trigger Descriptor
     * @return {boolean} Whether the path matched the trigger
     */function pathMatchesTrigger(path, trigger) { if (trigger) { var triggerPath =/** @type {string} */trigger.name; return triggerPath == path || !!(trigger.structured && isAncestor(triggerPath, path)) || !!(trigger.wildcard && isDescendant(triggerPath, path)); } else { return true; } }/**
     * Implements the "observer" effect.
     *
     * Calls the method with `info.methodName` on the instance, passing the
     * new and old values.
     *
     * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on
     * @param {string} property Name of property
     * @param {Object} props Bag of current property changes
     * @param {Object} oldProps Bag of previous values for changed properties
     * @param {?} info Effect metadata
     * @return {void}
     * @private
     */function runObserverEffect(inst, property, props, oldProps, info) { var fn = typeof info.method === "string" ? inst[info.method] : info.method; var changedProp = info.property; if (fn) { fn.call(inst, inst.__data[changedProp], oldProps[changedProp]); } else if (!info.dynamicFn) { console.warn('observer method `' + info.method + '` not defined'); } }/**
     * Runs "notify" effects for a set of changed properties.
     *
     * This method differs from the generic `runEffects` method in that it
     * will dispatch path notification events in the case that the property
     * changed was a path and the root property for that path didn't have a
     * "notify" effect.  This is to maintain 1.0 behavior that did not require
     * `notify: true` to ensure object sub-property notifications were
     * sent.
     *
     * @param {!Polymer_PropertyEffects} inst The instance with effects to run
     * @param {Object} notifyProps Bag of properties to notify
     * @param {Object} props Bag of current property changes
     * @param {Object} oldProps Bag of previous values for changed properties
     * @param {boolean} hasPaths True with `props` contains one or more paths
     * @return {void}
     * @private
     */function runNotifyEffects(inst, notifyProps, props, oldProps, hasPaths) {// Notify
          var fxs = inst[TYPES.NOTIFY]; var notified; var id = dedupeId$1++;// Try normal notify effects; if none, fall back to try path notification
          for (var prop in notifyProps) { if (notifyProps[prop]) { if (fxs && runEffectsForProperty(inst, fxs, id, prop, props, oldProps, hasPaths)) { notified = true; } else if (hasPaths && notifyPath(inst, prop, props)) { notified = true; } } }// Flush host if we actually notified and host was batching
          // And the host has already initialized clients; this prevents
          // an issue with a host observing data changes before clients are ready.
          var host; if (notified && (host = inst.__dataHost) && host._invalidateProperties) { host._invalidateProperties(); }
        }/**
     * Dispatches {property}-changed events with path information in the detail
     * object to indicate a sub-path of the property was changed.
     *
     * @param {!Polymer_PropertyEffects} inst The element from which to fire the
     *     event
     * @param {string} path The path that was changed
     * @param {Object} props Bag of current property changes
     * @return {boolean} Returns true if the path was notified
     * @private
     */function notifyPath(inst, path, props) { var rootProperty = root(path); if (rootProperty !== path) { var eventName = camelToDashCase(rootProperty) + '-changed'; dispatchNotifyEvent(inst, eventName, props[path], path); return true; } return false; }/**
     * Dispatches {property}-changed events to indicate a property (or path)
     * changed.
     *
     * @param {!Polymer_PropertyEffects} inst The element from which to fire the
     *     event
     * @param {string} eventName The name of the event to send
     *     ('{property}-changed')
     * @param {*} value The value of the changed property
     * @param {string | null | undefined} path If a sub-path of this property
     *     changed, the path that changed (optional).
     * @return {void}
     * @private
     * @suppress {invalidCasts}
     */function dispatchNotifyEvent(inst, eventName, value, path) {
          var detail = { value: value, queueProperty: true }; if (path) { detail.path = path; }// As a performance optimization, we could elide the wrap here since notifying
          // events are non-bubbling and shouldn't need retargeting. However, a very
          // small number of internal tests failed in obscure ways, which may indicate
          // user code relied on timing differences resulting from ShadyDOM flushing
          // as a result of the wrapped `dispatchEvent`.
          wrap(/** @type {!HTMLElement} */inst).dispatchEvent(new CustomEvent(eventName, { detail: detail }));
        }/**
     * Implements the "notify" effect.
     *
     * Dispatches a non-bubbling event named `info.eventName` on the instance
     * with a detail object containing the new `value`.
     *
     * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on
     * @param {string} property Name of property
     * @param {Object} props Bag of current property changes
     * @param {Object} oldProps Bag of previous values for changed properties
     * @param {?} info Effect metadata
     * @param {boolean} hasPaths True with `props` contains one or more paths
     * @return {void}
     * @private
     */function runNotifyEffect(inst, property, props, oldProps, info, hasPaths) {
          var rootProperty = hasPaths ? root(property) : property; var path = rootProperty != property ? property : null; var value = path ? _get(inst, path) : inst.__data[property]; if (path && value === undefined) {
            value = props[property];// specifically for .splices
          } dispatchNotifyEvent(inst, info.eventName, value, path);
        }/**
     * Handler function for 2-way notification events. Receives context
     * information captured in the `addNotifyListener` closure from the
     * `__notifyListeners` metadata.
     *
     * Sets the value of the notified property to the host property or path.  If
     * the event contained path information, translate that path to the host
     * scope's name for that path first.
     *
     * @param {CustomEvent} event Notification event (e.g. '<property>-changed')
     * @param {!Polymer_PropertyEffects} inst Host element instance handling the
     *     notification event
     * @param {string} fromProp Child element property that was bound
     * @param {string} toPath Host property/path that was bound
     * @param {boolean} negate Whether the binding was negated
     * @return {void}
     * @private
     */function handleNotification(event, inst, fromProp, toPath, negate) { var value; var detail =/** @type {Object} */event.detail; var fromPath = detail && detail.path; if (fromPath) { toPath = translate(fromProp, toPath, fromPath); value = detail && detail.value; } else { value = event.currentTarget[fromProp]; } value = negate ? !value : value; if (!inst[TYPES.READ_ONLY] || !inst[TYPES.READ_ONLY][toPath]) { if (inst._setPendingPropertyOrPath(toPath, value, true, Boolean(fromPath)) && (!detail || !detail.queueProperty)) { inst._invalidateProperties(); } } }/**
     * Implements the "reflect" effect.
     *
     * Sets the attribute named `info.attrName` to the given property value.
     *
     * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on
     * @param {string} property Name of property
     * @param {Object} props Bag of current property changes
     * @param {Object} oldProps Bag of previous values for changed properties
     * @param {?} info Effect metadata
     * @return {void}
     * @private
     */function runReflectEffect(inst, property, props, oldProps, info) { var value = inst.__data[property]; if (sanitizeDOMValue) { value = sanitizeDOMValue(value, info.attrName, 'attribute',/** @type {Node} */inst); } inst._propertyToAttribute(property, info.attrName, value); }/**
     * Runs "computed" effects for a set of changed properties.
     *
     * This method differs from the generic `runEffects` method in that it
     * continues to run computed effects based on the output of each pass until
     * there are no more newly computed properties.  This ensures that all
     * properties that will be computed by the initial set of changes are
     * computed before other effects (binding propagation, observers, and notify)
     * run.
     *
     * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on
     * @param {?Object} changedProps Bag of changed properties
     * @param {?Object} oldProps Bag of previous values for changed properties
     * @param {boolean} hasPaths True with `props` contains one or more paths
     * @return {void}
     * @private
     */function runComputedEffects(inst, changedProps, oldProps, hasPaths) {
          var computeEffects = inst[TYPES.COMPUTE]; if (computeEffects) {
            if (orderedComputed) {// Runs computed effects in efficient order by keeping a topologically-
              // sorted queue of compute effects to run, and inserting subsequently
              // invalidated effects as they are run
              dedupeId$1++; var order = getComputedOrder(inst); var queue = []; for (var _p5 in changedProps) { enqueueEffectsFor(_p5, computeEffects, queue, order, hasPaths); } var info; while (info = queue.shift()) { if (runComputedEffect(inst, '', changedProps, oldProps, info)) { enqueueEffectsFor(info.methodInfo, computeEffects, queue, order, hasPaths); } } Object.assign(/** @type {!Object} */oldProps, inst.__dataOld); Object.assign(/** @type {!Object} */changedProps, inst.__dataPending); inst.__dataPending = null;
            } else {// Original Polymer 2.x computed effects order, which continues running
              // effects until no further computed properties have been invalidated
              var inputProps = changedProps; while (runEffects(inst, computeEffects, inputProps, oldProps, hasPaths)) { Object.assign(/** @type {!Object} */oldProps, inst.__dataOld); Object.assign(/** @type {!Object} */changedProps, inst.__dataPending); inputProps = inst.__dataPending; inst.__dataPending = null; }
            }
          }
        }/**
     * Inserts a computed effect into a queue, given the specified order. Performs
     * the insert using a binary search.
     *
     * Used by `orderedComputed: true` computed property algorithm.
     *
     * @param {Object} info Property effects metadata
     * @param {Array<Object>} queue Ordered queue of effects
     * @param {Map<string,number>} order Map of computed property name->topological
     *   sort order
     */var insertEffect = function insertEffect(info, queue, order) {
          var start = 0; var end = queue.length - 1; var idx = -1; while (start <= end) {
            var mid = start + end >> 1;// Note `methodInfo` is where the computed property name is stored in
            // the effect metadata
            var cmp = order.get(queue[mid].methodInfo) - order.get(info.methodInfo); if (cmp < 0) { start = mid + 1; } else if (cmp > 0) { end = mid - 1; } else { idx = mid; break; }
          } if (idx < 0) { idx = end + 1; } queue.splice(idx, 0, info);
        };/**
      * Inserts all downstream computed effects invalidated by the specified property
      * into the topologically-sorted queue of effects to be run.
      *
      * Used by `orderedComputed: true` computed property algorithm.
      *
      * @param {string} prop Property name
      * @param {Object} computeEffects Computed effects for this element
      * @param {Array<Object>} queue Topologically-sorted queue of computed effects
      *   to be run
      * @param {Map<string,number>} order Map of computed property name->topological
      *   sort order
      * @param {boolean} hasPaths True with `changedProps` contains one or more paths
      */var enqueueEffectsFor = function enqueueEffectsFor(prop, computeEffects, queue, order, hasPaths) { var rootProperty = hasPaths ? root(prop) : prop; var fxs = computeEffects[rootProperty]; if (fxs) { for (var _i8 = 0; _i8 < fxs.length; _i8++) { var fx = fxs[_i8]; if (fx.info.lastRun !== dedupeId$1 && (!hasPaths || pathMatchesTrigger(prop, fx.trigger))) { fx.info.lastRun = dedupeId$1; insertEffect(fx.info, queue, order); } } } };/**
      * Generates and retrieves a memoized map of computed property name to its
      * topologically-sorted order.
      *
      * The map is generated by first assigning a "dependency count" to each property
      * (defined as number properties it depends on, including its method for
      * "dynamic functions"). Any properties that have no dependencies are added to
      * the `ready` queue, which are properties whose order can be added to the final
      * order map. Properties are popped off the `ready` queue one by one and a.) added as
      * the next property in the order map, and b.) each property that it is a
      * dependency for has its dep count decremented (and if that property's dep
      * count goes to zero, it is added to the `ready` queue), until all properties
      * have been visited and ordered.
      *
      * Used by `orderedComputed: true` computed property algorithm.
      *
      * @param {!Polymer_PropertyEffects} inst The instance to retrieve the computed
      *   effect order for.
      * @return {Map<string,number>} Map of computed property name->topological sort
      *   order
      */function getComputedOrder(inst) {
          var ordered = inst.constructor.__orderedComputedDeps; if (!ordered) {
            (function () {
              ordered = new Map(); var effects = inst[TYPES.COMPUTE]; var _dependencyCounts = dependencyCounts(inst), counts = _dependencyCounts.counts, ready = _dependencyCounts.ready, total = _dependencyCounts.total; var curr; while (curr = ready.shift()) {
                ordered.set(curr, ordered.size); var computedByCurr = effects[curr]; if (computedByCurr) {
                  computedByCurr.forEach(function (fx) {// Note `methodInfo` is where the computed property name is stored
                    var computedProp = fx.info.methodInfo; --total; if (--counts[computedProp] === 0) { ready.push(computedProp); }
                  });
                }
              } if (total !== 0) { var el =/** @type {HTMLElement} */inst; console.warn("Computed graph for ".concat(el.localName, " incomplete; circular?")); } inst.constructor.__orderedComputedDeps = ordered;
            })();
          } return ordered;
        }/**
     * Generates a map of property-to-dependency count (`counts`, where "dependency
     * count" is the number of dependencies a given property has assuming it is a
     * computed property, otherwise 0).  It also returns a pre-populated list of
     * `ready` properties that have no dependencies and a `total` count, which is
     * used for error-checking the graph.
     *
     * Used by `orderedComputed: true` computed property algorithm.
     *
     * @param {!Polymer_PropertyEffects} inst The instance to generate dependency
     *   counts for.
     * @return {!Object} Object containing `counts` map (property-to-dependency
     *   count) and pre-populated `ready` array of properties that had zero
     *   dependencies.
     */function dependencyCounts(inst) {
          var infoForComputed = inst[COMPUTE_INFO]; var counts = {}; var computedDeps = inst[TYPES.COMPUTE]; var ready = []; var total = 0;// Count dependencies for each computed property
          for (var _p6 in infoForComputed) {
            var info = infoForComputed[_p6];// Be sure to add the method name itself in case of "dynamic functions"
            total += counts[_p6] = info.args.filter(function (a) { return !a.literal; }).length + (info.dynamicFn ? 1 : 0);
          }// Build list of ready properties (that aren't themselves computed)
          for (var _p7 in computedDeps) { if (!infoForComputed[_p7]) { ready.push(_p7); } } return { counts: counts, ready: ready, total: total };
        }/**
     * Implements the "computed property" effect by running the method with the
     * values of the arguments specified in the `info` object and setting the
     * return value to the computed property specified.
     *
     * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on
     * @param {string} property Name of property
     * @param {?Object} changedProps Bag of current property changes
     * @param {?Object} oldProps Bag of previous values for changed properties
     * @param {?} info Effect metadata
     * @return {boolean} True when the property being computed changed
     * @private
     */function runComputedEffect(inst, property, changedProps, oldProps, info) {// Dirty check dependencies and run if any invalid
          var result = runMethodEffect(inst, property, changedProps, oldProps, info);// Abort if method returns a no-op result
          if (result === NOOP) { return false; } var computedProp = info.methodInfo; if (inst.__dataHasAccessor && inst.__dataHasAccessor[computedProp]) { return inst._setPendingProperty(computedProp, result, true); } else { inst[computedProp] = result; return false; }
        }/**
     * Computes path changes based on path links set up using the `linkPaths`
     * API.
     *
     * @param {!Polymer_PropertyEffects} inst The instance whose props are changing
     * @param {string} path Path that has changed
     * @param {*} value Value of changed path
     * @return {void}
     * @private
     */function computeLinkedPaths(inst, path, value) { var links = inst.__dataLinkedPaths; if (links) { var link; for (var a in links) { var b = links[a]; if (isDescendant(a, path)) { link = translate(a, b, path); inst._setPendingPropertyOrPath(link, value, true, true); } else if (isDescendant(b, path)) { link = translate(b, a, path); inst._setPendingPropertyOrPath(link, value, true, true); } } } }// -- bindings ----------------------------------------------
  /**
   * Adds binding metadata to the current `nodeInfo`, and binding effects
   * for all part dependencies to `templateInfo`.
   *
   * @param {Function} constructor Class that `_parseTemplate` is currently
   *   running on
   * @param {TemplateInfo} templateInfo Template metadata for current template
   * @param {NodeInfo} nodeInfo Node metadata for current template node
   * @param {string} kind Binding kind, either 'property', 'attribute', or 'text'
   * @param {string} target Target property name
   * @param {!Array<!BindingPart>} parts Array of binding part metadata
   * @param {string=} literal Literal text surrounding binding parts (specified
   *   only for 'property' bindings, since these must be initialized as part
   *   of boot-up)
   * @return {void}
   * @private
   */function addBinding(constructor, templateInfo, nodeInfo, kind, target, parts, literal) {// Create binding metadata and add to nodeInfo
          nodeInfo.bindings = nodeInfo.bindings || []; var/** Binding */binding = { kind: kind, target: target, parts: parts, literal: literal, isCompound: parts.length !== 1 }; nodeInfo.bindings.push(binding);// Add listener info to binding metadata
          if (shouldAddListener(binding)) { var _binding$parts$ = binding.parts[0], event = _binding$parts$.event, negate = _binding$parts$.negate; binding.listenerEvent = event || camelToDashCase(target) + '-changed'; binding.listenerNegate = negate; }// Add "propagate" property effects to templateInfo
          var index = templateInfo.nodeInfoList.length; for (var _i9 = 0; _i9 < binding.parts.length; _i9++) { var part = binding.parts[_i9]; part.compoundIndex = _i9; addEffectForBindingPart(constructor, templateInfo, binding, part, index); }
        }/**
     * Adds property effects to the given `templateInfo` for the given binding
     * part.
     *
     * @param {Function} constructor Class that `_parseTemplate` is currently
     *   running on
     * @param {TemplateInfo} templateInfo Template metadata for current template
     * @param {!Binding} binding Binding metadata
     * @param {!BindingPart} part Binding part metadata
     * @param {number} index Index into `nodeInfoList` for this node
     * @return {void}
     */function addEffectForBindingPart(constructor, templateInfo, binding, part, index) { if (!part.literal) { if (binding.kind === 'attribute' && binding.target[0] === '-') { console.warn('Cannot set attribute ' + binding.target + ' because "-" is not a valid attribute starting character'); } else { var dependencies = part.dependencies; var info = { index: index, binding: binding, part: part, evaluator: constructor }; for (var j = 0; j < dependencies.length; j++) { var trigger = dependencies[j]; if (typeof trigger == 'string') { trigger = parseArg(trigger); trigger.wildcard = true; } constructor._addTemplatePropertyEffect(templateInfo, trigger.rootProperty, { fn: runBindingEffect, info: info, trigger: trigger }); } } } }/**
     * Implements the "binding" (property/path binding) effect.
     *
     * Note that binding syntax is overridable via `_parseBindings` and
     * `_evaluateBinding`.  This method will call `_evaluateBinding` for any
     * non-literal parts returned from `_parseBindings`.  However,
     * there is no support for _path_ bindings via custom binding parts,
     * as this is specific to Polymer's path binding syntax.
     *
     * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on
     * @param {string} path Name of property
     * @param {Object} props Bag of current property changes
     * @param {Object} oldProps Bag of previous values for changed properties
     * @param {?} info Effect metadata
     * @param {boolean} hasPaths True with `props` contains one or more paths
     * @param {Array} nodeList List of nodes associated with `nodeInfoList` template
     *   metadata
     * @return {void}
     * @private
     */function runBindingEffect(inst, path, props, oldProps, info, hasPaths, nodeList) {
          var node = nodeList[info.index]; var binding = info.binding; var part = info.part;// Subpath notification: transform path and set to client
          // e.g.: foo="{{obj.sub}}", path: 'obj.sub.prop', set 'foo.prop'=obj.sub.prop
          if (hasPaths && part.source && path.length > part.source.length && binding.kind == 'property' && !binding.isCompound && node.__isPropertyEffectsClient && node.__dataHasAccessor && node.__dataHasAccessor[binding.target]) { var value = props[path]; path = translate(part.source, binding.target, path); if (node._setPendingPropertyOrPath(path, value, false, true)) { inst._enqueueClient(node); } } else {
            var _value2 = info.evaluator._evaluateBinding(inst, part, path, props, oldProps, hasPaths);// Propagate value to child
            // Abort if value is a no-op result
            if (_value2 !== NOOP) { applyBindingValue(inst, node, binding, part, _value2); }
          }
        }/**
     * Sets the value for an "binding" (binding) effect to a node,
     * either as a property or attribute.
     *
     * @param {!Polymer_PropertyEffects} inst The instance owning the binding effect
     * @param {Node} node Target node for binding
     * @param {!Binding} binding Binding metadata
     * @param {!BindingPart} part Binding part metadata
     * @param {*} value Value to set
     * @return {void}
     * @private
     */function applyBindingValue(inst, node, binding, part, value) {
          value = computeBindingValue(node, value, binding, part); if (sanitizeDOMValue) { value = sanitizeDOMValue(value, binding.target, binding.kind, node); } if (binding.kind == 'attribute') {// Attribute binding
            inst._valueToNodeAttribute(/** @type {Element} */node, value, binding.target);
          } else {// Property binding
            var prop = binding.target; if (node.__isPropertyEffectsClient && node.__dataHasAccessor && node.__dataHasAccessor[prop]) { if (!node[TYPES.READ_ONLY] || !node[TYPES.READ_ONLY][prop]) { if (node._setPendingProperty(prop, value)) { inst._enqueueClient(node); } } } else {// In legacy no-batching mode, bindings applied before dataReady are
              // equivalent to the "apply config" phase, which only set managed props
              inst._setUnmanagedPropertyToNode(node, prop, value);
            }
          }
        }/**
     * Transforms an "binding" effect value based on compound & negation
     * effect metadata, as well as handling for special-case properties
     *
     * @param {Node} node Node the value will be set to
     * @param {*} value Value to set
     * @param {!Binding} binding Binding metadata
     * @param {!BindingPart} part Binding part metadata
     * @return {*} Transformed value to set
     * @private
     */function computeBindingValue(node, value, binding, part) {
          if (binding.isCompound) { var storage = node.__dataCompoundStorage[binding.target]; storage[part.compoundIndex] = value; value = storage.join(''); } if (binding.kind !== 'attribute') {// Some browsers serialize `undefined` to `"undefined"`
            if (binding.target === 'textContent' || binding.target === 'value' && (node.localName === 'input' || node.localName === 'textarea')) { value = value == undefined ? '' : value; }
          } return value;
        }/**
     * Returns true if a binding's metadata meets all the requirements to allow
     * 2-way binding, and therefore a `<property>-changed` event listener should be
     * added:
     * - used curly braces
     * - is a property (not attribute) binding
     * - is not a textContent binding
     * - is not compound
     *
     * @param {!Binding} binding Binding metadata
     * @return {boolean} True if 2-way listener should be added
     * @private
     */function shouldAddListener(binding) { return Boolean(binding.target) && binding.kind != 'attribute' && binding.kind != 'text' && !binding.isCompound && binding.parts[0].mode === '{'; }/**
     * Setup compound binding storage structures, notify listeners, and dataHost
     * references onto the bound nodeList.
     *
     * @param {!Polymer_PropertyEffects} inst Instance that bas been previously
     *     bound
     * @param {TemplateInfo} templateInfo Template metadata
     * @return {void}
     * @private
     */function setupBindings(inst, templateInfo) {// Setup compound storage, dataHost, and notify listeners
          var nodeList = templateInfo.nodeList, nodeInfoList = templateInfo.nodeInfoList; if (nodeInfoList.length) {
            for (var _i10 = 0; _i10 < nodeInfoList.length; _i10++) {
              var info = nodeInfoList[_i10]; var node = nodeList[_i10]; var bindings = info.bindings; if (bindings) { for (var _i11 = 0; _i11 < bindings.length; _i11++) { var binding = bindings[_i11]; setupCompoundStorage(node, binding); addNotifyListener(node, inst, binding); } }// This ensures all bound elements have a host set, regardless
              // of whether they upgrade synchronous to creation
              node.__dataHost = inst;
            }
          }
        }/**
     * Initializes `__dataCompoundStorage` local storage on a bound node with
     * initial literal data for compound bindings, and sets the joined
     * literal parts to the bound property.
     *
     * When changes to compound parts occur, they are first set into the compound
     * storage array for that property, and then the array is joined to result in
     * the final value set to the property/attribute.
     *
     * @param {Node} node Bound node to initialize
     * @param {Binding} binding Binding metadata
     * @return {void}
     * @private
     */function setupCompoundStorage(node, binding) {
          if (binding.isCompound) {// Create compound storage map
            var storage = node.__dataCompoundStorage || (node.__dataCompoundStorage = {}); var parts = binding.parts;// Copy literals from parts into storage for this binding
            var literals = new Array(parts.length); for (var j = 0; j < parts.length; j++) { literals[j] = parts[j].literal; } var target = binding.target; storage[target] = literals;// Configure properties with their literal parts
            if (binding.literal && binding.kind == 'property') {// Note, className needs style scoping so this needs wrapping.
              // We may also want to consider doing this for `textContent` and
              // `innerHTML`.
              if (target === 'className') { node = wrap(node); } node[target] = binding.literal;
            }
          }
        }/**
     * Adds a 2-way binding notification event listener to the node specified
     *
     * @param {Object} node Child element to add listener to
     * @param {!Polymer_PropertyEffects} inst Host element instance to handle
     *     notification event
     * @param {Binding} binding Binding metadata
     * @return {void}
     * @private
     */function addNotifyListener(node, inst, binding) { if (binding.listenerEvent) { var part = binding.parts[0]; node.addEventListener(binding.listenerEvent, function (e) { handleNotification(e, inst, binding.target, part.source, part.negate); }); } }// -- for method-based effects (complexObserver & computed) --------------
  /**
   * Adds property effects for each argument in the method signature (and
   * optionally, for the method name if `dynamic` is true) that calls the
   * provided effect function.
   *
   * @param {Element | Object} model Prototype or instance
   * @param {!MethodSignature} sig Method signature metadata
   * @param {string} type Type of property effect to add
   * @param {Function} effectFn Function to run when arguments change
   * @param {*=} methodInfo Effect-specific information to be included in
   *   method effect metadata
   * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether
   *   method names should be included as a dependency to the effect. Note,
   *   defaults to true if the signature is static (sig.static is true).
   * @return {!Object} Effect metadata for this method effect
   * @private
   */function createMethodEffect(model, sig, type, effectFn, methodInfo, dynamicFn) { dynamicFn = sig.static || dynamicFn && (babelHelpers.typeof(dynamicFn) !== 'object' || dynamicFn[sig.methodName]); var info = { methodName: sig.methodName, args: sig.args, methodInfo: methodInfo, dynamicFn: dynamicFn }; for (var _i12 = 0, arg; _i12 < sig.args.length && (arg = sig.args[_i12]); _i12++) { if (!arg.literal) { model._addPropertyEffect(arg.rootProperty, type, { fn: effectFn, info: info, trigger: arg }); } } if (dynamicFn) { model._addPropertyEffect(sig.methodName, type, { fn: effectFn, info: info }); } return info; }/**
     * Calls a method with arguments marshaled from properties on the instance
     * based on the method signature contained in the effect metadata.
     *
     * Multi-property observers, computed properties, and inline computing
     * functions call this function to invoke the method, then use the return
     * value accordingly.
     *
     * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on
     * @param {string} property Name of property
     * @param {Object} props Bag of current property changes
     * @param {Object} oldProps Bag of previous values for changed properties
     * @param {?} info Effect metadata
     * @return {*} Returns the return value from the method invocation
     * @private
     */function runMethodEffect(inst, property, props, oldProps, info) {// Instances can optionally have a _methodHost which allows redirecting where
          // to find methods. Currently used by `templatize`.
          var context = inst._methodHost || inst; var fn = context[info.methodName]; if (fn) { var args = inst._marshalArgs(info.args, property, props); return args === NOOP ? NOOP : fn.apply(context, args); } else if (!info.dynamicFn) { console.warn('method `' + info.methodName + '` not defined'); }
        } var emptyArray = [];// Regular expressions used for binding
        var IDENT = '(?:' + '[a-zA-Z_$][\\w.:$\\-*]*' + ')'; var NUMBER = '(?:' + '[-+]?[0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?' + ')'; var SQUOTE_STRING = '(?:' + '\'(?:[^\'\\\\]|\\\\.)*\'' + ')'; var DQUOTE_STRING = '(?:' + '"(?:[^"\\\\]|\\\\.)*"' + ')'; var STRING = '(?:' + SQUOTE_STRING + '|' + DQUOTE_STRING + ')'; var ARGUMENT = '(?:(' + IDENT + '|' + NUMBER + '|' + STRING + ')\\s*' + ')'; var ARGUMENTS = '(?:' + ARGUMENT + '(?:,\\s*' + ARGUMENT + ')*' + ')'; var ARGUMENT_LIST = '(?:' + '\\(\\s*' + '(?:' + ARGUMENTS + '?' + ')' + '\\)\\s*' + ')'; var BINDING = '(' + IDENT + '\\s*' + ARGUMENT_LIST + '?' + ')';// Group 3
        var OPEN_BRACKET = '(\\[\\[|{{)' + '\\s*'; var CLOSE_BRACKET = '(?:]]|}})'; var NEGATE = '(?:(!)\\s*)?';// Group 2
        var EXPRESSION = OPEN_BRACKET + NEGATE + BINDING + CLOSE_BRACKET; var bindingRegex = new RegExp(EXPRESSION, "g");/**
                                                     * Create a string from binding parts of all the literal parts
                                                     *
                                                     * @param {!Array<BindingPart>} parts All parts to stringify
                                                     * @return {string} String made from the literal parts
                                                     */function literalFromParts(parts) { var s = ''; for (var _i13 = 0; _i13 < parts.length; _i13++) { var literal = parts[_i13].literal; s += literal || ''; } return s; }/**
     * Parses an expression string for a method signature, and returns a metadata
     * describing the method in terms of `methodName`, `static` (whether all the
     * arguments are literals), and an array of `args`
     *
     * @param {string} expression The expression to parse
     * @return {?MethodSignature} The method metadata object if a method expression was
     *   found, otherwise `undefined`
     * @private
     */function parseMethod(expression) {// tries to match valid javascript property names
          var m = expression.match(/([^\s]+?)\(([\s\S]*)\)/); if (m) {
            var methodName = m[1]; var sig = { methodName: methodName, static: true, args: emptyArray }; if (m[2].trim()) {// replace escaped commas with comma entity, split on un-escaped commas
              var args = m[2].replace(/\\,/g, '&comma;').split(','); return parseArgs(args, sig);
            } else { return sig; }
          } return null;
        }/**
     * Parses an array of arguments and sets the `args` property of the supplied
     * signature metadata object. Sets the `static` property to false if any
     * argument is a non-literal.
     *
     * @param {!Array<string>} argList Array of argument names
     * @param {!MethodSignature} sig Method signature metadata object
     * @return {!MethodSignature} The updated signature metadata object
     * @private
     */function parseArgs(argList, sig) { sig.args = argList.map(function (rawArg) { var arg = parseArg(rawArg); if (!arg.literal) { sig.static = false; } return arg; }, this); return sig; }/**
     * Parses an individual argument, and returns an argument metadata object
     * with the following fields:
     *
     *   {
     *     value: 'prop',        // property/path or literal value
     *     literal: false,       // whether argument is a literal
     *     structured: false,    // whether the property is a path
     *     rootProperty: 'prop', // the root property of the path
     *     wildcard: false       // whether the argument was a wildcard '.*' path
     *   }
     *
     * @param {string} rawArg The string value of the argument
     * @return {!MethodArg} Argument metadata object
     * @private
     */function parseArg(rawArg) {// clean up whitespace
          var arg = rawArg.trim()// replace comma entity with comma
            .replace(/&comma;/g, ',')// repair extra escape sequences; note only commas strictly need
            // escaping, but we allow any other char to be escaped since its
            // likely users will do this
            .replace(/\\(.)/g, '\$1');// basic argument descriptor
          var a = { name: arg, value: '', literal: false };// detect literal value (must be String or Number)
          var fc = arg[0]; if (fc === '-') { fc = arg[1]; } if (fc >= '0' && fc <= '9') { fc = '#'; } switch (fc) { case "'": case '"': a.value = arg.slice(1, -1); a.literal = true; break; case '#': a.value = Number(arg); a.literal = true; break; }// if not literal, look for structured path
          if (!a.literal) {
            a.rootProperty = root(arg);// detect structured path (has dots)
            a.structured = isPath(arg); if (a.structured) { a.wildcard = arg.slice(-2) == '.*'; if (a.wildcard) { a.name = arg.slice(0, -2); } }
          } return a;
        } function getArgValue(data, props, path) {
          var value = _get(data, path);// when data is not stored e.g. `splices`, get the value from changedProps
          // TODO(kschaaf): Note, this can cause a rare issue where the wildcard
          // info.value could pull a stale value out of changedProps during a reentrant
          // change that sets the value back to undefined.
          // https://github.com/Polymer/polymer/issues/5479
          if (value === undefined) { value = props[path]; } return value;
        }// data api
  /**
   * Sends array splice notifications (`.splices` and `.length`)
   *
   * Note: this implementation only accepts normalized paths
   *
   * @param {!Polymer_PropertyEffects} inst Instance to send notifications to
   * @param {Array} array The array the mutations occurred on
   * @param {string} path The path to the array that was mutated
   * @param {Array} splices Array of splice records
   * @return {void}
   * @private
   */function _notifySplices(inst, array, path, splices) {
          var splicesData = { indexSplices: splices };// Legacy behavior stored splices in `__data__` so it was *not* ephemeral.
          // To match this behavior, we store splices directly on the array.
          if (legacyUndefined && !inst._overrideLegacyUndefined) { array.splices = splicesData; } inst.notifyPath(path + '.splices', splicesData); inst.notifyPath(path + '.length', array.length);// Clear splice data only when it's stored on the array.
          if (legacyUndefined && !inst._overrideLegacyUndefined) { splicesData.indexSplices = []; }
        }/**
     * Creates a splice record and sends an array splice notification for
     * the described mutation
     *
     * Note: this implementation only accepts normalized paths
     *
     * @param {!Polymer_PropertyEffects} inst Instance to send notifications to
     * @param {Array} array The array the mutations occurred on
     * @param {string} path The path to the array that was mutated
     * @param {number} index Index at which the array mutation occurred
     * @param {number} addedCount Number of added items
     * @param {Array} removed Array of removed items
     * @return {void}
     * @private
     */function notifySplice(inst, array, path, index, addedCount, removed) { _notifySplices(inst, array, path, [{ index: index, addedCount: addedCount, removed: removed, object: array, type: 'splice' }]); }/**
     * Returns an upper-cased version of the string.
     *
     * @param {string} name String to uppercase
     * @return {string} Uppercased string
     * @private
     */function upper(name) { return name[0].toUpperCase() + name.substring(1); }/**
     * Element class mixin that provides meta-programming for Polymer's template
     * binding and data observation (collectively, "property effects") system.
     *
     * This mixin uses provides the following key static methods for adding
     * property effects to an element class:
     * - `addPropertyEffect`
     * - `createPropertyObserver`
     * - `createMethodObserver`
     * - `createNotifyingProperty`
     * - `createReadOnlyProperty`
     * - `createReflectedProperty`
     * - `createComputedProperty`
     * - `bindTemplate`
     *
     * Each method creates one or more property accessors, along with metadata
     * used by this mixin's implementation of `_propertiesChanged` to perform
     * the property effects.
     *
     * Underscored versions of the above methods also exist on the element
     * prototype for adding property effects on instances at runtime.
     *
     * Note that this mixin overrides several `PropertyAccessors` methods, in
     * many cases to maintain guarantees provided by the Polymer 1.x features;
     * notably it changes property accessors to be synchronous by default
     * whereas the default when using `PropertyAccessors` standalone is to be
     * async by default.
     *
     * @mixinFunction
     * @polymer
     * @appliesMixin TemplateStamp
     * @appliesMixin PropertyAccessors
     * @summary Element class mixin that provides meta-programming for Polymer's
     * template binding and data observation system.
     */var PropertyEffects = dedupingMixin(function (superClass) {/**
     * @constructor
     * @implements {Polymer_PropertyAccessors}
     * @implements {Polymer_TemplateStamp}
     * @unrestricted
     * @private
     */var propertyEffectsBase = TemplateStamp(PropertyAccessors(superClass));/**
                                                                                  * @polymer
                                                                                  * @mixinClass
                                                                                  * @implements {Polymer_PropertyEffects}
                                                                                  * @extends {propertyEffectsBase}
                                                                                  * @unrestricted
                                                                                  */var PropertyEffects =/*#__PURE__*/function (_propertyEffectsBase) {
            babelHelpers.inherits(PropertyEffects, _propertyEffectsBase); function PropertyEffects() {
              var _this3; babelHelpers.classCallCheck(this, PropertyEffects); _this3 = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(PropertyEffects).call(this));/** @type {boolean} */ // Used to identify users of this mixin, ala instanceof
              _this3.__isPropertyEffectsClient = true;/** @type {boolean} */_this3.__dataClientsReady;/** @type {Array} */_this3.__dataPendingClients;/** @type {Object} */_this3.__dataToNotify;/** @type {Object} */_this3.__dataLinkedPaths;/** @type {boolean} */_this3.__dataHasPaths;/** @type {Object} */_this3.__dataCompoundStorage;/** @type {Polymer_PropertyEffects} */_this3.__dataHost;/** @type {!Object} */_this3.__dataTemp;/** @type {boolean} */_this3.__dataClientsInitialized;/** @type {!Object} */_this3.__data;/** @type {!Object|null} */_this3.__dataPending;/** @type {!Object} */_this3.__dataOld;/** @type {Object} */_this3.__computeEffects;/** @type {Object} */_this3.__computeInfo;/** @type {Object} */_this3.__reflectEffects;/** @type {Object} */_this3.__notifyEffects;/** @type {Object} */_this3.__propagateEffects;/** @type {Object} */_this3.__observeEffects;/** @type {Object} */_this3.__readOnly;/** @type {!TemplateInfo} */_this3.__templateInfo;/** @type {boolean} */_this3._overrideLegacyUndefined; return _this3;
            } babelHelpers.createClass(PropertyEffects, [{
              key: "_initializeProperties",/**
         * @override
         * @return {void}
         */value: function _initializeProperties() {
                babelHelpers.get(babelHelpers.getPrototypeOf(PropertyEffects.prototype), "_initializeProperties", this).call(this); this._registerHost(); this.__dataClientsReady = false; this.__dataPendingClients = null; this.__dataToNotify = null; this.__dataLinkedPaths = null; this.__dataHasPaths = false;// May be set on instance prior to upgrade
                this.__dataCompoundStorage = this.__dataCompoundStorage || null; this.__dataHost = this.__dataHost || null; this.__dataTemp = {}; this.__dataClientsInitialized = false;
              }
            }, {
              key: "_registerHost", value: function _registerHost() {
                if (hostStack.length) {
                  var host = hostStack[hostStack.length - 1]; host._enqueueClient(this);// This ensures even non-bound elements have a host set, as
                  // long as they upgrade synchronously
                  this.__dataHost = host;
                }
              }/**
         * Overrides `PropertyAccessors` implementation to provide a
         * more efficient implementation of initializing properties from
         * the prototype on the instance.
         *
         * @override
         * @param {Object} props Properties to initialize on the prototype
         * @return {void}
         */}, {
              key: "_initializeProtoProperties", value: function _initializeProtoProperties(props) { this.__data = Object.create(props); this.__dataPending = Object.create(props); this.__dataOld = {}; }/**
         * Overrides `PropertyAccessors` implementation to avoid setting
         * `_setProperty`'s `shouldNotify: true`.
         *
         * @override
         * @param {Object} props Properties to initialize on the instance
         * @return {void}
         */}, {
              key: "_initializeInstanceProperties", value: function _initializeInstanceProperties(props) { var readOnly = this[TYPES.READ_ONLY]; for (var prop in props) { if (!readOnly || !readOnly[prop]) { this.__dataPending = this.__dataPending || {}; this.__dataOld = this.__dataOld || {}; this.__data[prop] = this.__dataPending[prop] = props[prop]; } } }// Prototype setup ----------------------------------------
  /**
       * Equivalent to static `addPropertyEffect` API but can be called on
       * an instance to add effects at runtime.  See that method for
       * full API docs.
       *
       * @override
       * @param {string} property Property that should trigger the effect
       * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES
       * @param {Object=} effect Effect metadata object
       * @return {void}
       * @protected
       */}, {
              key: "_addPropertyEffect", value: function _addPropertyEffect(property, type, effect) {
                this._createPropertyAccessor(property, type == TYPES.READ_ONLY);// effects are accumulated into arrays per property based on type
                var effects = ensureOwnEffectMap(this, type, true)[property]; if (!effects) { effects = this[type][property] = []; } effects.push(effect);
              }/**
         * Removes the given property effect.
         *
         * @override
         * @param {string} property Property the effect was associated with
         * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES
         * @param {Object=} effect Effect metadata object to remove
         * @return {void}
         */}, {
              key: "_removePropertyEffect", value: function _removePropertyEffect(property, type, effect) { var effects = ensureOwnEffectMap(this, type, true)[property]; var idx = effects.indexOf(effect); if (idx >= 0) { effects.splice(idx, 1); } }/**
         * Returns whether the current prototype/instance has a property effect
         * of a certain type.
         *
         * @override
         * @param {string} property Property name
         * @param {string=} type Effect type, from this.PROPERTY_EFFECT_TYPES
         * @return {boolean} True if the prototype/instance has an effect of this
         *     type
         * @protected
         */}, {
              key: "_hasPropertyEffect", value: function _hasPropertyEffect(property, type) { var effects = this[type]; return Boolean(effects && effects[property]); }/**
         * Returns whether the current prototype/instance has a "read only"
         * accessor for the given property.
         *
         * @override
         * @param {string} property Property name
         * @return {boolean} True if the prototype/instance has an effect of this
         *     type
         * @protected
         */}, {
              key: "_hasReadOnlyEffect", value: function _hasReadOnlyEffect(property) { return this._hasPropertyEffect(property, TYPES.READ_ONLY); }/**
         * Returns whether the current prototype/instance has a "notify"
         * property effect for the given property.
         *
         * @override
         * @param {string} property Property name
         * @return {boolean} True if the prototype/instance has an effect of this
         *     type
         * @protected
         */}, {
              key: "_hasNotifyEffect", value: function _hasNotifyEffect(property) { return this._hasPropertyEffect(property, TYPES.NOTIFY); }/**
         * Returns whether the current prototype/instance has a "reflect to
         * attribute" property effect for the given property.
         *
         * @override
         * @param {string} property Property name
         * @return {boolean} True if the prototype/instance has an effect of this
         *     type
         * @protected
         */}, {
              key: "_hasReflectEffect", value: function _hasReflectEffect(property) { return this._hasPropertyEffect(property, TYPES.REFLECT); }/**
         * Returns whether the current prototype/instance has a "computed"
         * property effect for the given property.
         *
         * @override
         * @param {string} property Property name
         * @return {boolean} True if the prototype/instance has an effect of this
         *     type
         * @protected
         */}, {
              key: "_hasComputedEffect", value: function _hasComputedEffect(property) { return this._hasPropertyEffect(property, TYPES.COMPUTE); }// Runtime ----------------------------------------
  /**
       * Sets a pending property or path.  If the root property of the path in
       * question had no accessor, the path is set, otherwise it is enqueued
       * via `_setPendingProperty`.
       *
       * This function isolates relatively expensive functionality necessary
       * for the public API (`set`, `setProperties`, `notifyPath`, and property
       * change listeners via {{...}} bindings), such that it is only done
       * when paths enter the system, and not at every propagation step.  It
       * also sets a `__dataHasPaths` flag on the instance which is used to
       * fast-path slower path-matching code in the property effects host paths.
       *
       * `path` can be a path string or array of path parts as accepted by the
       * public API.
       *
       * @override
       * @param {string | !Array<number|string>} path Path to set
       * @param {*} value Value to set
       * @param {boolean=} shouldNotify Set to true if this change should
       *  cause a property notification event dispatch
       * @param {boolean=} isPathNotification If the path being set is a path
       *   notification of an already changed value, as opposed to a request
       *   to set and notify the change.  In the latter `false` case, a dirty
       *   check is performed and then the value is set to the path before
       *   enqueuing the pending property change.
       * @return {boolean} Returns true if the property/path was enqueued in
       *   the pending changes bag.
       * @protected
       */}, {
              key: "_setPendingPropertyOrPath", value: function _setPendingPropertyOrPath(path, value, shouldNotify, isPathNotification) {
                if (isPathNotification || root(Array.isArray(path) ? path[0] : path) !== path) {// Dirty check changes being set to a path against the actual object,
                  // since this is the entry point for paths into the system; from here
                  // the only dirty checks are against the `__dataTemp` cache to prevent
                  // duplicate work in the same turn only. Note, if this was a notification
                  // of a change already set to a path (isPathNotification: true),
                  // we always let the change through and skip the `set` since it was
                  // already dirty checked at the point of entry and the underlying
                  // object has already been updated
                  if (!isPathNotification) {
                    var old = _get(this, path); path =/** @type {string} */_set(this, path, value);// Use property-accessor's simpler dirty check
                    if (!path || !babelHelpers.get(babelHelpers.getPrototypeOf(PropertyEffects.prototype), "_shouldPropertyChange", this).call(this, path, value, old)) { return false; }
                  } this.__dataHasPaths = true; if (this._setPendingProperty(/**@type{string}*/path, value, shouldNotify)) { computeLinkedPaths(this,/**@type{string}*/path, value); return true; }
                } else { if (this.__dataHasAccessor && this.__dataHasAccessor[path]) { return this._setPendingProperty(/**@type{string}*/path, value, shouldNotify); } else { this[path] = value; } } return false;
              }/**
         * Applies a value to a non-Polymer element/node's property.
         *
         * The implementation makes a best-effort at binding interop:
         * Some native element properties have side-effects when
         * re-setting the same value (e.g. setting `<input>.value` resets the
         * cursor position), so we do a dirty-check before setting the value.
         * However, for better interop with non-Polymer custom elements that
         * accept objects, we explicitly re-set object changes coming from the
         * Polymer world (which may include deep object changes without the
         * top reference changing), erring on the side of providing more
         * information.
         *
         * Users may override this method to provide alternate approaches.
         *
         * @override
         * @param {!Node} node The node to set a property on
         * @param {string} prop The property to set
         * @param {*} value The value to set
         * @return {void}
         * @protected
         */}, {
              key: "_setUnmanagedPropertyToNode", value: function _setUnmanagedPropertyToNode(node, prop, value) {// It is a judgment call that resetting primitives is
                // "bad" and resettings objects is also "good"; alternatively we could
                // implement a whitelist of tag & property values that should never
                // be reset (e.g. <input>.value && <select>.value)
                if (value !== node[prop] || babelHelpers.typeof(value) == 'object') {// Note, className needs style scoping so this needs wrapping.
                  if (prop === 'className') { node =/** @type {!Node} */wrap(node); } node[prop] = value;
                }
              }/**
         * Overrides the `PropertiesChanged` implementation to introduce special
         * dirty check logic depending on the property & value being set:
         *
         * 1. Any value set to a path (e.g. 'obj.prop': 42 or 'obj.prop': {...})
         *    Stored in `__dataTemp`, dirty checked against `__dataTemp`
         * 2. Object set to simple property (e.g. 'prop': {...})
         *    Stored in `__dataTemp` and `__data`, dirty checked against
         *    `__dataTemp` by default implementation of `_shouldPropertyChange`
         * 3. Primitive value set to simple property (e.g. 'prop': 42)
         *    Stored in `__data`, dirty checked against `__data`
         *
         * The dirty-check is important to prevent cycles due to two-way
         * notification, but paths and objects are only dirty checked against any
         * previous value set during this turn via a "temporary cache" that is
         * cleared when the last `_propertiesChanged` exits. This is so:
         * a. any cached array paths (e.g. 'array.3.prop') may be invalidated
         *    due to array mutations like shift/unshift/splice; this is fine
         *    since path changes are dirty-checked at user entry points like `set`
         * b. dirty-checking for objects only lasts one turn to allow the user
         *    to mutate the object in-place and re-set it with the same identity
         *    and have all sub-properties re-propagated in a subsequent turn.
         *
         * The temp cache is not necessarily sufficient to prevent invalid array
         * paths, since a splice can happen during the same turn (with pathological
         * user code); we could introduce a "fixup" for temporarily cached array
         * paths if needed: https://github.com/Polymer/polymer/issues/4227
         *
         * @override
         * @param {string} property Name of the property
         * @param {*} value Value to set
         * @param {boolean=} shouldNotify True if property should fire notification
         *   event (applies only for `notify: true` properties)
         * @return {boolean} Returns true if the property changed
         */}, {
              key: "_setPendingProperty", value: function _setPendingProperty(property, value, shouldNotify) {
                var propIsPath = this.__dataHasPaths && isPath(property); var prevProps = propIsPath ? this.__dataTemp : this.__data; if (this._shouldPropertyChange(property, value, prevProps[property])) {
                  if (!this.__dataPending) { this.__dataPending = {}; this.__dataOld = {}; }// Ensure old is captured from the last turn
                  if (!(property in this.__dataOld)) { this.__dataOld[property] = this.__data[property]; }// Paths are stored in temporary cache (cleared at end of turn),
                  // which is used for dirty-checking, all others stored in __data
                  if (propIsPath) { this.__dataTemp[property] = value; } else { this.__data[property] = value; }// All changes go into pending property bag, passed to _propertiesChanged
                  this.__dataPending[property] = value;// Track properties that should notify separately
                  if (propIsPath || this[TYPES.NOTIFY] && this[TYPES.NOTIFY][property]) { this.__dataToNotify = this.__dataToNotify || {}; this.__dataToNotify[property] = shouldNotify; } return true;
                } return false;
              }/**
         * Overrides base implementation to ensure all accessors set `shouldNotify`
         * to true, for per-property notification tracking.
         *
         * @override
         * @param {string} property Name of the property
         * @param {*} value Value to set
         * @return {void}
         */}, {
              key: "_setProperty", value: function _setProperty(property, value) { if (this._setPendingProperty(property, value, true)) { this._invalidateProperties(); } }/**
         * Overrides `PropertyAccessor`'s default async queuing of
         * `_propertiesChanged`: if `__dataReady` is false (has not yet been
         * manually flushed), the function no-ops; otherwise flushes
         * `_propertiesChanged` synchronously.
         *
         * @override
         * @return {void}
         */}, {
              key: "_invalidateProperties", value: function _invalidateProperties() { if (this.__dataReady) { this._flushProperties(); } }/**
         * Enqueues the given client on a list of pending clients, whose
         * pending property changes can later be flushed via a call to
         * `_flushClients`.
         *
         * @override
         * @param {Object} client PropertyEffects client to enqueue
         * @return {void}
         * @protected
         */}, {
              key: "_enqueueClient", value: function _enqueueClient(client) { this.__dataPendingClients = this.__dataPendingClients || []; if (client !== this) { this.__dataPendingClients.push(client); } }/**
         * Flushes any clients previously enqueued via `_enqueueClient`, causing
         * their `_flushProperties` method to run.
         *
         * @override
         * @return {void}
         * @protected
         */}, {
              key: "_flushClients", value: function _flushClients() {
                if (!this.__dataClientsReady) {
                  this.__dataClientsReady = true; this._readyClients();// Override point where accessors are turned on; importantly,
                  // this is after clients have fully readied, providing a guarantee
                  // that any property effects occur only after all clients are ready.
                  this.__dataReady = true;
                } else { this.__enableOrFlushClients(); }
              }// NOTE: We ensure clients either enable or flush as appropriate. This
              // handles two corner cases:
              // (1) clients flush properly when connected/enabled before the host
              // enables; e.g.
              //   (a) Templatize stamps with no properties and does not flush and
              //   (b) the instance is inserted into dom and
              //   (c) then the instance flushes.
              // (2) clients enable properly when not connected/enabled when the host
              // flushes; e.g.
              //   (a) a template is runtime stamped and not yet connected/enabled
              //   (b) a host sets a property, causing stamped dom to flush
              //   (c) the stamped dom enables.
            }, {
              key: "__enableOrFlushClients", value: function __enableOrFlushClients() { var clients = this.__dataPendingClients; if (clients) { this.__dataPendingClients = null; for (var _i14 = 0; _i14 < clients.length; _i14++) { var client = clients[_i14]; if (!client.__dataEnabled) { client._enableProperties(); } else if (client.__dataPending) { client._flushProperties(); } } } }/**
         * Perform any initial setup on client dom. Called before the first
         * `_flushProperties` call on client dom and before any element
         * observers are called.
         *
         * @override
         * @return {void}
         * @protected
         */}, {
              key: "_readyClients", value: function _readyClients() { this.__enableOrFlushClients(); }/**
         * Sets a bag of property changes to this instance, and
         * synchronously processes all effects of the properties as a batch.
         *
         * Property names must be simple properties, not paths.  Batched
         * path propagation is not supported.
         *
         * @override
         * @param {Object} props Bag of one or more key-value pairs whose key is
         *   a property and value is the new value to set for that property.
         * @param {boolean=} setReadOnly When true, any private values set in
         *   `props` will be set. By default, `setProperties` will not set
         *   `readOnly: true` root properties.
         * @return {void}
         * @public
         */}, {
              key: "setProperties", value: function setProperties(props, setReadOnly) {
                for (var path in props) {
                  if (setReadOnly || !this[TYPES.READ_ONLY] || !this[TYPES.READ_ONLY][path]) {//TODO(kschaaf): explicitly disallow paths in setProperty?
                    // wildcard observers currently only pass the first changed path
                    // in the `info` object, and you could do some odd things batching
                    // paths, e.g. {'foo.bar': {...}, 'foo': null}
                    this._setPendingPropertyOrPath(path, props[path], true);
                  }
                } this._invalidateProperties();
              }/**
         * Overrides `PropertyAccessors` so that property accessor
         * side effects are not enabled until after client dom is fully ready.
         * Also calls `_flushClients` callback to ensure client dom is enabled
         * that was not enabled as a result of flushing properties.
         *
         * @override
         * @return {void}
         */}, {
              key: "ready", value: function ready() {// It is important that `super.ready()` is not called here as it
                // immediately turns on accessors. Instead, we wait until `readyClients`
                // to enable accessors to provide a guarantee that clients are ready
                // before processing any accessors side effects.
                this._flushProperties();// If no data was pending, `_flushProperties` will not `flushClients`
                // so ensure this is done.
                if (!this.__dataClientsReady) { this._flushClients(); }// Before ready, client notifications do not trigger _flushProperties.
                // Therefore a flush is necessary here if data has been set.
                if (this.__dataPending) { this._flushProperties(); }
              }/**
         * Implements `PropertyAccessors`'s properties changed callback.
         *
         * Runs each class of effects for the batch of changed properties in
         * a specific order (compute, propagate, reflect, observe, notify).
         *
         * @override
         * @param {!Object} currentProps Bag of all current accessor values
         * @param {?Object} changedProps Bag of properties changed since the last
         *   call to `_propertiesChanged`
         * @param {?Object} oldProps Bag of previous values for each property
         *   in `changedProps`
         * @return {void}
         */}, {
              key: "_propertiesChanged", value: function _propertiesChanged(currentProps, changedProps, oldProps) {// ----------------------------
                // let c = Object.getOwnPropertyNames(changedProps || {});
                // window.debug && console.group(this.localName + '#' + this.id + ': ' + c);
                // if (window.debug) { debugger; }
                // ----------------------------
                var hasPaths = this.__dataHasPaths; this.__dataHasPaths = false; var notifyProps;// Compute properties
                runComputedEffects(this, changedProps, oldProps, hasPaths);// Clear notify properties prior to possible reentry (propagate, observe),
                // but after computing effects have a chance to add to them
                notifyProps = this.__dataToNotify; this.__dataToNotify = null;// Propagate properties to clients
                this._propagatePropertyChanges(changedProps, oldProps, hasPaths);// Flush clients
                this._flushClients();// Reflect properties
                runEffects(this, this[TYPES.REFLECT], changedProps, oldProps, hasPaths);// Observe properties
                runEffects(this, this[TYPES.OBSERVE], changedProps, oldProps, hasPaths);// Notify properties to host
                if (notifyProps) { runNotifyEffects(this, notifyProps, changedProps, oldProps, hasPaths); }// Clear temporary cache at end of turn
                if (this.__dataCounter == 1) { this.__dataTemp = {}; }// ----------------------------
                // window.debug && console.groupEnd(this.localName + '#' + this.id + ': ' + c);
                // ----------------------------
              }/**
         * Called to propagate any property changes to stamped template nodes
         * managed by this element.
         *
         * @override
         * @param {Object} changedProps Bag of changed properties
         * @param {Object} oldProps Bag of previous values for changed properties
         * @param {boolean} hasPaths True with `props` contains one or more paths
         * @return {void}
         * @protected
         */}, { key: "_propagatePropertyChanges", value: function _propagatePropertyChanges(changedProps, oldProps, hasPaths) { if (this[TYPES.PROPAGATE]) { runEffects(this, this[TYPES.PROPAGATE], changedProps, oldProps, hasPaths); } if (this.__templateInfo) { this._runEffectsForTemplate(this.__templateInfo, changedProps, oldProps, hasPaths); } } }, {
              key: "_runEffectsForTemplate", value: function _runEffectsForTemplate(templateInfo, changedProps, oldProps, hasPaths) { var _this4 = this; var baseRunEffects = function baseRunEffects(changedProps, hasPaths) { runEffects(_this4, templateInfo.propertyEffects, changedProps, oldProps, hasPaths, templateInfo.nodeList); for (var info = templateInfo.firstChild; info; info = info.nextSibling) { _this4._runEffectsForTemplate(info, changedProps, oldProps, hasPaths); } }; if (templateInfo.runEffects) { templateInfo.runEffects(baseRunEffects, changedProps, hasPaths); } else { baseRunEffects(changedProps, hasPaths); } }/**
         * Aliases one data path as another, such that path notifications from one
         * are routed to the other.
         *
         * @override
         * @param {string | !Array<string|number>} to Target path to link.
         * @param {string | !Array<string|number>} from Source path to link.
         * @return {void}
         * @public
         */}, {
              key: "linkPaths", value: function linkPaths(to, from) { to = normalize(to); from = normalize(from); this.__dataLinkedPaths = this.__dataLinkedPaths || {}; this.__dataLinkedPaths[to] = from; }/**
         * Removes a data path alias previously established with `_linkPaths`.
         *
         * Note, the path to unlink should be the target (`to`) used when
         * linking the paths.
         *
         * @override
         * @param {string | !Array<string|number>} path Target path to unlink.
         * @return {void}
         * @public
         */}, {
              key: "unlinkPaths", value: function unlinkPaths(path) { path = normalize(path); if (this.__dataLinkedPaths) { delete this.__dataLinkedPaths[path]; } }/**
         * Notify that an array has changed.
         *
         * Example:
         *
         *     this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];
         *     ...
         *     this.items.splice(1, 1, {name: 'Sam'});
         *     this.items.push({name: 'Bob'});
         *     this.notifySplices('items', [
         *       { index: 1, removed: [{name: 'Todd'}], addedCount: 1,
         *         object: this.items, type: 'splice' },
         *       { index: 3, removed: [], addedCount: 1,
         *         object: this.items, type: 'splice'}
         *     ]);
         *
         * @param {string} path Path that should be notified.
         * @param {Array} splices Array of splice records indicating ordered
         *   changes that occurred to the array. Each record should have the
         *   following fields:
         *    * index: index at which the change occurred
         *    * removed: array of items that were removed from this index
         *    * addedCount: number of new items added at this index
         *    * object: a reference to the array in question
         *    * type: the string literal 'splice'
         *
         *   Note that splice records _must_ be normalized such that they are
         *   reported in index order (raw results from `Object.observe` are not
         *   ordered and must be normalized/merged before notifying).
         *
         * @override
         * @return {void}
         * @public
         */}, {
              key: "notifySplices", value: function notifySplices(path, splices) { var info = { path: '' }; var array =/** @type {Array} */_get(this, path, info); _notifySplices(this, array, info.path, splices); }/**
         * Convenience method for reading a value from a path.
         *
         * Note, if any part in the path is undefined, this method returns
         * `undefined` (this method does not throw when dereferencing undefined
         * paths).
         *
         * @override
         * @param {(string|!Array<(string|number)>)} path Path to the value
         *   to read.  The path may be specified as a string (e.g. `foo.bar.baz`)
         *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that
         *   bracketed expressions are not supported; string-based path parts
         *   *must* be separated by dots.  Note that when dereferencing array
         *   indices, the index may be used as a dotted part directly
         *   (e.g. `users.12.name` or `['users', 12, 'name']`).
         * @param {Object=} root Root object from which the path is evaluated.
         * @return {*} Value at the path, or `undefined` if any part of the path
         *   is undefined.
         * @public
         */}, {
              key: "get", value: function get(path, root) { return _get(root || this, path); }/**
         * Convenience method for setting a value to a path and notifying any
         * elements bound to the same path.
         *
         * Note, if any part in the path except for the last is undefined,
         * this method does nothing (this method does not throw when
         * dereferencing undefined paths).
         *
         * @override
         * @param {(string|!Array<(string|number)>)} path Path to the value
         *   to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)
         *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that
         *   bracketed expressions are not supported; string-based path parts
         *   *must* be separated by dots.  Note that when dereferencing array
         *   indices, the index may be used as a dotted part directly
         *   (e.g. `'users.12.name'` or `['users', 12, 'name']`).
         * @param {*} value Value to set at the specified path.
         * @param {Object=} root Root object from which the path is evaluated.
         *   When specified, no notification will occur.
         * @return {void}
         * @public
         */}, {
              key: "set", value: function set(path, value, root) { if (root) { _set(root, path, value); } else { if (!this[TYPES.READ_ONLY] || !this[TYPES.READ_ONLY][/** @type {string} */path]) { if (this._setPendingPropertyOrPath(path, value, true)) { this._invalidateProperties(); } } } }/**
         * Adds items onto the end of the array at the path specified.
         *
         * The arguments after `path` and return value match that of
         * `Array.prototype.push`.
         *
         * This method notifies other paths to the same array that a
         * splice occurred to the array.
         *
         * @override
         * @param {string | !Array<string|number>} path Path to array.
         * @param {...*} items Items to push onto array
         * @return {number} New length of the array.
         * @public
         */}, {
              key: "push", value: function push(path) { var info = { path: '' }; var array =/** @type {Array}*/_get(this, path, info); var len = array.length; for (var _len = arguments.length, items = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) { items[_key - 1] = arguments[_key]; } var ret = array.push.apply(array, items); if (items.length) { notifySplice(this, array, info.path, len, items.length, []); } return ret; }/**
         * Removes an item from the end of array at the path specified.
         *
         * The arguments after `path` and return value match that of
         * `Array.prototype.pop`.
         *
         * This method notifies other paths to the same array that a
         * splice occurred to the array.
         *
         * @override
         * @param {string | !Array<string|number>} path Path to array.
         * @return {*} Item that was removed.
         * @public
         */}, {
              key: "pop", value: function pop(path) { var info = { path: '' }; var array =/** @type {Array} */_get(this, path, info); var hadLength = Boolean(array.length); var ret = array.pop(); if (hadLength) { notifySplice(this, array, info.path, array.length, 0, [ret]); } return ret; }/**
         * Starting from the start index specified, removes 0 or more items
         * from the array and inserts 0 or more new items in their place.
         *
         * The arguments after `path` and return value match that of
         * `Array.prototype.splice`.
         *
         * This method notifies other paths to the same array that a
         * splice occurred to the array.
         *
         * @override
         * @param {string | !Array<string|number>} path Path to array.
         * @param {number} start Index from which to start removing/inserting.
         * @param {number=} deleteCount Number of items to remove.
         * @param {...*} items Items to insert into array.
         * @return {!Array} Array of removed items.
         * @public
         */}, {
              key: "splice", value: function splice(path, start, deleteCount) {
                for (var _len2 = arguments.length, items = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) { items[_key2 - 3] = arguments[_key2]; } var info = { path: '' }; var array =/** @type {Array} */_get(this, path, info);// Normalize fancy native splice handling of crazy start values
                if (start < 0) { start = array.length - Math.floor(-start); } else if (start) { start = Math.floor(start); }// array.splice does different things based on the number of arguments
                // you pass in. Therefore, array.splice(0) and array.splice(0, undefined)
                // do different things. In the former, the whole array is cleared. In the
                // latter, no items are removed.
                // This means that we need to detect whether 1. one of the arguments
                // is actually passed in and then 2. determine how many arguments
                // we should pass on to the native array.splice
                //
                var ret;// Omit any additional arguments if they were not passed in
                if (arguments.length === 2) {
                  ret = array.splice(start);// Either start was undefined and the others were defined, but in this
                  // case we can safely pass on all arguments
                  //
                  // Note: this includes the case where none of the arguments were passed in,
                  // e.g. this.splice('array'). However, if both start and deleteCount
                  // are undefined, array.splice will not modify the array (as expected)
                } else { ret = array.splice.apply(array, [start, deleteCount].concat(items)); }// At the end, check whether any items were passed in (e.g. insertions)
                // or if the return array contains items (e.g. deletions).
                // Only notify if items were added or deleted.
                if (items.length || ret.length) { notifySplice(this, array, info.path, start, items.length, ret); } return ret;
              }/**
         * Removes an item from the beginning of array at the path specified.
         *
         * The arguments after `path` and return value match that of
         * `Array.prototype.pop`.
         *
         * This method notifies other paths to the same array that a
         * splice occurred to the array.
         *
         * @override
         * @param {string | !Array<string|number>} path Path to array.
         * @return {*} Item that was removed.
         * @public
         */}, {
              key: "shift", value: function shift(path) { var info = { path: '' }; var array =/** @type {Array} */_get(this, path, info); var hadLength = Boolean(array.length); var ret = array.shift(); if (hadLength) { notifySplice(this, array, info.path, 0, 0, [ret]); } return ret; }/**
         * Adds items onto the beginning of the array at the path specified.
         *
         * The arguments after `path` and return value match that of
         * `Array.prototype.push`.
         *
         * This method notifies other paths to the same array that a
         * splice occurred to the array.
         *
         * @override
         * @param {string | !Array<string|number>} path Path to array.
         * @param {...*} items Items to insert info array
         * @return {number} New length of the array.
         * @public
         */}, {
              key: "unshift", value: function unshift(path) { var info = { path: '' }; var array =/** @type {Array} */_get(this, path, info); for (var _len3 = arguments.length, items = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) { items[_key3 - 1] = arguments[_key3]; } var ret = array.unshift.apply(array, items); if (items.length) { notifySplice(this, array, info.path, 0, items.length, []); } return ret; }/**
         * Notify that a path has changed.
         *
         * Example:
         *
         *     this.item.user.name = 'Bob';
         *     this.notifyPath('item.user.name');
         *
         * @override
         * @param {string} path Path that should be notified.
         * @param {*=} value Value at the path (optional).
         * @return {void}
         * @public
         */}, {
              key: "notifyPath", value: function notifyPath(path, value) {/** @type {string} */var propPath; if (arguments.length == 1) {// Get value if not supplied
                var info = { path: '' }; value = _get(this, path, info); propPath = info.path;
              } else if (Array.isArray(path)) {// Normalize path if needed
                propPath = normalize(path);
              } else { propPath =/** @type{string} */path; } if (this._setPendingPropertyOrPath(propPath, value, true, true)) { this._invalidateProperties(); }
              }/**
         * Equivalent to static `createReadOnlyProperty` API but can be called on
         * an instance to add effects at runtime.  See that method for
         * full API docs.
         *
         * @override
         * @param {string} property Property name
         * @param {boolean=} protectedSetter Creates a custom protected setter
         *   when `true`.
         * @return {void}
         * @protected
         */}, {
              key: "_createReadOnlyProperty", value: function _createReadOnlyProperty(property, protectedSetter) { this._addPropertyEffect(property, TYPES.READ_ONLY); if (protectedSetter) { this['_set' + upper(property)] =/** @this {PropertyEffects} */function (value) { this._setProperty(property, value); }; } }/**
         * Equivalent to static `createPropertyObserver` API but can be called on
         * an instance to add effects at runtime.  See that method for
         * full API docs.
         *
         * @override
         * @param {string} property Property name
         * @param {string|function(*,*)} method Function or name of observer method
         *     to call
         * @param {boolean=} dynamicFn Whether the method name should be included as
         *   a dependency to the effect.
         * @return {void}
         * @protected
         */}, {
              key: "_createPropertyObserver", value: function _createPropertyObserver(property, method, dynamicFn) { var info = { property: property, method: method, dynamicFn: Boolean(dynamicFn) }; this._addPropertyEffect(property, TYPES.OBSERVE, { fn: runObserverEffect, info: info, trigger: { name: property } }); if (dynamicFn) { this._addPropertyEffect(/** @type {string} */method, TYPES.OBSERVE, { fn: runObserverEffect, info: info, trigger: { name: method } }); } }/**
         * Equivalent to static `createMethodObserver` API but can be called on
         * an instance to add effects at runtime.  See that method for
         * full API docs.
         *
         * @override
         * @param {string} expression Method expression
         * @param {boolean|Object=} dynamicFn Boolean or object map indicating
         *   whether method names should be included as a dependency to the effect.
         * @return {void}
         * @protected
         */}, {
              key: "_createMethodObserver", value: function _createMethodObserver(expression, dynamicFn) { var sig = parseMethod(expression); if (!sig) { throw new Error("Malformed observer expression '" + expression + "'"); } createMethodEffect(this, sig, TYPES.OBSERVE, runMethodEffect, null, dynamicFn); }/**
         * Equivalent to static `createNotifyingProperty` API but can be called on
         * an instance to add effects at runtime.  See that method for
         * full API docs.
         *
         * @override
         * @param {string} property Property name
         * @return {void}
         * @protected
         */}, {
              key: "_createNotifyingProperty", value: function _createNotifyingProperty(property) { this._addPropertyEffect(property, TYPES.NOTIFY, { fn: runNotifyEffect, info: { eventName: camelToDashCase(property) + '-changed', property: property } }); }/**
         * Equivalent to static `createReflectedProperty` API but can be called on
         * an instance to add effects at runtime.  See that method for
         * full API docs.
         *
         * @override
         * @param {string} property Property name
         * @return {void}
         * @protected
         * @suppress {missingProperties} go/missingfnprops
         */}, {
              key: "_createReflectedProperty", value: function _createReflectedProperty(property) { var attr = this.constructor.attributeNameForProperty(property); if (attr[0] === '-') { console.warn('Property ' + property + ' cannot be reflected to attribute ' + attr + ' because "-" is not a valid starting attribute name. Use a lowercase first letter for the property instead.'); } else { this._addPropertyEffect(property, TYPES.REFLECT, { fn: runReflectEffect, info: { attrName: attr } }); } }/**
         * Equivalent to static `createComputedProperty` API but can be called on
         * an instance to add effects at runtime.  See that method for
         * full API docs.
         *
         * @override
         * @param {string} property Name of computed property to set
         * @param {string} expression Method expression
         * @param {boolean|Object=} dynamicFn Boolean or object map indicating
         *   whether method names should be included as a dependency to the effect.
         * @return {void}
         * @protected
         */}, {
              key: "_createComputedProperty", value: function _createComputedProperty(property, expression, dynamicFn) {
                var sig = parseMethod(expression); if (!sig) { throw new Error("Malformed computed expression '" + expression + "'"); } var info = createMethodEffect(this, sig, TYPES.COMPUTE, runComputedEffect, property, dynamicFn);// Effects are normally stored as map of dependency->effect, but for
                // ordered computation, we also need tree of computedProp->dependencies
                ensureOwnEffectMap(this, COMPUTE_INFO)[property] = info;
              }/**
         * Gather the argument values for a method specified in the provided array
         * of argument metadata.
         *
         * The `path` and `value` arguments are used to fill in wildcard descriptor
         * when the method is being called as a result of a path notification.
         *
         * @param {!Array<!MethodArg>} args Array of argument metadata
         * @param {string} path Property/path name that triggered the method effect
         * @param {Object} props Bag of current property changes
         * @return {!Array<*>} Array of argument values
         * @private
         */}, {
              key: "_marshalArgs", value: function _marshalArgs(args, path, props) {
                var data = this.__data; var values = []; for (var _i15 = 0, l = args.length; _i15 < l; _i15++) {
                  var _args$_i = args[_i15], name = _args$_i.name, structured = _args$_i.structured, wildcard = _args$_i.wildcard, value = _args$_i.value, literal = _args$_i.literal; if (!literal) { if (wildcard) { var _matches = isDescendant(name, path); var pathValue = getArgValue(data, props, _matches ? path : name); value = { path: _matches ? path : name, value: pathValue, base: _matches ? _get(data, name) : pathValue }; } else { value = structured ? getArgValue(data, props, name) : data[name]; } }// When the `legacyUndefined` flag is enabled, pass a no-op value
                  // so that the observer, computed property, or compound binding is aborted.
                  if (legacyUndefined && !this._overrideLegacyUndefined && value === undefined && args.length > 1) { return NOOP; } values[_i15] = value;
                } return values;
              }// -- static class methods ------------
  /**
       * Ensures an accessor exists for the specified property, and adds
       * to a list of "property effects" that will run when the accessor for
       * the specified property is set.  Effects are grouped by "type", which
       * roughly corresponds to a phase in effect processing.  The effect
       * metadata should be in the following form:
       *
       *     {
       *       fn: effectFunction, // Reference to function to call to perform effect
       *       info: { ... }       // Effect metadata passed to function
       *       trigger: {          // Optional triggering metadata; if not provided
       *         name: string      // the property is treated as a wildcard
       *         structured: boolean
       *         wildcard: boolean
       *       }
       *     }
       *
       * Effects are called from `_propertiesChanged` in the following order by
       * type:
       *
       * 1. COMPUTE
       * 2. PROPAGATE
       * 3. REFLECT
       * 4. OBSERVE
       * 5. NOTIFY
       *
       * Effect functions are called with the following signature:
       *
       *     effectFunction(inst, path, props, oldProps, info, hasPaths)
       *
       * @param {string} property Property that should trigger the effect
       * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES
       * @param {Object=} effect Effect metadata object
       * @return {void}
       * @protected
       * @nocollapse
       */}, {
              key: "_bindTemplate",// -- binding ----------------------------------------------
  /*
       * Overview of binding flow:
       *
       * During finalization (`instanceBinding==false`, `wasPreBound==false`):
       *  `_bindTemplate(t, false)` called directly during finalization - parses
       *  the template (for the first time), and then assigns that _prototypical_
       *  template info to `__preboundTemplateInfo` _on the prototype_; note in
       *  this case `wasPreBound` is false; this is the first time we're binding
       *  it, thus we create accessors.
       *
       * During first stamping (`instanceBinding==true`, `wasPreBound==true`):
       *   `_stampTemplate` calls `_bindTemplate(t, true)`: the `templateInfo`
       *   returned matches the prebound one, and so this is `wasPreBound == true`
       *   state; thus we _skip_ creating accessors, but _do_ create an instance
       *   of the template info to serve as the start of our linked list (needs to
       *   be an instance, not the prototypical one, so that we can add `nodeList`
       *   to it to contain the `nodeInfo`-ordered list of instance nodes for
       *   bindings, and so we can chain runtime-stamped template infos off of
       *   it). At this point, the call to `_stampTemplate` calls
       *   `applyTemplateInfo` for each nested `<template>` found during parsing
       *   to hand prototypical `_templateInfo` to them; we also pass the _parent_
       *   `templateInfo` to the `<template>` so that we have the instance-time
       *   parent to link the `templateInfo` under in the case it was
       *   runtime-stamped.
       *
       * During subsequent runtime stamping (`instanceBinding==true`,
       *   `wasPreBound==false`): `_stampTemplate` calls `_bindTemplate(t, true)`
       *   - here `templateInfo` is guaranteed to _not_ match the prebound one,
       *   because it was either a different template altogether, or even if it
       *   was the same template, the step above created a instance of the info;
       *   in this case `wasPreBound == false`, so we _do_ create accessors, _and_
       *   link a instance into the linked list.
       */ /**
           * Equivalent to static `bindTemplate` API but can be called on an instance
           * to add effects at runtime.  See that method for full API docs.
           *
           * This method may be called on the prototype (for prototypical template
           * binding, to avoid creating accessors every instance) once per prototype,
           * and will be called with `runtimeBinding: true` by `_stampTemplate` to
           * create and link an instance of the template metadata associated with a
           * particular stamping.
           *
           * @override
           * @param {!HTMLTemplateElement} template Template containing binding
           * bindings
           * @param {boolean=} instanceBinding When false (default), performs
           * "prototypical" binding of the template and overwrites any previously
           * bound template for the class. When true (as passed from
           * `_stampTemplate`), the template info is instanced and linked into the
           * list of bound templates.
           * @return {!TemplateInfo} Template metadata object; for `runtimeBinding`,
           * this is an instance of the prototypical template info
           * @protected
           * @suppress {missingProperties} go/missingfnprops
           */value: function _bindTemplate(template, instanceBinding) {
                var templateInfo = this.constructor._parseTemplate(template); var wasPreBound = this.__preBoundTemplateInfo == templateInfo;// Optimization: since this is called twice for proto-bound templates,
                // don't attempt to recreate accessors if this template was pre-bound
                if (!wasPreBound) { for (var prop in templateInfo.propertyEffects) { this._createPropertyAccessor(prop); } } if (instanceBinding) {// For instance-time binding, create instance of template metadata
                  // and link into tree of templates if necessary
                  templateInfo =/** @type {!TemplateInfo} */Object.create(templateInfo); templateInfo.wasPreBound = wasPreBound; if (!this.__templateInfo) {// Set the info to the root of the tree
                    this.__templateInfo = templateInfo;
                  } else {// Append this template info onto the end of its parent template's
                    // list, which will determine the tree structure via which property
                    // effects are run; if this template was not nested in another
                    // template, use the root template (the first stamped one) as the
                    // parent. Note, `parent` is the `templateInfo` instance for this
                    // template's parent (containing) template, which was set up in
                    // `applyTemplateInfo`.  While a given template's `parent` is set
                    // apriori, it is only added to the parent's child list at the point
                    // that it is being bound, since a template may or may not ever be
                    // stamped, and may be stamped more than once (in which case instances
                    // of the template info will be in the tree under its parent more than
                    // once).
                    var parent = template._parentTemplateInfo || this.__templateInfo; var previous = parent.lastChild; templateInfo.parent = parent; parent.lastChild = templateInfo; templateInfo.previousSibling = previous; if (previous) { previous.nextSibling = templateInfo; } else { parent.firstChild = templateInfo; }
                  }
                } else { this.__preBoundTemplateInfo = templateInfo; } return templateInfo;
              }/**
         * Adds a property effect to the given template metadata, which is run
         * at the "propagate" stage of `_propertiesChanged` when the template
         * has been bound to the element via `_bindTemplate`.
         *
         * The `effect` object should match the format in `_addPropertyEffect`.
         *
         * @param {Object} templateInfo Template metadata to add effect to
         * @param {string} prop Property that should trigger the effect
         * @param {Object=} effect Effect metadata object
         * @return {void}
         * @protected
         * @nocollapse
         */}, {
              key: "_stampTemplate",/**
         * Stamps the provided template and performs instance-time setup for
         * Polymer template features, including data bindings, declarative event
         * listeners, and the `this.$` map of `id`'s to nodes.  A document fragment
         * is returned containing the stamped DOM, ready for insertion into the
         * DOM.
         *
         * This method may be called more than once; however note that due to
         * `shadycss` polyfill limitations, only styles from templates prepared
         * using `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped
         * to the shadow root and support CSS custom properties), and note that
         * `ShadyCSS.prepareTemplate` may only be called once per element. As such,
         * any styles required by in runtime-stamped templates must be included
         * in the main element template.
         *
         * @param {!HTMLTemplateElement} template Template to stamp
         * @param {TemplateInfo=} templateInfo Optional bound template info associated
         *   with the template to be stamped; if omitted the template will be
         *   automatically bound.
         * @return {!StampedTemplate} Cloned template content
         * @override
         * @protected
         */value: function _stampTemplate(template, templateInfo) {
                templateInfo = templateInfo ||/** @type {!TemplateInfo} */this._bindTemplate(template, true);// Ensures that created dom is `_enqueueClient`'d to this element so
                // that it can be flushed on next call to `_flushProperties`
                hostStack.push(this); var dom = babelHelpers.get(babelHelpers.getPrototypeOf(PropertyEffects.prototype), "_stampTemplate", this).call(this, template, templateInfo); hostStack.pop();// Add template-instance-specific data to instanced templateInfo
                templateInfo.nodeList = dom.nodeList;// Capture child nodes to allow unstamping of non-prototypical templates
                if (!templateInfo.wasPreBound) { var nodes = templateInfo.childNodes = []; for (var n = dom.firstChild; n; n = n.nextSibling) { nodes.push(n); } } dom.templateInfo = templateInfo;// Setup compound storage, 2-way listeners, and dataHost for bindings
                setupBindings(this, templateInfo);// Flush properties into template nodes; the check on `__dataClientsReady`
                // ensures we don't needlessly run effects for an element's initial
                // prototypical template stamping since they will happen as a part of the
                // first call to `_propertiesChanged`. This flag is set to true
                // after running the initial propagate effects, and immediately before
                // flushing clients. Since downstream clients could cause stamping on
                // this host (e.g. a fastDomIf `dom-if` being forced to render
                // synchronously), this flag ensures effects for runtime-stamped templates
                // are run at this point during the initial element boot-up.
                if (this.__dataClientsReady) { this._runEffectsForTemplate(templateInfo, this.__data, null, false); this._flushClients(); } return dom;
              }/**
         * Removes and unbinds the nodes previously contained in the provided
         * DocumentFragment returned from `_stampTemplate`.
         *
         * @override
         * @param {!StampedTemplate} dom DocumentFragment previously returned
         *   from `_stampTemplate` associated with the nodes to be removed
         * @return {void}
         * @protected
         */}, {
              key: "_removeBoundDom", value: function _removeBoundDom(dom) {// Unlink template info; Note that while the child is unlinked from its
                // parent list, a template's `parent` reference is never removed, since
                // this is is determined by the tree structure and applied at
                // `applyTemplateInfo` time.
                var templateInfo = dom.templateInfo; var previousSibling = templateInfo.previousSibling, nextSibling = templateInfo.nextSibling, parent = templateInfo.parent; if (previousSibling) { previousSibling.nextSibling = nextSibling; } else if (parent) { parent.firstChild = nextSibling; } if (nextSibling) { nextSibling.previousSibling = previousSibling; } else if (parent) { parent.lastChild = previousSibling; } templateInfo.nextSibling = templateInfo.previousSibling = null;// Remove stamped nodes
                var nodes = templateInfo.childNodes; for (var _i16 = 0; _i16 < nodes.length; _i16++) { var node = nodes[_i16]; wrap(wrap(node).parentNode).removeChild(node); }
              }/**
         * Overrides default `TemplateStamp` implementation to add support for
         * parsing bindings from `TextNode`'s' `textContent`.  A `bindings`
         * array is added to `nodeInfo` and populated with binding metadata
         * with information capturing the binding target, and a `parts` array
         * with one or more metadata objects capturing the source(s) of the
         * binding.
         *
         * @param {Node} node Node to parse
         * @param {TemplateInfo} templateInfo Template metadata for current template
         * @param {NodeInfo} nodeInfo Node metadata for current template node
         * @return {boolean} `true` if the visited node added node-specific
         *   metadata to `nodeInfo`
         * @protected
         * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do
         * @nocollapse
         */}, { key: "PROPERTY_EFFECT_TYPES", get: function get() { return TYPES; } }], [{
              key: "addPropertyEffect", value: function addPropertyEffect(property, type, effect) { this.prototype._addPropertyEffect(property, type, effect); }/**
         * Creates a single-property observer for the given property.
         *
         * @param {string} property Property name
         * @param {string|function(*,*)} method Function or name of observer method to call
         * @param {boolean=} dynamicFn Whether the method name should be included as
         *   a dependency to the effect.
         * @return {void}
         * @protected
         * @nocollapse
         */}, {
              key: "createPropertyObserver", value: function createPropertyObserver(property, method, dynamicFn) { this.prototype._createPropertyObserver(property, method, dynamicFn); }/**
         * Creates a multi-property "method observer" based on the provided
         * expression, which should be a string in the form of a normal JavaScript
         * function signature: `'methodName(arg1, [..., argn])'`.  Each argument
         * should correspond to a property or path in the context of this
         * prototype (or instance), or may be a literal string or number.
         *
         * @param {string} expression Method expression
         * @param {boolean|Object=} dynamicFn Boolean or object map indicating
         * @return {void}
         *   whether method names should be included as a dependency to the effect.
         * @protected
         * @nocollapse
         */}, {
              key: "createMethodObserver", value: function createMethodObserver(expression, dynamicFn) { this.prototype._createMethodObserver(expression, dynamicFn); }/**
         * Causes the setter for the given property to dispatch `<property>-changed`
         * events to notify of changes to the property.
         *
         * @param {string} property Property name
         * @return {void}
         * @protected
         * @nocollapse
         */}, {
              key: "createNotifyingProperty", value: function createNotifyingProperty(property) { this.prototype._createNotifyingProperty(property); }/**
         * Creates a read-only accessor for the given property.
         *
         * To set the property, use the protected `_setProperty` API.
         * To create a custom protected setter (e.g. `_setMyProp()` for
         * property `myProp`), pass `true` for `protectedSetter`.
         *
         * Note, if the property will have other property effects, this method
         * should be called first, before adding other effects.
         *
         * @param {string} property Property name
         * @param {boolean=} protectedSetter Creates a custom protected setter
         *   when `true`.
         * @return {void}
         * @protected
         * @nocollapse
         */}, {
              key: "createReadOnlyProperty", value: function createReadOnlyProperty(property, protectedSetter) { this.prototype._createReadOnlyProperty(property, protectedSetter); }/**
         * Causes the setter for the given property to reflect the property value
         * to a (dash-cased) attribute of the same name.
         *
         * @param {string} property Property name
         * @return {void}
         * @protected
         * @nocollapse
         */}, {
              key: "createReflectedProperty", value: function createReflectedProperty(property) { this.prototype._createReflectedProperty(property); }/**
         * Creates a computed property whose value is set to the result of the
         * method described by the given `expression` each time one or more
         * arguments to the method changes.  The expression should be a string
         * in the form of a normal JavaScript function signature:
         * `'methodName(arg1, [..., argn])'`
         *
         * @param {string} property Name of computed property to set
         * @param {string} expression Method expression
         * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether
         *   method names should be included as a dependency to the effect.
         * @return {void}
         * @protected
         * @nocollapse
         */}, {
              key: "createComputedProperty", value: function createComputedProperty(property, expression, dynamicFn) { this.prototype._createComputedProperty(property, expression, dynamicFn); }/**
         * Parses the provided template to ensure binding effects are created
         * for them, and then ensures property accessors are created for any
         * dependent properties in the template.  Binding effects for bound
         * templates are stored in a linked list on the instance so that
         * templates can be efficiently stamped and unstamped.
         *
         * @param {!HTMLTemplateElement} template Template containing binding
         *   bindings
         * @return {!TemplateInfo} Template metadata object
         * @protected
         * @nocollapse
         */}, { key: "bindTemplate", value: function bindTemplate(template) { return this.prototype._bindTemplate(template); } }, { key: "_addTemplatePropertyEffect", value: function _addTemplatePropertyEffect(templateInfo, prop, effect) { var hostProps = templateInfo.hostProps = templateInfo.hostProps || {}; hostProps[prop] = true; var effects = templateInfo.propertyEffects = templateInfo.propertyEffects || {}; var propEffects = effects[prop] = effects[prop] || []; propEffects.push(effect); } }, {
              key: "_parseTemplateNode", value: function _parseTemplateNode(node, templateInfo, nodeInfo) {// TODO(https://github.com/google/closure-compiler/issues/3240):
                //     Change back to just super.methodCall()
                var noted = propertyEffectsBase._parseTemplateNode.call(this, node, templateInfo, nodeInfo); if (node.nodeType === Node.TEXT_NODE) {
                  var parts = this._parseBindings(node.textContent, templateInfo); if (parts) {// Initialize the textContent with any literal parts
                    // NOTE: default to a space here so the textNode remains; some browsers
                    // (IE) omit an empty textNode following cloneNode/importNode.
                    node.textContent = literalFromParts(parts) || ' '; addBinding(this, templateInfo, nodeInfo, 'text', 'textContent', parts); noted = true;
                  }
                } return noted;
              }/**
         * Overrides default `TemplateStamp` implementation to add support for
         * parsing bindings from attributes.  A `bindings`
         * array is added to `nodeInfo` and populated with binding metadata
         * with information capturing the binding target, and a `parts` array
         * with one or more metadata objects capturing the source(s) of the
         * binding.
         *
         * @param {Element} node Node to parse
         * @param {TemplateInfo} templateInfo Template metadata for current template
         * @param {NodeInfo} nodeInfo Node metadata for current template node
         * @param {string} name Attribute name
         * @param {string} value Attribute value
         * @return {boolean} `true` if the visited node added node-specific
         *   metadata to `nodeInfo`
         * @protected
         * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do
         * @nocollapse
         */}, {
              key: "_parseTemplateNodeAttribute", value: function _parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value) {
                var parts = this._parseBindings(value, templateInfo); if (parts) {// Attribute or property
                  var origName = name; var kind = 'property';// The only way we see a capital letter here is if the attr has
                  // a capital letter in it per spec. In this case, to make sure
                  // this binding works, we go ahead and make the binding to the attribute.
                  if (capitalAttributeRegex.test(name)) { kind = 'attribute'; } else if (name[name.length - 1] == '$') { name = name.slice(0, -1); kind = 'attribute'; }// Initialize attribute bindings with any literal parts
                  var literal = literalFromParts(parts); if (literal && kind == 'attribute') {// Ensure a ShadyCSS template scoped style is not removed
                    // when a class$ binding's initial literal value is set.
                    if (name == 'class' && node.hasAttribute('class')) { literal += ' ' + node.getAttribute(name); } node.setAttribute(name, literal);
                  }// support disable-upgrade
                  if (kind == 'attribute' && origName == 'disable-upgrade$') { node.setAttribute(name, ''); }// Clear attribute before removing, since IE won't allow removing
                  // `value` attribute if it previously had a value (can't
                  // unconditionally set '' before removing since attributes with `$`
                  // can't be set using setAttribute)
                  if (node.localName === 'input' && origName === 'value') { node.setAttribute(origName, ''); }// Remove annotation
                  node.removeAttribute(origName);// Case hackery: attributes are lower-case, but bind targets
                  // (properties) are case sensitive. Gambit is to map dash-case to
                  // camel-case: `foo-bar` becomes `fooBar`.
                  // Attribute bindings are excepted.
                  if (kind === 'property') { name = dashToCamelCase(name); } addBinding(this, templateInfo, nodeInfo, kind, name, parts, literal); return true;
                } else {// TODO(https://github.com/google/closure-compiler/issues/3240):
                  //     Change back to just super.methodCall()
                  return propertyEffectsBase._parseTemplateNodeAttribute.call(this, node, templateInfo, nodeInfo, name, value);
                }
              }/**
         * Overrides default `TemplateStamp` implementation to add support for
         * binding the properties that a nested template depends on to the template
         * as `_host_<property>`.
         *
         * @param {Node} node Node to parse
         * @param {TemplateInfo} templateInfo Template metadata for current template
         * @param {NodeInfo} nodeInfo Node metadata for current template node
         * @return {boolean} `true` if the visited node added node-specific
         *   metadata to `nodeInfo`
         * @protected
         * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do
         * @nocollapse
         */}, {
              key: "_parseTemplateNestedTemplate", value: function _parseTemplateNestedTemplate(node, templateInfo, nodeInfo) {// TODO(https://github.com/google/closure-compiler/issues/3240):
                //     Change back to just super.methodCall()
                var noted = propertyEffectsBase._parseTemplateNestedTemplate.call(this, node, templateInfo, nodeInfo); var parent = node.parentNode; var nestedTemplateInfo = nodeInfo.templateInfo; var isDomIf = parent.localName === 'dom-if'; var isDomRepeat = parent.localName === 'dom-repeat';// Remove nested template and redirect its host bindings & templateInfo
                // onto the parent (dom-if/repeat element)'s nodeInfo
                if (removeNestedTemplates && (isDomIf || isDomRepeat)) {
                  parent.removeChild(node);// Use the parent's nodeInfo (for the dom-if/repeat) to record the
                  // templateInfo, and use that for any host property bindings below
                  nodeInfo = nodeInfo.parentInfo; nodeInfo.templateInfo = nestedTemplateInfo;// Ensure the parent dom-if/repeat is noted since it now may have host
                  // bindings; it may not have been if it did not have its own bindings
                  nodeInfo.noted = true; noted = false;
                }// Merge host props into outer template and add bindings
                var hostProps = nestedTemplateInfo.hostProps; if (fastDomIf && isDomIf) {// `fastDomIf` mode uses runtime-template stamping to add accessors/
                  // effects to properties used in its template; as such we don't need to
                  // tax the host element with `_host_` bindings for the `dom-if`.
                  // However, in the event it is nested in a `dom-repeat`, it is still
                  // important that its host properties are added to the
                  // TemplateInstance's `hostProps` so that they are forwarded to the
                  // TemplateInstance.
                  if (hostProps) {
                    templateInfo.hostProps = Object.assign(templateInfo.hostProps || {}, hostProps);// Ensure the dom-if is noted so that it has a __dataHost, since
                    // `fastDomIf` uses the host for runtime template stamping; note this
                    // was already ensured above in the `removeNestedTemplates` case
                    if (!removeNestedTemplates) { nodeInfo.parentInfo.noted = true; }
                  }
                } else { var mode = '{'; for (var source in hostProps) { var parts = [{ mode: mode, source: source, dependencies: [source], hostProp: true }]; addBinding(this, templateInfo, nodeInfo, 'property', '_host_' + source, parts); } } return noted;
              }/**
         * Called to parse text in a template (either attribute values or
         * textContent) into binding metadata.
         *
         * Any overrides of this method should return an array of binding part
         * metadata  representing one or more bindings found in the provided text
         * and any "literal" text in between.  Any non-literal parts will be passed
         * to `_evaluateBinding` when any dependencies change.  The only required
         * fields of each "part" in the returned array are as follows:
         *
         * - `dependencies` - Array containing trigger metadata for each property
         *   that should trigger the binding to update
         * - `literal` - String containing text if the part represents a literal;
         *   in this case no `dependencies` are needed
         *
         * Additional metadata for use by `_evaluateBinding` may be provided in
         * each part object as needed.
         *
         * The default implementation handles the following types of bindings
         * (one or more may be intermixed with literal strings):
         * - Property binding: `[[prop]]`
         * - Path binding: `[[object.prop]]`
         * - Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`
         * - Two-way property or path bindings (supports negation):
         *   `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`
         * - Inline computed method (supports negation):
         *   `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`
         *
         * The default implementation uses a regular expression for best
         * performance. However, the regular expression uses a white-list of
         * allowed characters in a data-binding, which causes problems for
         * data-bindings that do use characters not in this white-list.
         *
         * Instead of updating the white-list with all allowed characters,
         * there is a StrictBindingParser (see lib/mixins/strict-binding-parser)
         * that uses a state machine instead. This state machine is able to handle
         * all characters. However, it is slightly less performant, therefore we
         * extracted it into a separate optional mixin.
         *
         * @param {string} text Text to parse from attribute or textContent
         * @param {Object} templateInfo Current template metadata
         * @return {Array<!BindingPart>} Array of binding part metadata
         * @protected
         * @nocollapse
         */}, {
              key: "_parseBindings", value: function _parseBindings(text, templateInfo) {
                var parts = []; var lastIndex = 0; var m;// Example: "literal1{{prop}}literal2[[!compute(foo,bar)]]final"
                // Regex matches:
                //        Iteration 1:  Iteration 2:
                // m[1]: '{{'          '[['
                // m[2]: ''            '!'
                // m[3]: 'prop'        'compute(foo,bar)'
                while ((m = bindingRegex.exec(text)) !== null) {// Add literal part
                  if (m.index > lastIndex) { parts.push({ literal: text.slice(lastIndex, m.index) }); }// Add binding part
                  var mode = m[1][0]; var negate = Boolean(m[2]); var source = m[3].trim(); var customEvent = false, notifyEvent = '', colon = -1; if (mode == '{' && (colon = source.indexOf('::')) > 0) { notifyEvent = source.substring(colon + 2); source = source.substring(0, colon); customEvent = true; } var signature = parseMethod(source); var dependencies = []; if (signature) {// Inline computed function
                    var args = signature.args, methodName = signature.methodName; for (var _i17 = 0; _i17 < args.length; _i17++) { var arg = args[_i17]; if (!arg.literal) { dependencies.push(arg); } } var dynamicFns = templateInfo.dynamicFns; if (dynamicFns && dynamicFns[methodName] || signature.static) { dependencies.push(methodName); signature.dynamicFn = true; }
                  } else {// Property or path
                    dependencies.push(source);
                  } parts.push({ source: source, mode: mode, negate: negate, customEvent: customEvent, signature: signature, dependencies: dependencies, event: notifyEvent }); lastIndex = bindingRegex.lastIndex;
                }// Add a final literal part
                if (lastIndex && lastIndex < text.length) { var literal = text.substring(lastIndex); if (literal) { parts.push({ literal: literal }); } } if (parts.length) { return parts; } else { return null; }
              }/**
         * Called to evaluate a previously parsed binding part based on a set of
         * one or more changed dependencies.
         *
         * @param {!Polymer_PropertyEffects} inst Element that should be used as
         *     scope for binding dependencies
         * @param {BindingPart} part Binding part metadata
         * @param {string} path Property/path that triggered this effect
         * @param {Object} props Bag of current property changes
         * @param {Object} oldProps Bag of previous values for changed properties
         * @param {boolean} hasPaths True with `props` contains one or more paths
         * @return {*} Value the binding part evaluated to
         * @protected
         * @nocollapse
         */}, { key: "_evaluateBinding", value: function _evaluateBinding(inst, part, path, props, oldProps, hasPaths) { var value; if (part.signature) { value = runMethodEffect(inst, path, props, oldProps, part.signature); } else if (path != part.source) { value = _get(inst, part.source); } else { if (hasPaths && isPath(path)) { value = _get(inst, path); } else { value = inst.__data[path]; } } if (part.negate) { value = !value; } return value; } }]); return PropertyEffects;
          }(propertyEffectsBase); return PropertyEffects;
        });/**
       * Stack for enqueuing client dom created by a host element.
       *
       * By default elements are flushed via `_flushProperties` when
       * `connectedCallback` is called. Elements attach their client dom to
       * themselves at `ready` time which results from this first flush.
       * This provides an ordering guarantee that the client dom an element
       * creates is flushed before the element itself (i.e. client `ready`
       * fires before host `ready`).
       *
       * However, if `_flushProperties` is called *before* an element is connected,
       * as for example `Templatize` does, this ordering guarantee cannot be
       * satisfied because no elements are connected. (Note: Bound elements that
       * receive data do become enqueued clients and are properly ordered but
       * unbound elements are not.)
       *
       * To maintain the desired "client before host" ordering guarantee for this
       * case we rely on the "host stack. Client nodes registers themselves with
       * the creating host element when created. This ensures that all client dom
       * is readied in the proper order, maintaining the desired guarantee.
       *
       * @private
       */var hostStack = [];/**
                        @license
                        Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
                        This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
                        The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
                        The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
                        Code distributed by Google as part of the polymer project is also
                        subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
                        */ /**
                            * Total number of Polymer element instances created.
                            * @type {number}
                            */var instanceCount = 0; function incrementInstanceCount() { instanceCount++; }/**
     * Array of Polymer element classes that have been finalized.
     * @type {!Array<!PolymerElementConstructor>}
     */var registrations = [];/**
                                    * @param {!PolymerElementConstructor} prototype Element prototype to log
                                    * @private
                                    */function _regLog(prototype) { console.log('[' +/** @type {?} */prototype.is + ']: registered'); }/**
     * Registers a class prototype for telemetry purposes.
     * @param {!PolymerElementConstructor} prototype Element prototype to register
     * @protected
     */function register(prototype) { registrations.push(prototype); }/**
     * Logs all elements registered with an `is` to the console.
     * @public
     */function dumpRegistrations() { registrations.forEach(_regLog); } function normalizeProperties(props) { var output = {}; for (var _p8 in props) { var o = props[_p8]; output[_p8] = typeof o === 'function' ? { type: o } : o; } return output; }/**
     * Mixin that provides a minimal starting point to using the PropertiesChanged
     * mixin by providing a mechanism to declare properties in a static
     * getter (e.g. static get properties() { return { foo: String } }). Changes
     * are reported via the `_propertiesChanged` method.
     *
     * This mixin provides no specific support for rendering. Users are expected
     * to create a ShadowRoot and put content into it and update it in whatever
     * way makes sense. This can be done in reaction to properties changing by
     * implementing `_propertiesChanged`.
     *
     * @mixinFunction
     * @polymer
     * @appliesMixin PropertiesChanged
     * @summary Mixin that provides a minimal starting point for using
     * the PropertiesChanged mixin by providing a declarative `properties` object.
     * @template T
     * @param {function(new:T)} superClass Class to apply mixin to.
     * @return {function(new:T)} superClass with mixin applied.
     */var PropertiesMixin = dedupingMixin(function (superClass) {/**
     * @constructor
     * @implements {Polymer_PropertiesChanged}
     * @private
     */var base = PropertiesChanged(superClass);/**
                                                    * Returns the super class constructor for the given class, if it is an
                                                    * instance of the PropertiesMixin.
                                                    *
                                                    * @param {!PropertiesMixinConstructor} constructor PropertiesMixin constructor
                                                    * @return {?PropertiesMixinConstructor} Super class constructor
                                                    */function superPropertiesClass(constructor) {
            var superCtor = Object.getPrototypeOf(constructor);// Note, the `PropertiesMixin` class below only refers to the class
            // generated by this call to the mixin; the instanceof test only works
            // because the mixin is deduped and guaranteed only to apply once, hence
            // all constructors in a proto chain will see the same `PropertiesMixin`
            return babelHelpers.instanceof(superCtor.prototype, PropertiesMixin) ?/** @type {!PropertiesMixinConstructor} */superCtor : null;
          }/**
       * Returns a memoized version of the `properties` object for the
       * given class. Properties not in object format are converted to at
       * least {type}.
       *
       * @param {PropertiesMixinConstructor} constructor PropertiesMixin constructor
       * @return {Object} Memoized properties object
       */function ownProperties(constructor) { if (!constructor.hasOwnProperty(JSCompiler_renameProperty('__ownProperties', constructor))) { var _props = null; if (constructor.hasOwnProperty(JSCompiler_renameProperty('properties', constructor))) { var properties = constructor.properties; if (properties) { _props = normalizeProperties(properties); } } constructor.__ownProperties = _props; } return constructor.__ownProperties; }/**
       * @polymer
       * @mixinClass
       * @extends {base}
       * @implements {Polymer_PropertiesMixin}
       * @unrestricted
       */var PropertiesMixin =/*#__PURE__*/function (_base2) {
            babelHelpers.inherits(PropertiesMixin, _base2); function PropertiesMixin() { babelHelpers.classCallCheck(this, PropertiesMixin); return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(PropertiesMixin).apply(this, arguments)); } babelHelpers.createClass(PropertiesMixin, [{
              key: "_initializeProperties",/**
         * Overrides `PropertiesChanged` method and adds a call to
         * `finalize` which lazily configures the element's property accessors.
         * @override
         * @return {void}
         */value: function _initializeProperties() { incrementInstanceCount(); this.constructor.finalize(); babelHelpers.get(babelHelpers.getPrototypeOf(PropertiesMixin.prototype), "_initializeProperties", this).call(this); }/**
         * Called when the element is added to a document.
         * Calls `_enableProperties` to turn on property system from
         * `PropertiesChanged`.
         * @suppress {missingProperties} Super may or may not implement the callback
         * @return {void}
         * @override
         */}, {
              key: "connectedCallback", value: function connectedCallback() { if (babelHelpers.get(babelHelpers.getPrototypeOf(PropertiesMixin.prototype), "connectedCallback", this)) { babelHelpers.get(babelHelpers.getPrototypeOf(PropertiesMixin.prototype), "connectedCallback", this).call(this); } this._enableProperties(); }/**
         * Called when the element is removed from a document
         * @suppress {missingProperties} Super may or may not implement the callback
         * @return {void}
         * @override
         */}, { key: "disconnectedCallback", value: function disconnectedCallback() { if (babelHelpers.get(babelHelpers.getPrototypeOf(PropertiesMixin.prototype), "disconnectedCallback", this)) { babelHelpers.get(babelHelpers.getPrototypeOf(PropertiesMixin.prototype), "disconnectedCallback", this).call(this); } } }], [{
              key: "finalize",/**
         * Finalizes an element definition, including ensuring any super classes
         * are also finalized. This includes ensuring property
         * accessors exist on the element prototype. This method calls
         * `_finalizeClass` to finalize each constructor in the prototype chain.
         * @return {void}
         * @nocollapse
         */value: function finalize() { if (!this.hasOwnProperty(JSCompiler_renameProperty('__finalized', this))) { var superCtor = superPropertiesClass(/** @type {!PropertiesMixinConstructor} */this); if (superCtor) { superCtor.finalize(); } this.__finalized = true; this._finalizeClass(); } }/**
         * Finalize an element class. This includes ensuring property
         * accessors exist on the element prototype. This method is called by
         * `finalize` and finalizes the class constructor.
         *
         * @protected
         * @nocollapse
         */}, {
              key: "_finalizeClass", value: function _finalizeClass() { var props = ownProperties(/** @type {!PropertiesMixinConstructor} */this); if (props) {/** @type {?} */this.createProperties(props); } }/**
         * Returns a memoized version of all properties, including those inherited
         * from super classes. Properties not in object format are converted to
         * at least {type}.
         *
         * @return {Object} Object containing properties for this class
         * @protected
         * @nocollapse
         */}, {
              key: "typeForProperty",/**
         * Overrides `PropertiesChanged` method to return type specified in the
         * static `properties` object for the given property.
         * @param {string} name Name of property
         * @return {*} Type to which to deserialize attribute
         *
         * @protected
         * @nocollapse
         */value: function typeForProperty(name) { var info = this._properties[name]; return info && info.type; }
            }, {
              key: "observedAttributes",/**
       * Implements standard custom elements getter to observes the attributes
       * listed in `properties`.
       * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do
       * @nocollapse
       */get: function get() { var _this5 = this; if (!this.hasOwnProperty(JSCompiler_renameProperty('__observedAttributes', this))) { register(this.prototype); var _props2 = this._properties; this.__observedAttributes = _props2 ? Object.keys(_props2).map(function (p) { return _this5.prototype._addPropertyToAttributeMap(p); }) : []; } return this.__observedAttributes; }
            }, { key: "_properties", get: function get() { if (!this.hasOwnProperty(JSCompiler_renameProperty('__properties', this))) { var superCtor = superPropertiesClass(/** @type {!PropertiesMixinConstructor} */this); this.__properties = Object.assign({}, superCtor && superCtor._properties, ownProperties(/** @type {PropertiesMixinConstructor} */this)); } return this.__properties; } }]); return PropertiesMixin;
          }(base); return PropertiesMixin;
        }); var bundledImportMeta = _objectSpread({}, meta, { url: new URL('./node_modules/%40polymer/polymer/lib/mixins/element-mixin.js', meta.url).href }); var version = '3.4.1'; var builtCSS = window.ShadyCSS && window.ShadyCSS['cssBuild'];/**
                                                                           * Element class mixin that provides the core API for Polymer's meta-programming
                                                                           * features including template stamping, data-binding, attribute deserialization,
                                                                           * and property change observation.
                                                                           *
                                                                           * Subclassers may provide the following static getters to return metadata
                                                                           * used to configure Polymer's features for the class:
                                                                           *
                                                                           * - `static get is()`: When the template is provided via a `dom-module`,
                                                                           *   users should return the `dom-module` id from a static `is` getter.  If
                                                                           *   no template is needed or the template is provided directly via the
                                                                           *   `template` getter, there is no need to define `is` for the element.
                                                                           *
                                                                           * - `static get template()`: Users may provide the template directly (as
                                                                           *   opposed to via `dom-module`) by implementing a static `template` getter.
                                                                           *   The getter must return an `HTMLTemplateElement`.
                                                                           *
                                                                           * - `static get properties()`: Should return an object describing
                                                                           *   property-related metadata used by Polymer features (key: property name
                                                                           *   value: object containing property metadata). Valid keys in per-property
                                                                           *   metadata include:
                                                                           *   - `type` (String|Number|Object|Array|...): Used by
                                                                           *     `attributeChangedCallback` to determine how string-based attributes
                                                                           *     are deserialized to JavaScript property values.
                                                                           *   - `notify` (boolean): Causes a change in the property to fire a
                                                                           *     non-bubbling event called `<property>-changed`. Elements that have
                                                                           *     enabled two-way binding to the property use this event to observe changes.
                                                                           *   - `readOnly` (boolean): Creates a getter for the property, but no setter.
                                                                           *     To set a read-only property, use the private setter method
                                                                           *     `_setProperty(property, value)`.
                                                                           *   - `observer` (string): Observer method name that will be called when
                                                                           *     the property changes. The arguments of the method are
                                                                           *     `(value, previousValue)`.
                                                                           *   - `computed` (string): String describing method and dependent properties
                                                                           *     for computing the value of this property (e.g. `'computeFoo(bar, zot)'`).
                                                                           *     Computed properties are read-only by default and can only be changed
                                                                           *     via the return value of the computing method.
                                                                           *
                                                                           * - `static get observers()`: Array of strings describing multi-property
                                                                           *   observer methods and their dependent properties (e.g.
                                                                           *   `'observeABC(a, b, c)'`).
                                                                           *
                                                                           * The base class provides default implementations for the following standard
                                                                           * custom element lifecycle callbacks; users may override these, but should
                                                                           * call the super method to ensure
                                                                           * - `constructor`: Run when the element is created or upgraded
                                                                           * - `connectedCallback`: Run each time the element is connected to the
                                                                           *   document
                                                                           * - `disconnectedCallback`: Run each time the element is disconnected from
                                                                           *   the document
                                                                           * - `attributeChangedCallback`: Run each time an attribute in
                                                                           *   `observedAttributes` is set or removed (note: this element's default
                                                                           *   `observedAttributes` implementation will automatically return an array
                                                                           *   of dash-cased attributes based on `properties`)
                                                                           *
                                                                           * @mixinFunction
                                                                           * @polymer
                                                                           * @appliesMixin PropertyEffects
                                                                           * @appliesMixin PropertiesMixin
                                                                           * @property rootPath {string} Set to the value of `rootPath`,
                                                                           *   which defaults to the main document path
                                                                           * @property importPath {string} Set to the value of the class's static
                                                                           *   `importPath` property, which defaults to the path of this element's
                                                                           *   `dom-module` (when `is` is used), but can be overridden for other
                                                                           *   import strategies.
                                                                           * @summary Element class mixin that provides the core API for Polymer's
                                                                           * meta-programming features.
                                                                           * @template T
                                                                           * @param {function(new:T)} superClass Class to apply mixin to.
                                                                           * @return {function(new:T)} superClass with mixin applied.
                                                                           */var ElementMixin = dedupingMixin(function (base) {/**
     * @constructor
     * @implements {Polymer_PropertyEffects}
     * @implements {Polymer_PropertiesMixin}
     * @extends {HTMLElement}
     * @private
     */var polymerElementBase = PropertiesMixin(PropertyEffects(base));/**
                                                                           * Returns a list of properties with default values.
                                                                           * This list is created as an optimization since it is a subset of
                                                                           * the list returned from `_properties`.
                                                                           * This list is used in `_initializeProperties` to set property defaults.
                                                                           *
                                                                           * @param {PolymerElementConstructor} constructor Element class
                                                                           * @return {PolymerElementProperties} Flattened properties for this class
                                                                           *   that have default values
                                                                           * @private
                                                                           */function propertyDefaults(constructor) { if (!constructor.hasOwnProperty(JSCompiler_renameProperty('__propertyDefaults', constructor))) { constructor.__propertyDefaults = null; var _props3 = constructor._properties; for (var _p9 in _props3) { var info = _props3[_p9]; if ('value' in info) { constructor.__propertyDefaults = constructor.__propertyDefaults || {}; constructor.__propertyDefaults[_p9] = info; } } } return constructor.__propertyDefaults; }/**
       * Returns a memoized version of the `observers` array.
       * @param {PolymerElementConstructor} constructor Element class
       * @return {Array} Array containing own observers for the given class
       * @protected
       */function ownObservers(constructor) { if (!constructor.hasOwnProperty(JSCompiler_renameProperty('__ownObservers', constructor))) { constructor.__ownObservers = constructor.hasOwnProperty(JSCompiler_renameProperty('observers', constructor)) ?/** @type {PolymerElementConstructor} */constructor.observers : null; } return constructor.__ownObservers; }/**
       * Creates effects for a property.
       *
       * Note, once a property has been set to
       * `readOnly`, `computed`, `reflectToAttribute`, or `notify`
       * these values may not be changed. For example, a subclass cannot
       * alter these settings. However, additional `observers` may be added
       * by subclasses.
       *
       * The info object should contain property metadata as follows:
       *
       * * `type`: {function} type to which an attribute matching the property
       * is deserialized. Note the property is camel-cased from a dash-cased
       * attribute. For example, 'foo-bar' attribute is deserialized to a
       * property named 'fooBar'.
       *
       * * `readOnly`: {boolean} creates a readOnly property and
       * makes a private setter for the private of the form '_setFoo' for a
       * property 'foo',
       *
       * * `computed`: {string} creates a computed property. A computed property
       * is also automatically set to `readOnly: true`. The value is calculated
       * by running a method and arguments parsed from the given string. For
       * example 'compute(foo)' will compute a given property when the
       * 'foo' property changes by executing the 'compute' method. This method
       * must return the computed value.
       *
       * * `reflectToAttribute`: {boolean} If true, the property value is reflected
       * to an attribute of the same name. Note, the attribute is dash-cased
       * so a property named 'fooBar' is reflected as 'foo-bar'.
       *
       * * `notify`: {boolean} sends a non-bubbling notification event when
       * the property changes. For example, a property named 'foo' sends an
       * event named 'foo-changed' with `event.detail` set to the value of
       * the property.
       *
       * * observer: {string} name of a method that runs when the property
       * changes. The arguments of the method are (value, previousValue).
       *
       * Note: Users may want control over modifying property
       * effects via subclassing. For example, a user might want to make a
       * reflectToAttribute property not do so in a subclass. We've chosen to
       * disable this because it leads to additional complication.
       * For example, a readOnly effect generates a special setter. If a subclass
       * disables the effect, the setter would fail unexpectedly.
       * Based on feedback, we may want to try to make effects more malleable
       * and/or provide an advanced api for manipulating them.
       *
       * @param {!PolymerElement} proto Element class prototype to add accessors
       *   and effects to
       * @param {string} name Name of the property.
       * @param {Object} info Info object from which to create property effects.
       * Supported keys:
       * @param {Object} allProps Flattened map of all properties defined in this
       *   element (including inherited properties)
       * @return {void}
       * @private
       */function createPropertyFromConfig(proto, name, info, allProps) {// computed forces readOnly...
            if (info.computed) { info.readOnly = true; }// Note, since all computed properties are readOnly, this prevents
            // adding additional computed property effects (which leads to a confusing
            // setup where multiple triggers for setting a property)
            // While we do have `hasComputedEffect` this is set on the property's
            // dependencies rather than itself.
            if (info.computed) { if (proto._hasReadOnlyEffect(name)) { console.warn("Cannot redefine computed property '".concat(name, "'.")); } else { proto._createComputedProperty(name, info.computed, allProps); } } if (info.readOnly && !proto._hasReadOnlyEffect(name)) { proto._createReadOnlyProperty(name, !info.computed); } else if (info.readOnly === false && proto._hasReadOnlyEffect(name)) { console.warn("Cannot make readOnly property '".concat(name, "' non-readOnly.")); } if (info.reflectToAttribute && !proto._hasReflectEffect(name)) { proto._createReflectedProperty(name); } else if (info.reflectToAttribute === false && proto._hasReflectEffect(name)) { console.warn("Cannot make reflected property '".concat(name, "' non-reflected.")); } if (info.notify && !proto._hasNotifyEffect(name)) { proto._createNotifyingProperty(name); } else if (info.notify === false && proto._hasNotifyEffect(name)) { console.warn("Cannot make notify property '".concat(name, "' non-notify.")); }// always add observer
            if (info.observer) { proto._createPropertyObserver(name, info.observer, allProps[info.observer]); }// always create the mapping from attribute back to property for deserialization.
            proto._addPropertyToAttributeMap(name);
          }/**
       * Process all style elements in the element template. Styles with the
       * `include` attribute are processed such that any styles in
       * the associated "style modules" are included in the element template.
       * @param {PolymerElementConstructor} klass Element class
       * @param {!HTMLTemplateElement} template Template to process
       * @param {string} is Name of element
       * @param {string} baseURI Base URI for element
       * @private
       */function processElementStyles(klass, template, is, baseURI) {
            if (!builtCSS) {
              var templateStyles = template.content.querySelectorAll('style'); var stylesWithImports = stylesFromTemplate(template);// insert styles from <link rel="import" type="css"> at the top of the template
              var linkedStyles = stylesFromModuleImports(is); var firstTemplateChild = template.content.firstElementChild; for (var idx = 0; idx < linkedStyles.length; idx++) { var s = linkedStyles[idx]; s.textContent = klass._processStyleText(s.textContent, baseURI); template.content.insertBefore(s, firstTemplateChild); }// keep track of the last "concrete" style in the template we have encountered
              var templateStyleIndex = 0;// ensure all gathered styles are actually in this template.
              for (var _i18 = 0; _i18 < stylesWithImports.length; _i18++) {
                var _s = stylesWithImports[_i18]; var templateStyle = templateStyles[templateStyleIndex];// if the style is not in this template, it's been "included" and
                // we put a clone of it in the template before the style that included it
                if (templateStyle !== _s) { _s = _s.cloneNode(true); templateStyle.parentNode.insertBefore(_s, templateStyle); } else { templateStyleIndex++; } _s.textContent = klass._processStyleText(_s.textContent, baseURI);
              }
            } if (window.ShadyCSS) { window.ShadyCSS.prepareTemplate(template, is); }// Support for `adoptedStylesheets` relies on using native Shadow DOM
            // and built CSS. Built CSS is required because runtime transformation of
            // `@apply` is not supported. This is because ShadyCSS relies on being able
            // to update a `style` element in the element template and this is
            // removed when using `adoptedStyleSheets`.
            // Note, it would be more efficient to allow style includes to become
            // separate stylesheets; however, because of `@apply` these are
            // potentially not shareable and sharing the ones that could be shared
            // would require some coordination. To keep it simple, all the includes
            // and styles are collapsed into a single shareable stylesheet.
            if (useAdoptedStyleSheetsWithBuiltCSS && builtCSS && supportsAdoptingStyleSheets) {// Remove styles in template and make a shareable stylesheet
              var styles = template.content.querySelectorAll('style'); if (styles) { var css = ''; Array.from(styles).forEach(function (s) { css += s.textContent; s.parentNode.removeChild(s); }); klass._styleSheet = new CSSStyleSheet(); klass._styleSheet.replaceSync(css); }
            }
          }/**
       * Look up template from dom-module for element
       *
       * @param {string} is Element name to look up
       * @return {?HTMLTemplateElement|undefined} Template found in dom module, or
       *   undefined if not found
       * @protected
       */function getTemplateFromDomModule(is) {
            var template = null;// Under strictTemplatePolicy in 3.x+, dom-module lookup is only allowed
            // when opted-in via allowTemplateFromDomModule
            if (is && (!strictTemplatePolicy || allowTemplateFromDomModule)) {
              template =/** @type {?HTMLTemplateElement} */DomModule.import(is, 'template');// Under strictTemplatePolicy, require any element with an `is`
              // specified to have a dom-module
              if (strictTemplatePolicy && !template) { throw new Error("strictTemplatePolicy: expecting dom-module or null template for ".concat(is)); }
            } return template;
          }/**
       * @polymer
       * @mixinClass
       * @unrestricted
       * @implements {Polymer_ElementMixin}
       * @extends {polymerElementBase}
       */var PolymerElement =/*#__PURE__*/function (_polymerElementBase) {
            babelHelpers.inherits(PolymerElement, _polymerElementBase); babelHelpers.createClass(PolymerElement, null, [{
              key: "_finalizeClass",/**
         * Override of PropertiesMixin _finalizeClass to create observers and
         * find the template.
         * @return {void}
         * @protected
         * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do
         * @nocollapse
         */value: function _finalizeClass() {// TODO(https://github.com/google/closure-compiler/issues/3240):
                //     Change back to just super.methodCall()
                polymerElementBase._finalizeClass.call(this); var observers = ownObservers(this); if (observers) { this.createObservers(observers, this._properties); } this._prepareTemplate();
              }/** @nocollapse */
            }, {
              key: "_prepareTemplate", value: function _prepareTemplate() {// note: create "working" template that is finalized at instance time
                var template =/** @type {PolymerElementConstructor} */this.template; if (template) { if (typeof template === 'string') { console.error('template getter must return HTMLTemplateElement'); template = null; } else if (!legacyOptimizations) { template = template.cloneNode(true); } }/** @override */this.prototype._template = template;
              }/**
         * Override of PropertiesChanged createProperties to create accessors
         * and property effects for all of the properties.
         * @param {!Object} props .
         * @return {void}
         * @protected
         * @nocollapse
         */}, {
              key: "createProperties", value: function createProperties(props) { for (var _p10 in props) { createPropertyFromConfig(/** @type {?} */this.prototype, _p10, props[_p10], props); } }/**
         * Creates observers for the given `observers` array.
         * Leverages `PropertyEffects` to create observers.
         * @param {Object} observers Array of observer descriptors for
         *   this class
         * @param {Object} dynamicFns Object containing keys for any properties
         *   that are functions and should trigger the effect when the function
         *   reference is changed
         * @return {void}
         * @protected
         * @nocollapse
         */}, {
              key: "createObservers", value: function createObservers(observers, dynamicFns) { var proto = this.prototype; for (var _i19 = 0; _i19 < observers.length; _i19++) { proto._createMethodObserver(observers[_i19], dynamicFns); } }/**
         * Returns the template that will be stamped into this element's shadow root.
         *
         * If a `static get is()` getter is defined, the default implementation will
         * return the first `<template>` in a `dom-module` whose `id` matches this
         * element's `is` (note that a `_template` property on the class prototype
         * takes precedence over the `dom-module` template, to maintain legacy
         * element semantics; a subclass will subsequently fall back to its super
         * class template if neither a `prototype._template` or a `dom-module` for
         * the class's `is` was found).
         *
         * Users may override this getter to return an arbitrary template
         * (in which case the `is` getter is unnecessary). The template returned
         * must be an `HTMLTemplateElement`.
         *
         * Note that when subclassing, if the super class overrode the default
         * implementation and the subclass would like to provide an alternate
         * template via a `dom-module`, it should override this getter and
         * return `DomModule.import(this.is, 'template')`.
         *
         * If a subclass would like to modify the super class template, it should
         * clone it rather than modify it in place.  If the getter does expensive
         * work such as cloning/modifying a template, it should memoize the
         * template for maximum performance:
         *
         *   let memoizedTemplate;
         *   class MySubClass extends MySuperClass {
         *     static get template() {
         *       if (!memoizedTemplate) {
         *         memoizedTemplate = super.template.cloneNode(true);
         *         let subContent = document.createElement('div');
         *         subContent.textContent = 'This came from MySubClass';
         *         memoizedTemplate.content.appendChild(subContent);
         *       }
         *       return memoizedTemplate;
         *     }
         *   }
         *
         * @return {!HTMLTemplateElement|string} Template to be stamped
         * @nocollapse
         */}, {
              key: "polymerElementVersion",/**
       * Current Polymer version in Semver notation.
       * @type {string} Semver notation of the current version of Polymer.
       * @nocollapse
       */get: function get() { return version; }
            }, {
              key: "template", get: function get() {// Explanation of template-related properties:
                // - constructor.template (this getter): the template for the class.
                //     This can come from the prototype (for legacy elements), from a
                //     dom-module, or from the super class's template (or can be overridden
                //     altogether by the user)
                // - constructor._template: memoized version of constructor.template
                // - prototype._template: working template for the element, which will be
                //     parsed and modified in place. It is a cloned version of
                //     constructor.template, saved in _finalizeClass(). Note that before
                //     this getter is called, for legacy elements this could be from a
                //     _template field on the info object passed to Polymer(), a behavior,
                //     or set in registered(); once the static getter runs, a clone of it
                //     will overwrite it on the prototype as the working template.
                if (!this.hasOwnProperty(JSCompiler_renameProperty('_template', this))) {
                  var protoTemplate = this.prototype.hasOwnProperty(JSCompiler_renameProperty('_template', this.prototype)) ? this.prototype._template : undefined; this._template =// If user has put template on prototype (e.g. in legacy via registered
                    // callback or info object), prefer that first. Note that `null` is
                    // used as a sentinel to indicate "no template" and can be used to
                    // override a super template, whereas `undefined` is used as a
                    // sentinel to mean "fall-back to default template lookup" via
                    // dom-module and/or super.template.
                    protoTemplate !== undefined ? protoTemplate :// Look in dom-module associated with this element's is
                      this.hasOwnProperty(JSCompiler_renameProperty('is', this)) && getTemplateFromDomModule(/** @type {PolymerElementConstructor}*/this.is) ||// Next look for superclass template (call the super impl this
                      // way so that `this` points to the superclass)
                      Object.getPrototypeOf(/** @type {PolymerElementConstructor}*/this.prototype).constructor.template;
                } return this._template;
              }/**
         * Set the template.
         *
         * @param {!HTMLTemplateElement|string} value Template to set.
         * @nocollapse
         */, set: function set(value) { this._template = value; }/**
         * Path matching the url from which the element was imported.
         *
         * This path is used to resolve url's in template style cssText.
         * The `importPath` property is also set on element instances and can be
         * used to create bindings relative to the import path.
         *
         * For elements defined in ES modules, users should implement
         * `static get importMeta() { return import.meta; }`, and the default
         * implementation of `importPath` will  return `import.meta.url`'s path.
         * For elements defined in HTML imports, this getter will return the path
         * to the document containing a `dom-module` element matching this
         * element's static `is` property.
         *
         * Note, this path should contain a trailing `/`.
         *
         * @return {string} The import path for this element class
         * @suppress {missingProperties}
         * @nocollapse
         */}, { key: "importPath", get: function get() { if (!this.hasOwnProperty(JSCompiler_renameProperty('_importPath', this))) { var meta = this.importMeta; if (meta) { this._importPath = pathFromUrl(meta.url); } else { var module = DomModule.import(/** @type {PolymerElementConstructor} */this.is); this._importPath = module && module.assetpath || Object.getPrototypeOf(/** @type {PolymerElementConstructor}*/this.prototype).constructor.importPath; } } return this._importPath; } }]); function PolymerElement() { var _this6; babelHelpers.classCallCheck(this, PolymerElement); _this6 = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(PolymerElement).call(this));/** @type {HTMLTemplateElement} */_this6._template;/** @type {string} */_this6._importPath;/** @type {string} */_this6.rootPath;/** @type {string} */_this6.importPath;/** @type {StampedTemplate | HTMLElement | ShadowRoot} */_this6.root;/** @type {!Object<string, !Element>} */_this6.$; return _this6; }/**
         * Overrides the default `PropertyAccessors` to ensure class
         * metaprogramming related to property accessors and effects has
         * completed (calls `finalize`).
         *
         * It also initializes any property defaults provided via `value` in
         * `properties` metadata.
         *
         * @return {void}
         * @override
         * @suppress {invalidCasts,missingProperties} go/missingfnprops
         */babelHelpers.createClass(PolymerElement, [{
                key: "_initializeProperties", value: function _initializeProperties() {
                  this.constructor.finalize();// note: finalize template when we have access to `localName` to
                  // avoid dependence on `is` for polyfilling styling.
                  this.constructor._finalizeTemplate(/** @type {!HTMLElement} */this.localName); babelHelpers.get(babelHelpers.getPrototypeOf(PolymerElement.prototype), "_initializeProperties", this).call(this);// set path defaults
                  this.rootPath = rootPath; this.importPath = this.constructor.importPath;// apply property defaults...
                  var p$ = propertyDefaults(this.constructor); if (!p$) { return; } for (var _p11 in p$) {
                    var info = p$[_p11]; if (this._canApplyPropertyDefault(_p11)) {
                      var value = typeof info.value == 'function' ? info.value.call(this) : info.value;// Set via `_setProperty` if there is an accessor, to enable
                      // initializing readOnly property defaults
                      if (this._hasAccessor(_p11)) { this._setPendingProperty(_p11, value, true); } else { this[_p11] = value; }
                    }
                  }
                }/**
         * Determines if a property dfeault can be applied. For example, this
         * prevents a default from being applied when a property that has no
         * accessor is overridden by its host before upgrade (e.g. via a binding).
         * @override
         * @param {string} property Name of the property
         * @return {boolean} Returns true if the property default can be applied.
         */}, {
                key: "_canApplyPropertyDefault", value: function _canApplyPropertyDefault(property) { return !this.hasOwnProperty(property); }/**
         * Gather style text for a style element in the template.
         *
         * @param {string} cssText Text containing styling to process
         * @param {string} baseURI Base URI to rebase CSS paths against
         * @return {string} The processed CSS text
         * @protected
         * @nocollapse
         */}, {
                key: "connectedCallback",/**
         * Provides a default implementation of the standard Custom Elements
         * `connectedCallback`.
         *
         * The default implementation enables the property effects system and
         * flushes any pending properties, and updates shimmed CSS properties
         * when using the ShadyCSS scoping/custom properties polyfill.
         *
         * @override
         * @suppress {missingProperties, invalidCasts} Super may or may not
         *     implement the callback
         * @return {void}
         */value: function connectedCallback() { if (window.ShadyCSS && this._template) { window.ShadyCSS.styleElement(/** @type {!HTMLElement} */this); } babelHelpers.get(babelHelpers.getPrototypeOf(PolymerElement.prototype), "connectedCallback", this).call(this); }/**
         * Stamps the element template.
         *
         * @return {void}
         * @override
         */}, {
                key: "ready", value: function ready() { if (this._template) { this.root = this._stampTemplate(this._template); this.$ = this.root.$; } babelHelpers.get(babelHelpers.getPrototypeOf(PolymerElement.prototype), "ready", this).call(this); }/**
         * Implements `PropertyEffects`'s `_readyClients` call. Attaches
         * element dom by calling `_attachDom` with the dom stamped from the
         * element's template via `_stampTemplate`. Note that this allows
         * client dom to be attached to the element prior to any observers
         * running.
         *
         * @return {void}
         * @override
         */}, {
                key: "_readyClients", value: function _readyClients() {
                  if (this._template) { this.root = this._attachDom(/** @type {StampedTemplate} */this.root); }// The super._readyClients here sets the clients initialized flag.
                  // We must wait to do this until after client dom is created/attached
                  // so that this flag can be checked to prevent notifications fired
                  // during this process from being handled before clients are ready.
                  babelHelpers.get(babelHelpers.getPrototypeOf(PolymerElement.prototype), "_readyClients", this).call(this);
                }/**
         * Attaches an element's stamped dom to itself. By default,
         * this method creates a `shadowRoot` and adds the dom to it.
         * However, this method may be overridden to allow an element
         * to put its dom in another location.
         *
         * @override
         * @throws {Error}
         * @suppress {missingReturn}
         * @param {StampedTemplate} dom to attach to the element.
         * @return {ShadowRoot} node to which the dom has been attached.
         */}, {
                key: "_attachDom", value: function _attachDom(dom) {
                  var n = wrap(this); if (n.attachShadow) {
                    if (dom) {
                      if (!n.shadowRoot) {
                        n.attachShadow({ mode: 'open', shadyUpgradeFragment: dom }); n.shadowRoot.appendChild(dom);// When `adoptedStyleSheets` is supported a stylesheet is made
                        // available on the element constructor.
                        if (this.constructor._styleSheet) { n.shadowRoot.adoptedStyleSheets = [this.constructor._styleSheet]; }
                      } if (syncInitialRender && window.ShadyDOM) { window.ShadyDOM.flushInitial(n.shadowRoot); } return n.shadowRoot;
                    } return null;
                  } else {
                    throw new Error('ShadowDOM not available. ' +// TODO(sorvell): move to compile-time conditional when supported
                      'PolymerElement can create dom as children instead of in ' + 'ShadowDOM by setting `this.root = this;\` before \`ready\`.');
                  }
                }/**
         * When using the ShadyCSS scoping and custom property shim, causes all
         * shimmed styles in this element (and its subtree) to be updated
         * based on current custom property values.
         *
         * The optional parameter overrides inline custom property styles with an
         * object of properties where the keys are CSS properties, and the values
         * are strings.
         *
         * Example: `this.updateStyles({'--color': 'blue'})`
         *
         * These properties are retained unless a value of `null` is set.
         *
         * Note: This function does not support updating CSS mixins.
         * You can not dynamically change the value of an `@apply`.
         *
         * @override
         * @param {Object=} properties Bag of custom property key/values to
         *   apply to this element.
         * @return {void}
         * @suppress {invalidCasts}
         */}, {
                key: "updateStyles", value: function updateStyles(properties) { if (window.ShadyCSS) { window.ShadyCSS.styleSubtree(/** @type {!HTMLElement} */this, properties); } }/**
         * Rewrites a given URL relative to a base URL. The base URL defaults to
         * the original location of the document containing the `dom-module` for
         * this element. This method will return the same URL before and after
         * bundling.
         *
         * Note that this function performs no resolution for URLs that start
         * with `/` (absolute URLs) or `#` (hash identifiers).  For general purpose
         * URL resolution, use `window.URL`.
         *
         * @override
         * @param {string} url URL to resolve.
         * @param {string=} base Optional base URL to resolve against, defaults
         * to the element's `importPath`
         * @return {string} Rewritten URL relative to base
         */}, {
                key: "resolveUrl", value: function resolveUrl(url, base) { if (!base && this.importPath) { base = _resolveUrl(this.importPath); } return _resolveUrl(url, base); }/**
         * Overrides `PropertyEffects` to add map of dynamic functions on
         * template info, for consumption by `PropertyEffects` template binding
         * code. This map determines which method templates should have accessors
         * created for them.
         *
         * @param {!HTMLTemplateElement} template Template
         * @param {!TemplateInfo} templateInfo Template metadata for current template
         * @param {!NodeInfo} nodeInfo Node metadata for current template.
         * @return {boolean} .
         * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do
         * @nocollapse
         */}], [{
                key: "_processStyleText", value: function _processStyleText(cssText, baseURI) { return resolveCss(cssText, baseURI); }/**
        * Configures an element `proto` to function with a given `template`.
        * The element name `is` and extends `ext` must be specified for ShadyCSS
        * style scoping.
        *
        * @param {string} is Tag name (or type extension name) for this element
        * @return {void}
        * @protected
        * @nocollapse
        */}, {
                key: "_finalizeTemplate", value: function _finalizeTemplate(is) {/** @const {HTMLTemplateElement} */var template = this.prototype._template; if (template && !template.__polymerFinalized) {
                  template.__polymerFinalized = true; var importPath = this.importPath; var baseURI = importPath ? _resolveUrl(importPath) : '';// e.g. support `include="module-name"`, and ShadyCSS
                  processElementStyles(this, template, is, baseURI); this.prototype._bindTemplate(template);
                }
                }
              }, {
                key: "_parseTemplateContent", value: function _parseTemplateContent(template, templateInfo, nodeInfo) {
                  templateInfo.dynamicFns = templateInfo.dynamicFns || this._properties;// TODO(https://github.com/google/closure-compiler/issues/3240):
                  //     Change back to just super.methodCall()
                  return polymerElementBase._parseTemplateContent.call(this, template, templateInfo, nodeInfo);
                }/**
         * Overrides `PropertyEffects` to warn on use of undeclared properties in
         * template.
         *
         * @param {Object} templateInfo Template metadata to add effect to
         * @param {string} prop Property that should trigger the effect
         * @param {Object=} effect Effect metadata object
         * @return {void}
         * @protected
         * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do
         * @nocollapse
         */}, {
                key: "_addTemplatePropertyEffect", value: function _addTemplatePropertyEffect(templateInfo, prop, effect) {// Warn if properties are used in template without being declared.
                  // Properties must be listed in `properties` to be included in
                  // `observedAttributes` since CE V1 reads that at registration time, and
                  // since we want to keep template parsing lazy, we can't automatically
                  // add undeclared properties used in templates to `observedAttributes`.
                  // The warning is only enabled in `legacyOptimizations` mode, since
                  // we don't want to spam existing users who might have adopted the
                  // shorthand when attribute deserialization is not important.
                  if (legacyWarnings && !(prop in this._properties) &&// Methods used in templates with no dependencies (or only literal
                    // dependencies) become accessors with template effects; ignore these
                    !(effect.info.part.signature && effect.info.part.signature.static) &&// Warnings for bindings added to nested templates are handled by
                    // templatizer so ignore both the host-to-template bindings
                    // (`hostProp`) and TemplateInstance-to-child bindings
                    // (`nestedTemplate`)
                    !effect.info.part.hostProp && !templateInfo.nestedTemplate) { console.warn("Property '".concat(prop, "' used in template but not declared in 'properties'; ") + "attribute will not be observed."); }// TODO(https://github.com/google/closure-compiler/issues/3240):
                  //     Change back to just super.methodCall()
                  return polymerElementBase._addTemplatePropertyEffect.call(this, templateInfo, prop, effect);
                }
              }]); return PolymerElement;
          }(polymerElementBase); return PolymerElement;
        });/**
       * When using the ShadyCSS scoping and custom property shim, causes all
       * shimmed `styles` (via `custom-style`) in the document (and its subtree)
       * to be updated based on current custom property values.
       *
       * The optional parameter overrides inline custom property styles with an
       * object of properties where the keys are CSS properties, and the values
       * are strings.
       *
       * Example: `updateStyles({'--color': 'blue'})`
       *
       * These properties are retained unless a value of `null` is set.
       *
       * @param {Object=} props Bag of custom property key/values to
       *   apply to the document.
       * @return {void}
       */var updateStyles = function updateStyles(props) { if (window.ShadyCSS) { window.ShadyCSS.styleDocument(props); } }; var LiteralString =/*#__PURE__*/function () {
          function LiteralString(string) { babelHelpers.classCallCheck(this, LiteralString);/** @type {string} */this.value = string.toString(); }/**
       * @return {string} LiteralString string value
       * @override
       */babelHelpers.createClass(LiteralString, [{ key: "toString", value: function toString() { return this.value; } }]); return LiteralString;
        }();/**
     * @param {*} value Object to stringify into HTML
     * @return {string} HTML stringified form of `obj`
     */function literalValue(value) { if (babelHelpers.instanceof(value, LiteralString)) { return (/** @type {!LiteralString} */value.value); } else { throw new Error("non-literal value passed to Polymer's htmlLiteral function: ".concat(value)); } }/**
     * @param {*} value Object to stringify into HTML
     * @return {string} HTML stringified form of `obj`
     */function htmlValue(value) { if (babelHelpers.instanceof(value, HTMLTemplateElement)) { return (/** @type {!HTMLTemplateElement } */value.innerHTML); } else if (babelHelpers.instanceof(value, LiteralString)) { return literalValue(value); } else { throw new Error("non-template value passed to Polymer's html function: ".concat(value)); } }/**
     * A template literal tag that creates an HTML <template> element from the
     * contents of the string.
     *
     * This allows you to write a Polymer Template in JavaScript.
     *
     * Templates can be composed by interpolating `HTMLTemplateElement`s in
     * expressions in the JavaScript template literal. The nested template's
     * `innerHTML` is included in the containing template.  The only other
     * values allowed in expressions are those returned from `htmlLiteral`
     * which ensures only literal values from JS source ever reach the HTML, to
     * guard against XSS risks.
     *
     * All other values are disallowed in expressions to help prevent XSS
     * attacks; however, `htmlLiteral` can be used to compose static
     * string values into templates. This is useful to compose strings into
     * places that do not accept html, like the css text of a `style`
     * element.
     *
     * Example:
     *
     *     static get template() {
     *       return html`
     *         <style>:host{ content:"..." }</style>
     *         <div class="shadowed">${this.partialTemplate}</div>
     *         ${super.template}
     *       `;
     *     }
     *     static get partialTemplate() { return html`<span>Partial!</span>`; }
     *
     * @param {!ITemplateArray} strings Constant parts of tagged template literal
     * @param {...*} values Variable parts of tagged template literal
     * @return {!HTMLTemplateElement} Constructed HTMLTemplateElement
     */var html = function html(strings) { var template =/** @type {!HTMLTemplateElement} */document.createElement('template'); for (var _len4 = arguments.length, values = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) { values[_key4 - 1] = arguments[_key4]; } template.innerHTML = values.reduce(function (acc, v, idx) { return acc + htmlValue(v) + strings[idx + 1]; }, strings[0]); return template; };/**
      * An html literal tag that can be used with `html` to compose.
      * a literal string.
      *
      * Example:
      *
      *     static get template() {
      *       return html`
      *         <style>
      *           :host { display: block; }
      *           ${this.styleTemplate()}
      *         </style>
      *         <div class="shadowed">${staticValue}</div>
      *         ${super.template}
      *       `;
      *     }
      *     static get styleTemplate() {
      *        return htmlLiteral`.shadowed { background: gray; }`;
      *     }
      *
      * @param {!ITemplateArray} strings Constant parts of tagged template literal
      * @param {...*} values Variable parts of tagged template literal
      * @return {!LiteralString} Constructed literal string
      */var htmlLiteral = function htmlLiteral(strings) { for (var _len5 = arguments.length, values = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) { values[_key5 - 1] = arguments[_key5]; } return new LiteralString(values.reduce(function (acc, v, idx) { return acc + literalValue(v) + strings[idx + 1]; }, strings[0])); }; var PolymerElement = ElementMixin(HTMLElement);/**
                                                    @license
                                                    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
                                                    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
                                                    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
                                                    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
                                                    Code distributed by Google as part of the polymer project is also
                                                    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
                                                    */'use strict'; var nativeShadow = !(window['ShadyDOM'] && window['ShadyDOM']['inUse']); var nativeCssVariables_;/**
                            * @param {(ShadyCSSOptions | ShadyCSSInterface)=} settings
                            */function calcCssVariables(settings) {
          if (settings && settings['shimcssproperties']) { nativeCssVariables_ = false; } else {// chrome 49 has semi-working css vars, check if box-shadow works
            // safari 9.1 has a recalc bug: https://bugs.webkit.org/show_bug.cgi?id=155782
            // However, shim css custom properties are only supported with ShadyDOM enabled,
            // so fall back on native if we do not detect ShadyDOM
            // Edge 15: custom properties used in ::before and ::after will also be used in the parent element
            // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12414257/
            nativeCssVariables_ = nativeShadow || Boolean(!navigator.userAgent.match(/AppleWebKit\/601|Edge\/15/) && window.CSS && CSS.supports && CSS.supports('box-shadow', '0 0 0 var(--foo)'));
          }
        }/** @type {string | undefined} */var cssBuild; if (window.ShadyCSS && window.ShadyCSS.cssBuild !== undefined) { cssBuild = window.ShadyCSS.cssBuild; }/** @type {boolean} */var disableRuntime = Boolean(window.ShadyCSS && window.ShadyCSS.disableRuntime); if (window.ShadyCSS && window.ShadyCSS.nativeCss !== undefined) { nativeCssVariables_ = window.ShadyCSS.nativeCss; } else if (window.ShadyCSS) {
          calcCssVariables(window.ShadyCSS);// reset window variable to let ShadyCSS API take its place
          window.ShadyCSS = undefined;
        } else { calcCssVariables(window['WebComponents'] && window['WebComponents']['flags']); }// Hack for type error under new type inference which doesn't like that
        // nativeCssVariables is updated in a function and assigns the type
        // `function(): ?` instead of `boolean`.
        var nativeCssVariables =/** @type {boolean} */nativeCssVariables_;/**
                                                                        @license
                                                                        Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
                                                                        This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
                                                                        The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
                                                                        The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
                                                                        Code distributed by Google as part of the polymer project is also
                                                                        subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
                                                                        */ /*
                                                                           Extremely simple css parser. Intended to be not more than what we need
                                                                           and definitely not necessarily correct =).
                                                                           */'use strict';/** @unrestricted */var StyleNode = function StyleNode() { babelHelpers.classCallCheck(this, StyleNode);/** @type {number} */this['start'] = 0;/** @type {number} */this['end'] = 0;/** @type {StyleNode} */this['previous'] = null;/** @type {StyleNode} */this['parent'] = null;/** @type {Array<StyleNode>} */this['rules'] = null;/** @type {string} */this['parsedCssText'] = '';/** @type {string} */this['cssText'] = '';/** @type {boolean} */this['atRule'] = false;/** @type {number} */this['type'] = 0;/** @type {string} */this['keyframesName'] = '';/** @type {string} */this['selector'] = '';/** @type {string} */this['parsedSelector'] = ''; };/**
     * @param {string} text
     * @return {StyleNode}
     */function parse(text) { text = clean(text); return parseCss(lex(text), text); }// remove stuff we don't care about that may hinder parsing
  /**
   * @param {string} cssText
   * @return {string}
   */function clean(cssText) { return cssText.replace(RX.comments, '').replace(RX.port, ''); }// super simple {...} lexer that returns a node tree
  /**
   * @param {string} text
   * @return {!StyleNode}
   */function lex(text) { var root = new StyleNode(); root['start'] = 0; root['end'] = text.length; var n = root; for (var _i20 = 0, l = text.length; _i20 < l; _i20++) { if (text[_i20] === OPEN_BRACE) { if (!n['rules']) { n['rules'] = []; } var _p12 = n; var previous = _p12['rules'][_p12['rules'].length - 1] || null; n = new StyleNode(); n['start'] = _i20 + 1; n['parent'] = _p12; n['previous'] = previous; _p12['rules'].push(n); } else if (text[_i20] === CLOSE_BRACE) { n['end'] = _i20 + 1; n = n['parent'] || root; } } return root; }// add selectors/cssText to node tree
  /**
   * @param {StyleNode} node
   * @param {string} text
   * @return {!StyleNode}
   */function parseCss(node, text) {
          var t = text.substring(node['start'], node['end'] - 1); node['parsedCssText'] = node['cssText'] = t.trim(); if (node['parent']) {
            var ss = node['previous'] ? node['previous']['end'] : node['parent']['start']; t = text.substring(ss, node['start'] - 1); t = _expandUnicodeEscapes(t); t = t.replace(RX.multipleSpaces, ' ');// TODO(sorvell): ad hoc; make selector include only after last ;
            // helps with mixin syntax
            t = t.substring(t.lastIndexOf(';') + 1); var s = node['parsedSelector'] = node['selector'] = t.trim(); node['atRule'] = s.indexOf(AT_START) === 0;// note, support a subset of rule types...
            if (node['atRule']) { if (s.indexOf(MEDIA_START) === 0) { node['type'] = types.MEDIA_RULE; } else if (s.match(RX.keyframesRule)) { node['type'] = types.KEYFRAMES_RULE; node['keyframesName'] = node['selector'].split(RX.multipleSpaces).pop(); } } else { if (s.indexOf(VAR_START) === 0) { node['type'] = types.MIXIN_RULE; } else { node['type'] = types.STYLE_RULE; } }
          } var r$ = node['rules']; if (r$) { for (var _i21 = 0, l = r$.length, r; _i21 < l && (r = r$[_i21]); _i21++) { parseCss(r, text); } } return node;
        }/**
     * conversion of sort unicode escapes with spaces like `\33 ` (and longer) into
     * expanded form that doesn't require trailing space `\000033`
     * @param {string} s
     * @return {string}
     */function _expandUnicodeEscapes(s) { return s.replace(/\\([0-9a-f]{1,6})\s/gi, function () { var code = arguments[1], repeat = 6 - code.length; while (repeat--) { code = '0' + code; } return '\\' + code; }); }/**
     * stringify parsed css.
     * @param {StyleNode} node
     * @param {boolean=} preserveProperties
     * @param {string=} text
     * @return {string}
     */function stringify(node, preserveProperties) {
          var text = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';// calc rule cssText
          var cssText = ''; if (node['cssText'] || node['rules']) { var r$ = node['rules']; if (r$ && !_hasMixinRules(r$)) { for (var _i22 = 0, l = r$.length, r; _i22 < l && (r = r$[_i22]); _i22++) { cssText = stringify(r, preserveProperties, cssText); } } else { cssText = preserveProperties ? node['cssText'] : removeCustomProps(node['cssText']); cssText = cssText.trim(); if (cssText) { cssText = '  ' + cssText + '\n'; } } }// emit rule if there is cssText
          if (cssText) { if (node['selector']) { text += node['selector'] + ' ' + OPEN_BRACE + '\n'; } text += cssText; if (node['selector']) { text += CLOSE_BRACE + '\n\n'; } } return text;
        }/**
     * @param {Array<StyleNode>} rules
     * @return {boolean}
     */function _hasMixinRules(rules) { var r = rules[0]; return Boolean(r) && Boolean(r['selector']) && r['selector'].indexOf(VAR_START) === 0; }/**
     * @param {string} cssText
     * @return {string}
     */function removeCustomProps(cssText) { cssText = removeCustomPropAssignment(cssText); return removeCustomPropApply(cssText); }/**
     * @param {string} cssText
     * @return {string}
     */function removeCustomPropAssignment(cssText) { return cssText.replace(RX.customProp, '').replace(RX.mixinProp, ''); }/**
     * @param {string} cssText
     * @return {string}
     */function removeCustomPropApply(cssText) { return cssText.replace(RX.mixinApply, '').replace(RX.varApply, ''); }/** @enum {number} */var types = { STYLE_RULE: 1, KEYFRAMES_RULE: 7, MEDIA_RULE: 4, MIXIN_RULE: 1000 }; var OPEN_BRACE = '{'; var CLOSE_BRACE = '}';// helper regexp's
        var RX = { comments: /\/\*[^*]*\*+([^/*][^*]*\*+)*\//gim, port: /@import[^;]*;/gim, customProp: /(?:^[^;\-\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\n]|$)/gim, mixinProp: /(?:^[^;\-\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\n]|$)?/gim, mixinApply: /@apply\s*\(?[^);]*\)?\s*(?:[;\n]|$)?/gim, varApply: /[^;:]*?:[^;]*?var\([^;]*\)(?:[;\n]|$)?/gim, keyframesRule: /^@[^\s]*keyframes/, multipleSpaces: /\s+/g }; var VAR_START = '--'; var MEDIA_START = '@media'; var AT_START = '@';/**
                        @license
                        Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
                        This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
                        The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
                        The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
                        Code distributed by Google as part of the polymer project is also
                        subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
                        */var VAR_ASSIGN = /(?:^|[;\s{]\s*)(--[\w-]*?)\s*:\s*(?:((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};{])+)|\{([^}]*)\}(?:(?=[;\s}])|$))/gi; var MIXIN_MATCH = /(?:^|\W+)@apply\s*\(?([^);\n]*)\)?/gi; var VAR_CONSUMED = /(--[\w-]+)\s*([:,;)]|$)/gi; var ANIMATION_MATCH = /(animation\s*:)|(animation-name\s*:)/; var MEDIA_MATCH = /@media\s(.*)/; var IS_VAR = /^--/; var BRACKETED = /\{[^}]*\}/g; var HOST_PREFIX = '(?:^|[^.#[:])'; var HOST_SUFFIX = '($|[.:[\\s>+~])';/**
                                         @license
                                         Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
                                         This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
                                         The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
                                         The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
                                         Code distributed by Google as part of the polymer project is also
                                         subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
                                         */'use strict';/** @type {!Set<string>} */var styleTextSet = new Set(); var scopingAttribute = 'shady-unscoped';/**
                                                     * Add a specifically-marked style to the document directly, and only one copy of that style.
                                                     *
                                                     * @param {!HTMLStyleElement} style
                                                     * @return {undefined}
                                                     */function processUnscopedStyle(style) { var text = style.textContent; if (!styleTextSet.has(text)) { styleTextSet.add(text); var newStyle = document.createElement('style'); newStyle.setAttribute('shady-unscoped', ''); newStyle.textContent = text; document.head.appendChild(newStyle); } }/**
     * Check if a style is supposed to be unscoped
     * @param {!HTMLStyleElement} style
     * @return {boolean} true if the style has the unscoping attribute
     */function isUnscopedStyle(style) { return style.hasAttribute(scopingAttribute); }/**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */'use strict'; function toCssText(rules, callback) { if (!rules) { return ''; } if (typeof rules === 'string') { rules = parse(rules); } if (callback) { forEachRule(rules, callback); } return stringify(rules, nativeCssVariables); }/**
     * @param {HTMLStyleElement} style
     * @return {StyleNode}
     */function rulesForStyle(style) { if (!style['__cssRules'] && style.textContent) { style['__cssRules'] = parse(style.textContent); } return style['__cssRules'] || null; }// Tests if a rule is a keyframes selector, which looks almost exactly
  // like a normal selector but is not (it has nothing to do with scoping
  // for example).
  /**
   * @param {StyleNode} rule
   * @return {boolean}
   */function isKeyframesSelector(rule) { return Boolean(rule['parent']) && rule['parent']['type'] === types.KEYFRAMES_RULE; }/**
     * @param {StyleNode} node
     * @param {Function=} styleRuleCallback
     * @param {Function=} keyframesRuleCallback
     * @param {boolean=} onlyActiveRules
     */function forEachRule(node, styleRuleCallback, keyframesRuleCallback, onlyActiveRules) {
          if (!node) { return; } var skipRules = false; var type = node['type']; if (onlyActiveRules) {
            if (type === types.MEDIA_RULE) {
              var matchMedia = node['selector'].match(MEDIA_MATCH); if (matchMedia) {// if rule is a non matching @media rule, skip subrules
                if (!window.matchMedia(matchMedia[1]).matches) { skipRules = true; }
              }
            }
          } if (type === types.STYLE_RULE) { styleRuleCallback(node); } else if (keyframesRuleCallback && type === types.KEYFRAMES_RULE) { keyframesRuleCallback(node); } else if (type === types.MIXIN_RULE) { skipRules = true; } var r$ = node['rules']; if (r$ && !skipRules) { for (var _i23 = 0, l = r$.length, r; _i23 < l && (r = r$[_i23]); _i23++) { forEachRule(r, styleRuleCallback, keyframesRuleCallback, onlyActiveRules); } }
        }// add a string of cssText to the document.
  /**
   * @param {string} cssText
   * @param {string} moniker
   * @param {Node} target
   * @param {Node} contextNode
   * @return {HTMLStyleElement}
   */function applyCss(cssText, moniker, target, contextNode) { var style = createScopeStyle(cssText, moniker); applyStyle(style, target, contextNode); return style; }/**
     * @param {string} cssText
     * @param {string} moniker
     * @return {!HTMLStyleElement}
     */function createScopeStyle(cssText, moniker) { var style =/** @type {HTMLStyleElement} */document.createElement('style'); if (moniker) { style.setAttribute('scope', moniker); } style.textContent = cssText; return style; }/**
     * Track the position of the last added style for placing placeholders
     * @type {Node}
     */var lastHeadApplyNode = null;// insert a comment node as a styling position placeholder.
  /**
   * @param {string} moniker
   * @return {!Comment}
   */function applyStylePlaceHolder(moniker) { var placeHolder = document.createComment(' Shady DOM styles for ' + moniker + ' '); var after = lastHeadApplyNode ? lastHeadApplyNode['nextSibling'] : null; var scope = document.head; scope.insertBefore(placeHolder, after || scope.firstChild); lastHeadApplyNode = placeHolder; return placeHolder; }/**
     * @param {HTMLStyleElement} style
     * @param {?Node} target
     * @param {?Node} contextNode
     */function applyStyle(style, target, contextNode) {
          target = target || document.head; var after = contextNode && contextNode.nextSibling || target.firstChild; target.insertBefore(style, after); if (!lastHeadApplyNode) { lastHeadApplyNode = style; } else {// only update lastHeadApplyNode if the new style is inserted after the old lastHeadApplyNode
            var position = style.compareDocumentPosition(lastHeadApplyNode); if (position === Node.DOCUMENT_POSITION_PRECEDING) { lastHeadApplyNode = style; }
          }
        }/**
     * @param {string} buildType
     * @return {boolean}
     */function isTargetedBuild(buildType) { return nativeShadow ? buildType === 'shadow' : buildType === 'shady'; }/**
     * Walk from text[start] matching parens and
     * returns position of the outer end paren
     * @param {string} text
     * @param {number} start
     * @return {number}
     */function findMatchingParen(text, start) { var level = 0; for (var _i24 = start, l = text.length; _i24 < l; _i24++) { if (text[_i24] === '(') { level++; } else if (text[_i24] === ')') { if (--level === 0) { return _i24; } } } return -1; }/**
     * @param {string} str
     * @param {function(string, string, string, string)} callback
     */function processVariableAndFallback(str, callback) {// find 'var('
          var start = str.indexOf('var('); if (start === -1) {// no var?, everything is prefix
            return callback(str, '', '', '');
          }//${prefix}var(${inner})${suffix}
          var end = findMatchingParen(str, start + 3); var inner = str.substring(start + 4, end); var prefix = str.substring(0, start);// suffix may have other variables
          var suffix = processVariableAndFallback(str.substring(end + 1), callback); var comma = inner.indexOf(',');// value and fallback args should be trimmed to match in property lookup
          if (comma === -1) {// variable, no fallback
            return callback(prefix, inner.trim(), '', suffix);
          }// var(${value},${fallback})
          var value = inner.substring(0, comma).trim(); var fallback = inner.substring(comma + 1).trim(); return callback(prefix, value, fallback, suffix);
        }/**
     * @param {Element} element
     * @param {string} value
     */function setElementClassRaw(element, value) {// use native setAttribute provided by ShadyDOM when setAttribute is patched
          if (nativeShadow) { element.setAttribute('class', value); } else { window['ShadyDOM']['nativeMethods']['setAttribute'].call(element, 'class', value); }
        }/**
     * @type {function(*):*}
     */var wrap$1 = window['ShadyDOM'] && window['ShadyDOM']['wrap'] || function (node) { return node; };/**
                                                                                           * @param {Element | {is: string, extends: string}} element
                                                                                           * @return {{is: string, typeExtension: string}}
                                                                                           */function getIsExtends(element) {
          var localName = element['localName']; var is = '', typeExtension = '';/*
                            NOTE: technically, this can be wrong for certain svg elements
                            with `-` in the name like `<font-face>`
                            */if (localName) { if (localName.indexOf('-') > -1) { is = localName; } else { typeExtension = localName; is = element.getAttribute && element.getAttribute('is') || ''; } } else { is =/** @type {?} */element.is; typeExtension =/** @type {?} */element.extends; } return { is: is, typeExtension: typeExtension };
        }/**
     * @param {Element|DocumentFragment} element
     * @return {string}
     */function gatherStyleText(element) {/** @type {!Array<string>} */var styleTextParts = []; var styles =/** @type {!NodeList<!HTMLStyleElement>} */element.querySelectorAll('style'); for (var _i25 = 0; _i25 < styles.length; _i25++) { var _style2 = styles[_i25]; if (isUnscopedStyle(_style2)) { if (!nativeShadow) { processUnscopedStyle(_style2); _style2.parentNode.removeChild(_style2); } } else { styleTextParts.push(_style2.textContent); _style2.parentNode.removeChild(_style2); } } return styleTextParts.join('').trim(); }/**
     * Split a selector separated by commas into an array in a smart way
     * @param {string} selector
     * @return {!Array<string>}
     */function splitSelectorList(selector) {
          var parts = []; var part = ''; for (var _i26 = 0; _i26 >= 0 && _i26 < selector.length; _i26++) {// A selector with parentheses will be one complete part
            if (selector[_i26] === '(') {// find the matching paren
              var end = findMatchingParen(selector, _i26);// push the paren block into the part
              part += selector.slice(_i26, end + 1);// move the index to after the paren block
              _i26 = end;
            } else if (selector[_i26] === ',') { parts.push(part); part = ''; } else { part += selector[_i26]; }
          }// catch any pieces after the last comma
          if (part) { parts.push(part); } return parts;
        } var CSS_BUILD_ATTR = 'css-build';/**
                                       * Return the polymer-css-build "build type" applied to this element
                                       *
                                       * @param {!HTMLElement} element
                                       * @return {string} Can be "", "shady", or "shadow"
                                       */function getCssBuild(element) {
          if (cssBuild !== undefined) { return (/** @type {string} */cssBuild); } if (element.__cssBuild === undefined) {// try attribute first, as it is the common case
            var attrValue = element.getAttribute(CSS_BUILD_ATTR); if (attrValue) { element.__cssBuild = attrValue; } else {
              var buildComment = getBuildComment(element); if (buildComment !== '') {// remove build comment so it is not needlessly copied into every element instance
                removeBuildComment(element);
              } element.__cssBuild = buildComment;
            }
          } return element.__cssBuild || '';
        }/**
     * Check if the given element, either a <template> or <style>, has been processed
     * by polymer-css-build.
     *
     * If so, then we can make a number of optimizations:
     * - polymer-css-build will decompose mixins into individual CSS Custom Properties,
     * so the ApplyShim can be skipped entirely.
     * - Under native ShadowDOM, the style text can just be copied into each instance
     * without modification
     * - If the build is "shady" and ShadyDOM is in use, the styling does not need
     * scoping beyond the shimming of CSS Custom Properties
     *
     * @param {!HTMLElement} element
     * @return {boolean}
     */function elementHasBuiltCss(element) { return getCssBuild(element) !== ''; }/**
     * For templates made with tagged template literals, polymer-css-build will
     * insert a comment of the form `\x3c!--css-build:shadow--\x3e`
     *
     * @param {!HTMLElement} element
     * @return {string}
     */function getBuildComment(element) { var buildComment = element.localName === 'template' ?/** @type {!HTMLTemplateElement} */element.content.firstChild : element.firstChild; if (babelHelpers.instanceof(buildComment, Comment)) { var commentParts = buildComment.textContent.trim().split(':'); if (commentParts[0] === CSS_BUILD_ATTR) { return commentParts[1]; } } return ''; }/**
     * Check if the css build status is optimal, and do no unneeded work.
     *
     * @param {string=} cssBuild CSS build status
     * @return {boolean} css build is optimal or not
     */function isOptimalCssBuild() {
          var cssBuild = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';// CSS custom property shim always requires work
          if (cssBuild === '' || !nativeCssVariables) { return false; } return nativeShadow ? cssBuild === 'shadow' : cssBuild === 'shady';
        }/**
     * @param {!HTMLElement} element
     */function removeBuildComment(element) { var buildComment = element.localName === 'template' ?/** @type {!HTMLTemplateElement} */element.content.firstChild : element.firstChild; buildComment.parentNode.removeChild(buildComment); }/**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */'use strict'; function updateNativeProperties(element, properties) {// remove previous properties
          for (var _p13 in properties) {// NOTE: for bc with shim, don't apply null values.
            if (_p13 === null) { element.style.removeProperty(_p13); } else { element.style.setProperty(_p13, properties[_p13]); }
          }
        }/**
     * @param {Element} element
     * @param {string} property
     * @return {string}
     */function _getComputedStyleValue(element, property) {/**
     * @const {string}
     */var value = window.getComputedStyle(element).getPropertyValue(property); if (!value) { return ''; } else { return value.trim(); }
        }/**
     * return true if `cssText` contains a mixin definition or consumption
     * @param {string} cssText
     * @return {boolean}
     */function _detectMixin(cssText) {
          var has = MIXIN_MATCH.test(cssText) || VAR_ASSIGN.test(cssText);// reset state of the regexes
          MIXIN_MATCH.lastIndex = 0; VAR_ASSIGN.lastIndex = 0; return has;
        }/**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */ /*
        * The apply shim simulates the behavior of `@apply` proposed at
        * https://tabatkins.github.io/specs/css-apply-rule/.
        * The approach is to convert a property like this:
        *
        *    --foo: {color: red; background: blue;}
        *
        * to this:
        *
        *    --foo_-_color: red;
        *    --foo_-_background: blue;
        *
        * Then where `@apply --foo` is used, that is converted to:
        *
        *    color: var(--foo_-_color);
        *    background: var(--foo_-_background);
        *
        * This approach generally works but there are some issues and limitations.
        * Consider, for example, that somewhere *between* where `--foo` is set and used,
        * another element sets it to:
        *
        *    --foo: { border: 2px solid red; }
        *
        * We must now ensure that the color and background from the previous setting
        * do not apply. This is accomplished by changing the property set to this:
        *
        *    --foo_-_border: 2px solid red;
        *    --foo_-_color: initial;
        *    --foo_-_background: initial;
        *
        * This works but introduces one new issue.
        * Consider this setup at the point where the `@apply` is used:
        *
        *    background: orange;
        *    `@apply` --foo;
        *
        * In this case the background will be unset (initial) rather than the desired
        * `orange`. We address this by altering the property set to use a fallback
        * value like this:
        *
        *    color: var(--foo_-_color);
        *    background: var(--foo_-_background, orange);
        *    border: var(--foo_-_border);
        *
        * Note that the default is retained in the property set and the `background` is
        * the desired `orange`. This leads us to a limitation.
        *
        * Limitation 1:
       
        * Only properties in the rule where the `@apply`
        * is used are considered as default values.
        * If another rule matches the element and sets `background` with
        * less specificity than the rule in which `@apply` appears,
        * the `background` will not be set.
        *
        * Limitation 2:
        *
        * When using Polymer's `updateStyles` api, new properties may not be set for
        * `@apply` properties.
       
       */'use strict'; var APPLY_NAME_CLEAN = /;\s*/m; var INITIAL_INHERIT = /^\s*(initial)|(inherit)\s*$/; var IMPORTANT = /\s*!important/;// separator used between mixin-name and mixin-property-name when producing properties
        // NOTE: plain '-' may cause collisions in user styles
        var MIXIN_VAR_SEP = '_-_';/**
                                * @typedef {!Object<string, string>}
                                */var PropertyEntry;// eslint-disable-line no-unused-vars
  /**
   * @typedef {!Object<string, boolean>}
   */var DependantsEntry;// eslint-disable-line no-unused-vars
  /** @typedef {{
   *    properties: PropertyEntry,
   *    dependants: DependantsEntry
   * }}
   */var MixinMapEntry;// eslint-disable-line no-unused-vars
        // map of mixin to property names
        // --foo: {border: 2px} -> {properties: {(--foo, ['border'])}, dependants: {'element-name': proto}}
        var MixinMap =/*#__PURE__*/function () {
          function MixinMap() { babelHelpers.classCallCheck(this, MixinMap);/** @type {!Object<string, !MixinMapEntry>} */this._map = {}; }/**
       * @param {string} name
       * @param {!PropertyEntry} props
       */babelHelpers.createClass(MixinMap, [{
            key: "set", value: function set(name, props) { name = name.trim(); this._map[name] = { properties: props, dependants: {} }; }/**
       * @param {string} name
       * @return {MixinMapEntry}
       */}, { key: "get", value: function get(name) { name = name.trim(); return this._map[name] || null; } }]); return MixinMap;
        }();/**
     * Callback for when an element is marked invalid
     * @type {?function(string)}
     */var invalidCallback = null;/** @unrestricted */var ApplyShim =/*#__PURE__*/function () {
          function ApplyShim() { babelHelpers.classCallCheck(this, ApplyShim);/** @type {?string} */this._currentElement = null;/** @type {HTMLMetaElement} */this._measureElement = null; this._map = new MixinMap(); }/**
       * return true if `cssText` contains a mixin definition or consumption
       * @param {string} cssText
       * @return {boolean}
       */babelHelpers.createClass(ApplyShim, [{
            key: "detectMixin", value: function detectMixin(cssText) { return _detectMixin(cssText); }/**
       * Gather styles into one style for easier processing
       * @param {!HTMLTemplateElement} template
       * @return {HTMLStyleElement}
       */}, {
            key: "gatherStyles", value: function gatherStyles(template) { var styleText = gatherStyleText(template.content); if (styleText) { var _style3 =/** @type {!HTMLStyleElement} */document.createElement('style'); _style3.textContent = styleText; template.content.insertBefore(_style3, template.content.firstChild); return _style3; } return null; }/**
       * @param {!HTMLTemplateElement} template
       * @param {string} elementName
       * @return {StyleNode}
       */}, {
            key: "transformTemplate", value: function transformTemplate(template, elementName) { if (template._gatheredStyle === undefined) { template._gatheredStyle = this.gatherStyles(template); }/** @type {HTMLStyleElement} */var style = template._gatheredStyle; return style ? this.transformStyle(style, elementName) : null; }/**
       * @param {!HTMLStyleElement} style
       * @param {string} elementName
       * @return {StyleNode}
       */}, {
            key: "transformStyle", value: function transformStyle(style) { var elementName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ''; var ast = rulesForStyle(style); this.transformRules(ast, elementName); style.textContent = toCssText(ast); return ast; }/**
       * @param {!HTMLStyleElement} style
       * @return {StyleNode}
       */}, {
            key: "transformCustomStyle", value: function transformCustomStyle(style) { var _this7 = this; var ast = rulesForStyle(style); forEachRule(ast, function (rule) { if (rule['selector'] === ':root') { rule['selector'] = 'html'; } _this7.transformRule(rule); }); style.textContent = toCssText(ast); return ast; }/**
       * @param {StyleNode} rules
       * @param {string} elementName
       */}, {
            key: "transformRules", value: function transformRules(rules, elementName) { var _this8 = this; this._currentElement = elementName; forEachRule(rules, function (r) { _this8.transformRule(r); }); this._currentElement = null; }/**
       * @param {!StyleNode} rule
       */}, {
            key: "transformRule", value: function transformRule(rule) {
              rule['cssText'] = this.transformCssText(rule['parsedCssText'], rule);// :root was only used for variable assignment in property shim,
              // but generates invalid selectors with real properties.
              // replace with `:host > *`, which serves the same effect
              if (rule['selector'] === ':root') { rule['selector'] = ':host > *'; }
            }/**
       * @param {string} cssText
       * @param {!StyleNode} rule
       * @return {string}
       */}, {
            key: "transformCssText", value: function transformCssText(cssText, rule) {
              var _this9 = this;// produce variables
              cssText = cssText.replace(VAR_ASSIGN, function (matchText, propertyName, valueProperty, valueMixin) { return _this9._produceCssProperties(matchText, propertyName, valueProperty, valueMixin, rule); });// consume mixins
              return this._consumeCssProperties(cssText, rule);
            }/**
       * @param {string} property
       * @return {string}
       */}, {
            key: "_getInitialValueForProperty", value: function _getInitialValueForProperty(property) { if (!this._measureElement) { this._measureElement =/** @type {HTMLMetaElement} */document.createElement('meta'); this._measureElement.setAttribute('apply-shim-measure', ''); this._measureElement.style.all = 'initial'; document.head.appendChild(this._measureElement); } return window.getComputedStyle(this._measureElement).getPropertyValue(property); }/**
       * Walk over all rules before this rule to find fallbacks for mixins
       *
       * @param {!StyleNode} startRule
       * @return {!Object}
       */}, {
            key: "_fallbacksFromPreviousRules", value: function _fallbacksFromPreviousRules(startRule) {
              var _this10 = this;// find the "top" rule
              var topRule = startRule; while (topRule['parent']) { topRule = topRule['parent']; } var fallbacks = {}; var seenStartRule = false; forEachRule(topRule, function (r) {// stop when we hit the input rule
                seenStartRule = seenStartRule || r === startRule; if (seenStartRule) { return; }// NOTE: Only matching selectors are "safe" for this fallback processing
                // It would be prohibitive to run `matchesSelector()` on each selector,
                // so we cheat and only check if the same selector string is used, which
                // guarantees things like specificity matching
                if (r['selector'] === startRule['selector']) { Object.assign(fallbacks, _this10._cssTextToMap(r['parsedCssText'])); }
              }); return fallbacks;
            }/**
       * replace mixin consumption with variable consumption
       * @param {string} text
       * @param {!StyleNode=} rule
       * @return {string}
       */}, {
            key: "_consumeCssProperties", value: function _consumeCssProperties(text, rule) {/** @type {Array} */var m = null;// loop over text until all mixins with defintions have been applied
              while (m = MIXIN_MATCH.exec(text)) {
                var matchText = m[0]; var mixinName = m[1]; var idx = m.index;// collect properties before apply to be "defaults" if mixin might override them
                // match includes a "prefix", so find the start and end positions of @apply
                var applyPos = idx + matchText.indexOf('@apply'); var afterApplyPos = idx + matchText.length;// find props defined before this @apply
                var textBeforeApply = text.slice(0, applyPos); var textAfterApply = text.slice(afterApplyPos); var defaults = rule ? this._fallbacksFromPreviousRules(rule) : {}; Object.assign(defaults, this._cssTextToMap(textBeforeApply)); var replacement = this._atApplyToCssProperties(mixinName, defaults);// use regex match position to replace mixin, keep linear processing time
                text = "".concat(textBeforeApply).concat(replacement).concat(textAfterApply);// move regex search to _after_ replacement
                MIXIN_MATCH.lastIndex = idx + replacement.length;
              } return text;
            }/**
       * produce variable consumption at the site of mixin consumption
       * `@apply` --foo; -> for all props (${propname}: var(--foo_-_${propname}, ${fallback[propname]}}))
       * Example:
       *  border: var(--foo_-_border); padding: var(--foo_-_padding, 2px)
       *
       * @param {string} mixinName
       * @param {Object} fallbacks
       * @return {string}
       */}, {
            key: "_atApplyToCssProperties", value: function _atApplyToCssProperties(mixinName, fallbacks) {
              mixinName = mixinName.replace(APPLY_NAME_CLEAN, ''); var vars = []; var mixinEntry = this._map.get(mixinName);// if we depend on a mixin before it is created
              // make a sentinel entry in the map to add this element as a dependency for when it is defined.
              if (!mixinEntry) { this._map.set(mixinName, {}); mixinEntry = this._map.get(mixinName); } if (mixinEntry) { if (this._currentElement) { mixinEntry.dependants[this._currentElement] = true; } var _p14, parts, f; var properties = mixinEntry.properties; for (_p14 in properties) { f = fallbacks && fallbacks[_p14]; parts = [_p14, ': var(', mixinName, MIXIN_VAR_SEP, _p14]; if (f) { parts.push(',', f.replace(IMPORTANT, '')); } parts.push(')'); if (IMPORTANT.test(properties[_p14])) { parts.push(' !important'); } vars.push(parts.join('')); } } return vars.join('; ');
            }/**
       * @param {string} property
       * @param {string} value
       * @return {string}
       */}, {
            key: "_replaceInitialOrInherit", value: function _replaceInitialOrInherit(property, value) {
              var match = INITIAL_INHERIT.exec(value); if (match) {
                if (match[1]) {// initial
                  // replace `initial` with the concrete initial value for this property
                  value = this._getInitialValueForProperty(property);
                } else {// inherit
                  // with this purposfully illegal value, the variable will be invalid at
                  // compute time (https://www.w3.org/TR/css-variables/#invalid-at-computed-value-time)
                  // and for inheriting values, will behave similarly
                  // we cannot support the same behavior for non inheriting values like 'border'
                  value = 'apply-shim-inherit';
                }
              } return value;
            }/**
       * "parse" a mixin definition into a map of properties and values
       * cssTextToMap('border: 2px solid black') -> ('border', '2px solid black')
       * @param {string} text
       * @param {boolean=} replaceInitialOrInherit
       * @return {!Object<string, string>}
       */}, {
            key: "_cssTextToMap", value: function _cssTextToMap(text) {
              var replaceInitialOrInherit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false; var props = text.split(';'); var property, value; var out = {}; for (var _i27 = 0, _p15, sp; _i27 < props.length; _i27++) {
                _p15 = props[_i27]; if (_p15) {
                  sp = _p15.split(':');// ignore lines that aren't definitions like @media
                  if (sp.length > 1) {
                    property = sp[0].trim();// some properties may have ':' in the value, like data urls
                    value = sp.slice(1).join(':'); if (replaceInitialOrInherit) { value = this._replaceInitialOrInherit(property, value); } out[property] = value;
                  }
                }
              } return out;
            }/**
       * @param {MixinMapEntry} mixinEntry
       */}, {
            key: "_invalidateMixinEntry", value: function _invalidateMixinEntry(mixinEntry) { if (!invalidCallback) { return; } for (var elementName in mixinEntry.dependants) { if (elementName !== this._currentElement) { invalidCallback(elementName); } } }/**
       * @param {string} matchText
       * @param {string} propertyName
       * @param {?string} valueProperty
       * @param {?string} valueMixin
       * @param {!StyleNode} rule
       * @return {string}
       */}, {
            key: "_produceCssProperties", value: function _produceCssProperties(matchText, propertyName, valueProperty, valueMixin, rule) {
              var _this11 = this;// handle case where property value is a mixin
              if (valueProperty) {// form: --mixin2: var(--mixin1), where --mixin1 is in the map
                processVariableAndFallback(valueProperty, function (prefix, value) { if (value && _this11._map.get(value)) { valueMixin = "@apply ".concat(value, ";"); } });
              } if (!valueMixin) { return matchText; } var mixinAsProperties = this._consumeCssProperties('' + valueMixin, rule); var prefix = matchText.slice(0, matchText.indexOf('--'));// `initial` and `inherit` as properties in a map should be replaced because
              // these keywords are eagerly evaluated when the mixin becomes CSS Custom Properties,
              // and would set the variable value, rather than carry the keyword to the `var()` usage.
              var mixinValues = this._cssTextToMap(mixinAsProperties, true); var combinedProps = mixinValues; var mixinEntry = this._map.get(propertyName); var oldProps = mixinEntry && mixinEntry.properties; if (oldProps) {// NOTE: since we use mixin, the map of properties is updated here
                // and this is what we want.
                combinedProps = Object.assign(Object.create(oldProps), mixinValues);
              } else { this._map.set(propertyName, combinedProps); } var out = []; var p, v;// set variables defined by current mixin
              var needToInvalidate = false; for (p in combinedProps) {
                v = mixinValues[p];// if property not defined by current mixin, set initial
                if (v === undefined) { v = 'initial'; } if (oldProps && !(p in oldProps)) { needToInvalidate = true; } out.push("".concat(propertyName).concat(MIXIN_VAR_SEP).concat(p, ": ").concat(v));
              } if (needToInvalidate) { this._invalidateMixinEntry(mixinEntry); } if (mixinEntry) { mixinEntry.properties = combinedProps; }// because the mixinMap is global, the mixin might conflict with
              // a different scope's simple variable definition:
              // Example:
              // some style somewhere:
              // --mixin1:{ ... }
              // --mixin2: var(--mixin1);
              // some other element:
              // --mixin1: 10px solid red;
              // --foo: var(--mixin1);
              // In this case, we leave the original variable definition in place.
              if (valueProperty) { prefix = "".concat(matchText, ";").concat(prefix); } return "".concat(prefix).concat(out.join('; '), ";");
            }
          }]); return ApplyShim;
        }();/* exports */ /* eslint-disable no-self-assign */ApplyShim.prototype['detectMixin'] = ApplyShim.prototype.detectMixin; ApplyShim.prototype['transformStyle'] = ApplyShim.prototype.transformStyle; ApplyShim.prototype['transformCustomStyle'] = ApplyShim.prototype.transformCustomStyle; ApplyShim.prototype['transformRules'] = ApplyShim.prototype.transformRules; ApplyShim.prototype['transformRule'] = ApplyShim.prototype.transformRule; ApplyShim.prototype['transformTemplate'] = ApplyShim.prototype.transformTemplate; ApplyShim.prototype['_separator'] = MIXIN_VAR_SEP;/* eslint-enable no-self-assign */Object.defineProperty(ApplyShim.prototype, 'invalidCallback', {/** @return {?function(string)} */get: function get() { return invalidCallback; },/** @param {?function(string)} cb */set: function set(cb) { invalidCallback = cb; } });/**
      @license
      Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
      This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
      The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
      The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
      Code distributed by Google as part of the polymer project is also
      subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
      */'use strict';/**
                 * @const {!Object<string, !HTMLTemplateElement>}
                 */var templateMap = {};/**
                          @license
                          Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
                          This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
                          The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
                          The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
                          Code distributed by Google as part of the polymer project is also
                          subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
                          */'use strict';/*
                 * Utilities for handling invalidating apply-shim mixins for a given template.
                 *
                 * The invalidation strategy involves keeping track of the "current" version of a template's mixins, and updating that count when a mixin is invalidated.
                 * The template
                 */ /** @const {string} */var CURRENT_VERSION = '_applyShimCurrentVersion';/** @const {string} */var NEXT_VERSION = '_applyShimNextVersion';/** @const {string} */var VALIDATING_VERSION = '_applyShimValidatingVersion';/**
                                                             * @const {Promise<void>}
                                                             */var promise = Promise.resolve();/**
                                      * @param {string} elementName
                                      */function invalidate(elementName) { var template = templateMap[elementName]; if (template) { invalidateTemplate(template); } }/**
     * This function can be called multiple times to mark a template invalid
     * and signal that the style inside must be regenerated.
     *
     * Use `startValidatingTemplate` to begin an asynchronous validation cycle.
     * During that cycle, call `templateIsValidating` to see if the template must
     * be revalidated
     * @param {HTMLTemplateElement} template
     */function invalidateTemplate(template) {// default the current version to 0
          template[CURRENT_VERSION] = template[CURRENT_VERSION] || 0;// ensure the "validating for" flag exists
          template[VALIDATING_VERSION] = template[VALIDATING_VERSION] || 0;// increment the next version
          template[NEXT_VERSION] = (template[NEXT_VERSION] || 0) + 1;
        }/**
     * @param {string} elementName
     * @return {boolean}
     */function isValid(elementName) { var template = templateMap[elementName]; if (template) { return templateIsValid(template); } return true; }/**
     * @param {HTMLTemplateElement} template
     * @return {boolean}
     */function templateIsValid(template) { return template[CURRENT_VERSION] === template[NEXT_VERSION]; }/**
     * @param {string} elementName
     * @return {boolean}
     */function isValidating(elementName) { var template = templateMap[elementName]; if (template) { return templateIsValidating(template); } return false; }/**
     * Returns true if the template is currently invalid and `startValidating` has been called since the last invalidation.
     * If false, the template must be validated.
     * @param {HTMLTemplateElement} template
     * @return {boolean}
     */function templateIsValidating(template) { return !templateIsValid(template) && template[VALIDATING_VERSION] === template[NEXT_VERSION]; }/**
     * the template is marked as `validating` for one microtask so that all instances
     * found in the tree crawl of `applyStyle` will update themselves,
     * but the template will only be updated once.
     * @param {string} elementName
    */function startValidating(elementName) { var template = templateMap[elementName]; startValidatingTemplate(template); }/**
     * Begin an asynchronous invalidation cycle.
     * This should be called after every validation of a template
     *
     * After one microtask, the template will be marked as valid until the next call to `invalidateTemplate`
     * @param {HTMLTemplateElement} template
     */function startValidatingTemplate(template) {// remember that the current "next version" is the reason for this validation cycle
          template[VALIDATING_VERSION] = template[NEXT_VERSION];// however, there only needs to be one async task to clear the counters
          if (!template._validating) {
            template._validating = true; promise.then(function () {// sync the current version to let future invalidations cause a refresh cycle
              template[CURRENT_VERSION] = template[NEXT_VERSION]; template._validating = false;
            });
          }
        }/**
     * @return {boolean}
     */function elementsAreInvalid() { for (var elementName in templateMap) { var _template2 = templateMap[elementName]; if (!templateIsValid(_template2)) { return true; } } return false; }/**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */'use strict';/** @type {Promise<void>} */var readyPromise = null;/** @type {?function(?function())} */var whenReady = window['HTMLImports'] && window['HTMLImports']['whenReady'] || null;/** @type {function()} */var resolveFn;/**
                  * @param {?function()} callback
                  */function documentWait(callback) { requestAnimationFrame(function () { if (whenReady) { whenReady(callback); } else { if (!readyPromise) { readyPromise = new Promise(function (resolve) { resolveFn = resolve; }); if (document.readyState === 'complete') { resolveFn(); } else { document.addEventListener('readystatechange', function () { if (document.readyState === 'complete') { resolveFn(); } }); } } readyPromise.then(function () { callback && callback(); }); } }); }/**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */'use strict'; var CustomStyleProvider; var SEEN_MARKER = '__seenByShadyCSS'; var CACHED_STYLE = '__shadyCSSCachedStyle';/** @type {?function(!HTMLStyleElement)} */var transformFn = null;/** @type {?function()} */var validateFn = null;/**
                         This interface is provided to add document-level <style> elements to ShadyCSS for processing.
                         These styles must be processed by ShadyCSS to simulate ShadowRoot upper-bound encapsulation from outside styles
                         In addition, these styles may also need to be processed for @apply rules and CSS Custom Properties
                         
                         To add document-level styles to ShadyCSS, one can call `ShadyCSS.addDocumentStyle(styleElement)` or `ShadyCSS.addDocumentStyle({getStyle: () => styleElement})`
                         
                         In addition, if the process used to discover document-level styles can be synchronously flushed, one should set `ShadyCSS.documentStyleFlush`.
                         This function will be called when calculating styles.
                         
                         An example usage of the document-level styling api can be found in `examples/document-style-lib.js`
                         
                         @unrestricted
                         */var CustomStyleInterface =/*#__PURE__*/function () {
          function CustomStyleInterface() {
            babelHelpers.classCallCheck(this, CustomStyleInterface);/** @type {!Array<!CustomStyleProvider>} */this['customStyles'] = []; this['enqueued'] = false;// NOTE(dfreedm): use quotes here to prevent closure inlining to `function(){}`;
            documentWait(function () { if (window['ShadyCSS']['flushCustomStyles']) { window['ShadyCSS']['flushCustomStyles'](); } });
          }/**
       * Queue a validation for new custom styles to batch style recalculations
       */babelHelpers.createClass(CustomStyleInterface, [{
            key: "enqueueDocumentValidation", value: function enqueueDocumentValidation() { if (this['enqueued'] || !validateFn) { return; } this['enqueued'] = true; documentWait(validateFn); }/**
       * @param {!HTMLStyleElement} style
       */}, {
            key: "addCustomStyle", value: function addCustomStyle(style) { if (!style[SEEN_MARKER]) { style[SEEN_MARKER] = true; this['customStyles'].push(style); this.enqueueDocumentValidation(); } }/**
       * @param {!CustomStyleProvider} customStyle
       * @return {HTMLStyleElement}
       */}, {
            key: "getStyleForCustomStyle", value: function getStyleForCustomStyle(customStyle) { if (customStyle[CACHED_STYLE]) { return customStyle[CACHED_STYLE]; } var style; if (customStyle['getStyle']) { style = customStyle['getStyle'](); } else { style = customStyle; } return style; }/**
       * @return {!Array<!CustomStyleProvider>}
       */}, {
            key: "processStyles", value: function processStyles() {
              var cs = this['customStyles']; for (var _i28 = 0; _i28 < cs.length; _i28++) {
                var customStyle = cs[_i28]; if (customStyle[CACHED_STYLE]) { continue; } var _style4 = this.getStyleForCustomStyle(customStyle); if (_style4) {// HTMLImports polyfill may have cloned the style into the main document,
                  // which is referenced with __appliedElement.
                  var styleToTransform =/** @type {!HTMLStyleElement} */_style4['__appliedElement'] || _style4; if (transformFn) { transformFn(styleToTransform); } customStyle[CACHED_STYLE] = styleToTransform;
                }
              } return cs;
            }
          }]); return CustomStyleInterface;
        }();/* eslint-disable no-self-assign */CustomStyleInterface.prototype['addCustomStyle'] = CustomStyleInterface.prototype.addCustomStyle; CustomStyleInterface.prototype['getStyleForCustomStyle'] = CustomStyleInterface.prototype.getStyleForCustomStyle; CustomStyleInterface.prototype['processStyles'] = CustomStyleInterface.prototype.processStyles;/* eslint-enable no-self-assign */Object.defineProperties(CustomStyleInterface.prototype, {
          'transformCallback': {/** @return {?function(!HTMLStyleElement)} */get: function get() { return transformFn; },/** @param {?function(!HTMLStyleElement)} fn */set: function set(fn) { transformFn = fn; } }, 'validateCallback': {/** @return {?function()} */get: function get() { return validateFn; },/**
       * @param {?function()} fn
       * @this {CustomStyleInterface}
       */set: function set(fn) { var needsEnqueue = false; if (!validateFn) { needsEnqueue = true; } validateFn = fn; if (needsEnqueue) { this.enqueueDocumentValidation(); } }
          }
        });/** @typedef {{
       * customStyles: !Array<!CustomStyleProvider>,
       * addCustomStyle: function(!CustomStyleProvider),
       * getStyleForCustomStyle: function(!CustomStyleProvider): HTMLStyleElement,
       * findStyles: function(),
       * transformCallback: ?function(!HTMLStyleElement),
       * validateCallback: ?function()
       * }}
       */var CustomStyleInterfaceInterface = {};/**
                                            @license
                                            Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
                                            This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
                                            The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
                                            The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
                                            Code distributed by Google as part of the polymer project is also
                                            subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
                                            */'use strict'; var applyShim = new ApplyShim(); var ApplyShimInterface =/*#__PURE__*/function () {
          function ApplyShimInterface() { babelHelpers.classCallCheck(this, ApplyShimInterface);/** @type {?CustomStyleInterfaceInterface} */this.customStyleInterface = null; applyShim['invalidCallback'] = invalidate; } babelHelpers.createClass(ApplyShimInterface, [{
            key: "ensure", value: function ensure() { var _this12 = this; if (this.customStyleInterface) { return; } if (window.ShadyCSS.CustomStyleInterface) { this.customStyleInterface =/** @type {!CustomStyleInterfaceInterface} */window.ShadyCSS.CustomStyleInterface; this.customStyleInterface['transformCallback'] = function (style) { applyShim.transformCustomStyle(style); }; this.customStyleInterface['validateCallback'] = function () { requestAnimationFrame(function () { if (_this12.customStyleInterface['enqueued']) { _this12.flushCustomStyles(); } }); }; } }/**
       * @param {!HTMLTemplateElement} template
       * @param {string} elementName
       */}, {
            key: "prepareTemplate", value: function prepareTemplate(template, elementName) {
              this.ensure(); if (elementHasBuiltCss(template)) { return; } templateMap[elementName] = template; var ast = applyShim.transformTemplate(template, elementName);// save original style ast to use for revalidating instances
              template['_styleAst'] = ast;
            }
          }, {
            key: "flushCustomStyles", value: function flushCustomStyles() { this.ensure(); if (!this.customStyleInterface) { return; } var styles = this.customStyleInterface['processStyles'](); if (!this.customStyleInterface['enqueued']) { return; } for (var _i29 = 0; _i29 < styles.length; _i29++) { var cs = styles[_i29]; var _style5 = this.customStyleInterface['getStyleForCustomStyle'](cs); if (_style5) { applyShim.transformCustomStyle(_style5); } } this.customStyleInterface['enqueued'] = false; }/**
       * @param {HTMLElement} element
       * @param {Object=} properties
       */}, {
            key: "styleSubtree", value: function styleSubtree(element, properties) { this.ensure(); if (properties) { updateNativeProperties(element, properties); } if (element.shadowRoot) { this.styleElement(element); var shadowChildren =/** @type {!ParentNode} */element.shadowRoot.children || element.shadowRoot.childNodes; for (var _i30 = 0; _i30 < shadowChildren.length; _i30++) { this.styleSubtree(/** @type {HTMLElement} */shadowChildren[_i30]); } } else { var children = element.children || element.childNodes; for (var _i31 = 0; _i31 < children.length; _i31++) { this.styleSubtree(/** @type {HTMLElement} */children[_i31]); } } }/**
       * @param {HTMLElement} element
       */}, {
            key: "styleElement", value: function styleElement(element) {
              this.ensure(); var _getIsExtends = getIsExtends(element), is = _getIsExtends.is; var template = templateMap[is]; if (template && elementHasBuiltCss(template)) { return; } if (template && !templateIsValid(template)) {// only revalidate template once
                if (!templateIsValidating(template)) { this.prepareTemplate(template, is); startValidatingTemplate(template); }// update this element instance
                var _root = element.shadowRoot; if (_root) {
                  var _style6 =/** @type {HTMLStyleElement} */_root.querySelector('style'); if (_style6) {// reuse the template's style ast, it has all the original css text
                    _style6['__cssRules'] = template['_styleAst']; _style6.textContent = toCssText(template['_styleAst']);
                  }
                }
              }
            }/**
       * @param {Object=} properties
       */}, { key: "styleDocument", value: function styleDocument(properties) { this.ensure(); this.styleSubtree(document.body, properties); } }]); return ApplyShimInterface;
        }(); if (!window.ShadyCSS || !window.ShadyCSS.ScopingShim) {
          var applyShimInterface = new ApplyShimInterface(); var _CustomStyleInterface = window.ShadyCSS && window.ShadyCSS.CustomStyleInterface;/** @suppress {duplicate} */window.ShadyCSS = {/**
       * @param {!HTMLTemplateElement} template
       * @param {string} elementName
       * @param {string=} elementExtends
       */prepareTemplate: function prepareTemplate(template, elementName, elementExtends) {// eslint-disable-line no-unused-vars
              applyShimInterface.flushCustomStyles(); applyShimInterface.prepareTemplate(template, elementName);
            },/**
       * @param {!HTMLTemplateElement} template
       * @param {string} elementName
       * @param {string=} elementExtends
       */prepareTemplateStyles: function prepareTemplateStyles(template, elementName, elementExtends) { window.ShadyCSS.prepareTemplate(template, elementName, elementExtends); },/**
       * @param {!HTMLTemplateElement} template
       * @param {string} elementName
       */prepareTemplateDom: function prepareTemplateDom(template, elementName) { },// eslint-disable-line no-unused-vars
  /**
       * @param {!HTMLElement} element
       * @param {Object=} properties
       */styleSubtree: function styleSubtree(element, properties) { applyShimInterface.flushCustomStyles(); applyShimInterface.styleSubtree(element, properties); },/**
       * @param {!HTMLElement} element
       */styleElement: function styleElement(element) { applyShimInterface.flushCustomStyles(); applyShimInterface.styleElement(element); },/**
       * @param {Object=} properties
       */styleDocument: function styleDocument(properties) { applyShimInterface.flushCustomStyles(); applyShimInterface.styleDocument(properties); },/**
       * @param {Element} element
       * @param {string} property
       * @return {string}
       */getComputedStyleValue: function getComputedStyleValue(element, property) { return _getComputedStyleValue(element, property); }, flushCustomStyles: function flushCustomStyles() { applyShimInterface.flushCustomStyles(); }, nativeCss: nativeCssVariables, nativeShadow: nativeShadow, cssBuild: cssBuild, disableRuntime: disableRuntime
          }; if (_CustomStyleInterface) { window.ShadyCSS.CustomStyleInterface = _CustomStyleInterface; }
        } window.ShadyCSS.ApplyShim = applyShim; var Debouncer =/*#__PURE__*/function () {
          function Debouncer() { babelHelpers.classCallCheck(this, Debouncer); this._asyncModule = null; this._callback = null; this._timer = null; }/**
       * Sets the scheduler; that is, a module with the Async interface,
       * a callback and optional arguments to be passed to the run function
       * from the async module.
       *
       * @param {!AsyncInterface} asyncModule Object with Async interface.
       * @param {function()} callback Callback to run.
       * @return {void}
       */babelHelpers.createClass(Debouncer, [{
            key: "setConfig", value: function setConfig(asyncModule, callback) { var _this13 = this; this._asyncModule = asyncModule; this._callback = callback; this._timer = this._asyncModule.run(function () { _this13._timer = null; debouncerQueue.delete(_this13); _this13._callback(); }); }/**
       * Cancels an active debouncer and returns a reference to itself.
       *
       * @return {void}
       */}, {
            key: "cancel", value: function cancel() {
              if (this.isActive()) {
                this._cancelAsync();// Canceling a debouncer removes its spot from the flush queue,
                // so if a debouncer is manually canceled and re-debounced, it
                // will reset its flush order (this is a very minor difference from 1.x)
                // Re-debouncing via the `debounce` API retains the 1.x FIFO flush order
                debouncerQueue.delete(this);
              }
            }/**
       * Cancels a debouncer's async callback.
       *
       * @return {void}
       */}, {
            key: "_cancelAsync", value: function _cancelAsync() { if (this.isActive()) { this._asyncModule.cancel(/** @type {number} */this._timer); this._timer = null; } }/**
       * Flushes an active debouncer and returns a reference to itself.
       *
       * @return {void}
       */}, {
            key: "flush", value: function flush() { if (this.isActive()) { this.cancel(); this._callback(); } }/**
       * Returns true if the debouncer is active.
       *
       * @return {boolean} True if active.
       */}, {
            key: "isActive", value: function isActive() { return this._timer != null; }/**
       * Creates a debouncer if no debouncer is passed as a parameter
       * or it cancels an active debouncer otherwise. The following
       * example shows how a debouncer can be called multiple times within a
       * microtask and "debounced" such that the provided callback function is
       * called once. Add this method to a custom element:
       *
       * ```js
       * import {microTask} from '@polymer/polymer/lib/utils/async.js';
       * import {Debouncer} from '@polymer/polymer/lib/utils/debounce.js';
       * // ...
       *
       * _debounceWork() {
       *   this._debounceJob = Debouncer.debounce(this._debounceJob,
       *       microTask, () => this._doWork());
       * }
       * ```
       *
       * If the `_debounceWork` method is called multiple times within the same
       * microtask, the `_doWork` function will be called only once at the next
       * microtask checkpoint.
       *
       * Note: In testing it is often convenient to avoid asynchrony. To accomplish
       * this with a debouncer, you can use `enqueueDebouncer` and
       * `flush`. For example, extend the above example by adding
       * `enqueueDebouncer(this._debounceJob)` at the end of the
       * `_debounceWork` method. Then in a test, call `flush` to ensure
       * the debouncer has completed.
       *
       * @param {Debouncer?} debouncer Debouncer object.
       * @param {!AsyncInterface} asyncModule Object with Async interface
       * @param {function()} callback Callback to run.
       * @return {!Debouncer} Returns a debouncer object.
       */}], [{
            key: "debounce", value: function debounce(debouncer, asyncModule, callback) {
              if (babelHelpers.instanceof(debouncer, Debouncer)) {// Cancel the async callback, but leave in debouncerQueue if it was
                // enqueued, to maintain 1.x flush order
                debouncer._cancelAsync();
              } else { debouncer = new Debouncer(); } debouncer.setConfig(asyncModule, callback); return debouncer;
            }
          }]); return Debouncer;
        }(); var debouncerQueue = new Set();/**
                                   * Adds a `Debouncer` to a list of globally flushable tasks.
                                   *
                                   * @param {!Debouncer} debouncer Debouncer to enqueue
                                   * @return {void}
                                   */var enqueueDebouncer = function enqueueDebouncer(debouncer) { debouncerQueue.add(debouncer); };/**
      * Flushes any enqueued debouncers
      *
      * @return {boolean} Returns whether any debouncers were flushed
      */var flushDebouncers = function flushDebouncers() {
          var didFlush = Boolean(debouncerQueue.size);// If new debouncers are added while flushing, Set.forEach will ensure
          // newly added ones are also flushed
          debouncerQueue.forEach(function (debouncer) { try { debouncer.flush(); } catch (e) { setTimeout(function () { throw e; }); } }); return didFlush;
        }; var HAS_NATIVE_TA = typeof document.head.style.touchAction === 'string'; var GESTURE_KEY = '__polymerGestures'; var HANDLED_OBJ = '__polymerGesturesHandled'; var TOUCH_ACTION = '__polymerGesturesTouchAction';// radius for tap and track
        var TAP_DISTANCE = 25; var TRACK_DISTANCE = 5;// number of last N track positions to keep
        var TRACK_LENGTH = 2;// Disabling "mouse" handlers for 2500ms is enough
        var MOUSE_TIMEOUT = 2500; var MOUSE_EVENTS = ['mousedown', 'mousemove', 'mouseup', 'click'];// an array of bitmask values for mapping MouseEvent.which to MouseEvent.buttons
        var MOUSE_WHICH_TO_BUTTONS = [0, 1, 4, 2]; var MOUSE_HAS_BUTTONS = function () { try { return new MouseEvent('test', { buttons: 1 }).buttons === 1; } catch (e) { return false; } }();/**
        * @param {string} name Possible mouse event name
        * @return {boolean} true if mouse event, false if not
        */function isMouseEvent(name) { return MOUSE_EVENTS.indexOf(name) > -1; }/* eslint no-empty: ["error", { "allowEmptyCatch": true }] */ // check for passive event listeners
        var supportsPassive = false; (function () { try { var opts = Object.defineProperty({}, 'passive', { get: function get() { supportsPassive = true; } }); window.addEventListener('test', null, opts); window.removeEventListener('test', null, opts); } catch (e) { } })();/**
         * Generate settings for event listeners, dependant on `passiveTouchGestures`
         *
         * @param {string} eventName Event name to determine if `{passive}` option is
         *   needed
         * @return {{passive: boolean} | undefined} Options to use for addEventListener
         *   and removeEventListener
         */function PASSIVE_TOUCH(eventName) { if (isMouseEvent(eventName) || eventName === 'touchend') { return; } if (HAS_NATIVE_TA && supportsPassive && passiveTouchGestures) { return { passive: true }; } else { return; } }// Check for touch-only devices
        var IS_TOUCH_ONLY = navigator.userAgent.match(/iP(?:[oa]d|hone)|Android/);// keep track of any labels hit by the mouseCanceller
  /** @type {!Array<!HTMLLabelElement>} */var clickedLabels = [];/** @type {!Object<boolean>} */var labellable = { 'button': true, 'input': true, 'keygen': true, 'meter': true, 'output': true, 'textarea': true, 'progress': true, 'select': true };// Defined at https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#enabling-and-disabling-form-controls:-the-disabled-attribute
  /** @type {!Object<boolean>} */var canBeDisabled = { 'button': true, 'command': true, 'fieldset': true, 'input': true, 'keygen': true, 'optgroup': true, 'option': true, 'select': true, 'textarea': true };/**
      * @param {HTMLElement} el Element to check labelling status
      * @return {boolean} element can have labels
      */function canBeLabelled(el) { return labellable[el.localName] || false; }/**
     * @param {HTMLElement} el Element that may be labelled.
     * @return {!Array<!HTMLLabelElement>} Relevant label for `el`
     */function matchingLabels(el) {
          var labels = Array.prototype.slice.call(/** @type {HTMLInputElement} */el.labels || []);// IE doesn't have `labels` and Safari doesn't populate `labels`
          // if element is in a shadowroot.
          // In this instance, finding the non-ancestor labels is enough,
          // as the mouseCancellor code will handle ancstor labels
          if (!labels.length) {
            labels = []; var _root2 = el.getRootNode();// if there is an id on `el`, check for all labels with a matching `for` attribute
            if (el.id) { var matching = _root2.querySelectorAll("label[for = ".concat(el.id, "]")); for (var _i32 = 0; _i32 < matching.length; _i32++) { labels.push(/** @type {!HTMLLabelElement} */matching[_i32]); } }
          } return labels;
        }// touch will make synthetic mouse events
        // `preventDefault` on touchend will cancel them,
        // but this breaks `<input>` focus and link clicks
        // disable mouse handlers for MOUSE_TIMEOUT ms after
        // a touchend to ignore synthetic mouse events
        var mouseCanceller = function mouseCanceller(mouseEvent) {// Check for sourceCapabilities, used to distinguish synthetic events
          // if mouseEvent did not come from a device that fires touch events,
          // it was made by a real mouse and should be counted
          // http://wicg.github.io/InputDeviceCapabilities/#dom-inputdevicecapabilities-firestouchevents
          var sc = mouseEvent.sourceCapabilities; if (sc && !sc.firesTouchEvents) { return; }// skip synthetic mouse events
          mouseEvent[HANDLED_OBJ] = { skip: true };// disable "ghost clicks"
          if (mouseEvent.type === 'click') {
            var clickFromLabel = false; var path = getComposedPath(mouseEvent); for (var _i33 = 0; _i33 < path.length; _i33++) {
              if (path[_i33].nodeType === Node.ELEMENT_NODE) {
                if (path[_i33].localName === 'label') { clickedLabels.push(/** @type {!HTMLLabelElement} */path[_i33]); } else if (canBeLabelled(/** @type {!HTMLElement} */path[_i33])) {
                  var ownerLabels = matchingLabels(/** @type {!HTMLElement} */path[_i33]);// check if one of the clicked labels is labelling this element
                  for (var j = 0; j < ownerLabels.length; j++) { clickFromLabel = clickFromLabel || clickedLabels.indexOf(ownerLabels[j]) > -1; }
                }
              } if (path[_i33] === POINTERSTATE.mouse.target) { return; }
            }// if one of the clicked labels was labelling the target element,
            // this is not a ghost click
            if (clickFromLabel) { return; } mouseEvent.preventDefault(); mouseEvent.stopPropagation();
          }
        };/**
      * @param {boolean=} setup True to add, false to remove.
      * @return {void}
      */function setupTeardownMouseCanceller(setup) {
          var events = IS_TOUCH_ONLY ? ['click'] : MOUSE_EVENTS; for (var _i34 = 0, en; _i34 < events.length; _i34++) {
            en = events[_i34]; if (setup) {// reset clickLabels array
              clickedLabels.length = 0; document.addEventListener(en, mouseCanceller, true);
            } else { document.removeEventListener(en, mouseCanceller, true); }
          }
        } function ignoreMouse(e) { if (!cancelSyntheticClickEvents) { return; } if (!POINTERSTATE.mouse.mouseIgnoreJob) { setupTeardownMouseCanceller(true); } var unset = function unset() { setupTeardownMouseCanceller(); POINTERSTATE.mouse.target = null; POINTERSTATE.mouse.mouseIgnoreJob = null; }; POINTERSTATE.mouse.target = getComposedPath(e)[0]; POINTERSTATE.mouse.mouseIgnoreJob = Debouncer.debounce(POINTERSTATE.mouse.mouseIgnoreJob, timeOut.after(MOUSE_TIMEOUT), unset); }/**
     * @param {MouseEvent} ev event to test for left mouse button down
     * @return {boolean} has left mouse button down
     */function hasLeftMouseButton(ev) {
          var type = ev.type;// exit early if the event is not a mouse event
          if (!isMouseEvent(type)) { return false; }// ev.button is not reliable for mousemove (0 is overloaded as both left button and no buttons)
          // instead we use ev.buttons (bitmask of buttons) or fall back to ev.which (deprecated, 0 for no buttons, 1 for left button)
          if (type === 'mousemove') {// allow undefined for testing events
            var buttons = ev.buttons === undefined ? 1 : ev.buttons; if (babelHelpers.instanceof(ev, window.MouseEvent) && !MOUSE_HAS_BUTTONS) { buttons = MOUSE_WHICH_TO_BUTTONS[ev.which] || 0; }// buttons is a bitmask, check that the left button bit is set (1)
            return Boolean(buttons & 1);
          } else {// allow undefined for testing events
            var button = ev.button === undefined ? 0 : ev.button;// ev.button is 0 in mousedown/mouseup/click for left button activation
            return button === 0;
          }
        } function isSyntheticClick(ev) {
          if (ev.type === 'click') {// ev.detail is 0 for HTMLElement.click in most browsers
            if (ev.detail === 0) { return true; }// in the worst case, check that the x/y position of the click is within
            // the bounding box of the target of the event
            // Thanks IE 10 >:(
            var t = _findOriginalTarget(ev);// make sure the target of the event is an element so we can use getBoundingClientRect,
            // if not, just assume it is a synthetic click
            if (!t.nodeType ||/** @type {Element} */t.nodeType !== Node.ELEMENT_NODE) { return true; } var bcr =/** @type {Element} */t.getBoundingClientRect();// use page x/y to account for scrolling
            var x = ev.pageX, y = ev.pageY;// ev is a synthetic click if the position is outside the bounding box of the target
            return !(x >= bcr.left && x <= bcr.right && y >= bcr.top && y <= bcr.bottom);
          } return false;
        } var POINTERSTATE = { mouse: { target: null, mouseIgnoreJob: null }, touch: { x: 0, y: 0, id: -1, scrollDecided: false } }; function firstTouchAction(ev) { var ta = 'auto'; var path = getComposedPath(ev); for (var _i35 = 0, n; _i35 < path.length; _i35++) { n = path[_i35]; if (n[TOUCH_ACTION]) { ta = n[TOUCH_ACTION]; break; } } return ta; } function trackDocument(stateObj, movefn, upfn) { stateObj.movefn = movefn; stateObj.upfn = upfn; document.addEventListener('mousemove', movefn); document.addEventListener('mouseup', upfn); } function untrackDocument(stateObj) { document.removeEventListener('mousemove', stateObj.movefn); document.removeEventListener('mouseup', stateObj.upfn); stateObj.movefn = null; stateObj.upfn = null; } if (cancelSyntheticClickEvents) {// use a document-wide touchend listener to start the ghost-click prevention mechanism
          // Use passive event listeners, if supported, to not affect scrolling performance
          document.addEventListener('touchend', ignoreMouse, supportsPassive ? { passive: true } : false);
        }/**
     * Returns the composedPath for the given event.
     * @param {Event} event to process
     * @return {!Array<!EventTarget>} Path of the event
     */var getComposedPath = window.ShadyDOM && window.ShadyDOM.noPatch ? window.ShadyDOM.composedPath : function (event) { return event.composedPath && event.composedPath() || []; };/** @type {!Object<string, !GestureRecognizer>} */var gestures = {};/** @type {!Array<!GestureRecognizer>} */var recognizers = [];/**
                                  * Finds the element rendered on the screen at the provided coordinates.
                                  *
                                  * Similar to `document.elementFromPoint`, but pierces through
                                  * shadow roots.
                                  *
                                  * @param {number} x Horizontal pixel coordinate
                                  * @param {number} y Vertical pixel coordinate
                                  * @return {Element} Returns the deepest shadowRoot inclusive element
                                  * found at the screen position given.
                                  */function deepTargetFind(x, y) {
          var node = document.elementFromPoint(x, y); var next = node;// this code path is only taken when native ShadowDOM is used
          // if there is a shadowroot, it may have a node at x/y
          // if there is not a shadowroot, exit the loop
          while (next && next.shadowRoot && !window.ShadyDOM) {// if there is a node at x/y in the shadowroot, look deeper
            var oldNext = next; next = next.shadowRoot.elementFromPoint(x, y);// on Safari, elementFromPoint may return the shadowRoot host
            if (oldNext === next) { break; } if (next) { node = next; }
          } return node;
        }/**
     * a cheaper check than ev.composedPath()[0];
     *
     * @private
     * @param {Event|Touch} ev Event.
     * @return {EventTarget} Returns the event target.
     */function _findOriginalTarget(ev) {
          var path = getComposedPath(/** @type {?Event} */ev);// It shouldn't be, but sometimes path is empty (window on Safari).
          return path.length > 0 ? path[0] : ev.target;
        }/**
     * @private
     * @param {Event} ev Event.
     * @return {void}
     */function _handleNative(ev) {
          var handled; var type = ev.type; var node = ev.currentTarget; var gobj = node[GESTURE_KEY]; if (!gobj) { return; } var gs = gobj[type]; if (!gs) { return; } if (!ev[HANDLED_OBJ]) {
            ev[HANDLED_OBJ] = {}; if (type.slice(0, 5) === 'touch') {
              ev =/** @type {TouchEvent} */ev;// eslint-disable-line no-self-assign
              var t = ev.changedTouches[0]; if (type === 'touchstart') {// only handle the first finger
                if (ev.touches.length === 1) { POINTERSTATE.touch.id = t.identifier; }
              } if (POINTERSTATE.touch.id !== t.identifier) { return; } if (!HAS_NATIVE_TA) { if (type === 'touchstart' || type === 'touchmove') { _handleTouchAction(ev); } }
            }
          } handled = ev[HANDLED_OBJ];// used to ignore synthetic mouse events
          if (handled.skip) { return; }// reset recognizer state
          for (var _i36 = 0, r; _i36 < recognizers.length; _i36++) { r = recognizers[_i36]; if (gs[r.name] && !handled[r.name]) { if (r.flow && r.flow.start.indexOf(ev.type) > -1 && r.reset) { r.reset(); } } }// enforce gesture recognizer order
          for (var _i37 = 0, _r; _i37 < recognizers.length; _i37++) { _r = recognizers[_i37]; if (gs[_r.name] && !handled[_r.name]) { handled[_r.name] = true; _r[type](ev); } }
        }/**
     * @private
     * @param {TouchEvent} ev Event.
     * @return {void}
     */function _handleTouchAction(ev) {
          var t = ev.changedTouches[0]; var type = ev.type; if (type === 'touchstart') { POINTERSTATE.touch.x = t.clientX; POINTERSTATE.touch.y = t.clientY; POINTERSTATE.touch.scrollDecided = false; } else if (type === 'touchmove') {
            if (POINTERSTATE.touch.scrollDecided) { return; } POINTERSTATE.touch.scrollDecided = true; var ta = firstTouchAction(ev); var shouldPrevent = false; var dx = Math.abs(POINTERSTATE.touch.x - t.clientX); var dy = Math.abs(POINTERSTATE.touch.y - t.clientY); if (!ev.cancelable) {// scrolling is happening
            } else if (ta === 'none') { shouldPrevent = true; } else if (ta === 'pan-x') { shouldPrevent = dy > dx; } else if (ta === 'pan-y') { shouldPrevent = dx > dy; } if (shouldPrevent) { ev.preventDefault(); } else { _prevent('track'); }
          }
        }/**
     * Adds an event listener to a node for the given gesture type.
     *
     * @param {!EventTarget} node Node to add listener on
     * @param {string} evType Gesture type: `down`, `up`, `track`, or `tap`
     * @param {!function(!Event):void} handler Event listener function to call
     * @return {boolean} Returns true if a gesture event listener was added.
     */function addListener(node, evType, handler) { if (gestures[evType]) { _add(node, evType, handler); return true; } return false; }/**
     * Removes an event listener from a node for the given gesture type.
     *
     * @param {!EventTarget} node Node to remove listener from
     * @param {string} evType Gesture type: `down`, `up`, `track`, or `tap`
     * @param {!function(!Event):void} handler Event listener function previously passed to
     *  `addListener`.
     * @return {boolean} Returns true if a gesture event listener was removed.
     */function removeListener(node, evType, handler) { if (gestures[evType]) { _remove(node, evType, handler); return true; } return false; }/**
     * automate the event listeners for the native events
     *
     * @private
     * @param {!EventTarget} node Node on which to add the event.
     * @param {string} evType Event type to add.
     * @param {function(!Event)} handler Event handler function.
     * @return {void}
     */function _add(node, evType, handler) {
          var recognizer = gestures[evType]; var deps = recognizer.deps; var name = recognizer.name; var gobj = node[GESTURE_KEY]; if (!gobj) { node[GESTURE_KEY] = gobj = {}; } for (var _i38 = 0, dep, gd; _i38 < deps.length; _i38++) {
            dep = deps[_i38];// don't add mouse handlers on iOS because they cause gray selection overlays
            if (IS_TOUCH_ONLY && isMouseEvent(dep) && dep !== 'click') { continue; } gd = gobj[dep]; if (!gd) { gobj[dep] = gd = { _count: 0 }; } if (gd._count === 0) { node.addEventListener(dep, _handleNative, PASSIVE_TOUCH(dep)); } gd[name] = (gd[name] || 0) + 1; gd._count = (gd._count || 0) + 1;
          } node.addEventListener(evType, handler); if (recognizer.touchAction) { setTouchAction(node, recognizer.touchAction); }
        }/**
     * automate event listener removal for native events
     *
     * @private
     * @param {!EventTarget} node Node on which to remove the event.
     * @param {string} evType Event type to remove.
     * @param {function(!Event): void} handler Event handler function.
     * @return {void}
     */function _remove(node, evType, handler) { var recognizer = gestures[evType]; var deps = recognizer.deps; var name = recognizer.name; var gobj = node[GESTURE_KEY]; if (gobj) { for (var _i39 = 0, dep, gd; _i39 < deps.length; _i39++) { dep = deps[_i39]; gd = gobj[dep]; if (gd && gd[name]) { gd[name] = (gd[name] || 1) - 1; gd._count = (gd._count || 1) - 1; if (gd._count === 0) { node.removeEventListener(dep, _handleNative, PASSIVE_TOUCH(dep)); } } } } node.removeEventListener(evType, handler); }/**
     * Registers a new gesture event recognizer for adding new custom
     * gesture event types.
     *
     * @param {!GestureRecognizer} recog Gesture recognizer descriptor
     * @return {void}
     */function register$1(recog) { recognizers.push(recog); for (var _i40 = 0; _i40 < recog.emits.length; _i40++) { gestures[recog.emits[_i40]] = recog; } }/**
     * @private
     * @param {string} evName Event name.
     * @return {Object} Returns the gesture for the given event name.
     */function _findRecognizerByEvent(evName) { for (var _i41 = 0, r; _i41 < recognizers.length; _i41++) { r = recognizers[_i41]; for (var j = 0, n; j < r.emits.length; j++) { n = r.emits[j]; if (n === evName) { return r; } } } return null; }/**
     * Sets scrolling direction on node.
     *
     * This value is checked on first move, thus it should be called prior to
     * adding event listeners.
     *
     * @param {!EventTarget} node Node to set touch action setting on
     * @param {string} value Touch action value
     * @return {void}
     */function setTouchAction(node, value) {
          if (HAS_NATIVE_TA && babelHelpers.instanceof(node, HTMLElement)) {// NOTE: add touchAction async so that events can be added in
            // custom element constructors. Otherwise we run afoul of custom
            // elements restriction against settings attributes (style) in the
            // constructor.
            microTask.run(function () { node.style.touchAction = value; });
          } node[TOUCH_ACTION] = value;
        }/**
     * Dispatches an event on the `target` element of `type` with the given
     * `detail`.
     * @private
     * @param {!EventTarget} target The element on which to fire an event.
     * @param {string} type The type of event to fire.
     * @param {!Object=} detail The detail object to populate on the event.
     * @return {void}
     */function _fire(target, type, detail) {
          var ev = new Event(type, { bubbles: true, cancelable: true, composed: true }); ev.detail = detail; wrap(/** @type {!Node} */target).dispatchEvent(ev);// forward `preventDefault` in a clean way
          if (ev.defaultPrevented) { var preventer = detail.preventer || detail.sourceEvent; if (preventer && preventer.preventDefault) { preventer.preventDefault(); } }
        }/**
     * Prevents the dispatch and default action of the given event name.
     *
     * @param {string} evName Event name.
     * @return {void}
     */function _prevent(evName) { var recognizer = _findRecognizerByEvent(evName); if (recognizer.info) { recognizer.info.prevent = true; } }/**
     * Reset the 2500ms timeout on processing mouse input after detecting touch input.
     *
     * Touch inputs create synthesized mouse inputs anywhere from 0 to 2000ms after the touch.
     * This method should only be called during testing with simulated touch inputs.
     * Calling this method in production may cause duplicate taps or other Gestures.
     *
     * @return {void}
     */function resetMouseCanceller() { if (POINTERSTATE.mouse.mouseIgnoreJob) { POINTERSTATE.mouse.mouseIgnoreJob.flush(); } }/* eslint-disable valid-jsdoc */register$1({
          name: 'downup', deps: ['mousedown', 'touchstart', 'touchend'], flow: { start: ['mousedown', 'touchstart'], end: ['mouseup', 'touchend'] }, emits: ['down', 'up'], info: { movefn: null, upfn: null },/**
     * @this {GestureRecognizer}
     * @return {void}
     */reset: function reset() { untrackDocument(this.info); },/**
     * @this {GestureRecognizer}
     * @param {MouseEvent} e
     * @return {void}
     */mousedown: function mousedown(e) { if (!hasLeftMouseButton(e)) { return; } var t = _findOriginalTarget(e); var self = this; var movefn = function movefn(e) { if (!hasLeftMouseButton(e)) { downupFire('up', t, e); untrackDocument(self.info); } }; var upfn = function upfn(e) { if (hasLeftMouseButton(e)) { downupFire('up', t, e); } untrackDocument(self.info); }; trackDocument(this.info, movefn, upfn); downupFire('down', t, e); },/**
     * @this {GestureRecognizer}
     * @param {TouchEvent} e
     * @return {void}
     */touchstart: function touchstart(e) { downupFire('down', _findOriginalTarget(e), e.changedTouches[0], e); },/**
     * @this {GestureRecognizer}
     * @param {TouchEvent} e
     * @return {void}
     */touchend: function touchend(e) { downupFire('up', _findOriginalTarget(e), e.changedTouches[0], e); }
        });/**
       * @param {string} type
       * @param {EventTarget} target
       * @param {Event|Touch} event
       * @param {Event=} preventer
       * @return {void}
       */function downupFire(type, target, event, preventer) { if (!target) { return; } _fire(target, type, { x: event.clientX, y: event.clientY, sourceEvent: event, preventer: preventer, prevent: function prevent(e) { return _prevent(e); } }); } register$1({
          name: 'track', touchAction: 'none', deps: ['mousedown', 'touchstart', 'touchmove', 'touchend'], flow: { start: ['mousedown', 'touchstart'], end: ['mouseup', 'touchend'] }, emits: ['track'], info: { x: 0, y: 0, state: 'start', started: false, moves: [],/** @this {GestureInfo} */addMove: function addMove(move) { if (this.moves.length > TRACK_LENGTH) { this.moves.shift(); } this.moves.push(move); }, movefn: null, upfn: null, prevent: false },/**
     * @this {GestureRecognizer}
     * @return {void}
     */reset: function reset() { this.info.state = 'start'; this.info.started = false; this.info.moves = []; this.info.x = 0; this.info.y = 0; this.info.prevent = false; untrackDocument(this.info); },/**
     * @this {GestureRecognizer}
     * @param {MouseEvent} e
     * @return {void}
     */mousedown: function mousedown(e) {
            if (!hasLeftMouseButton(e)) { return; } var t = _findOriginalTarget(e); var self = this; var movefn = function movefn(e) {
              var x = e.clientX, y = e.clientY; if (trackHasMovedEnough(self.info, x, y)) {// first move is 'start', subsequent moves are 'move', mouseup is 'end'
                self.info.state = self.info.started ? e.type === 'mouseup' ? 'end' : 'track' : 'start'; if (self.info.state === 'start') {// if and only if tracking, always prevent tap
                  _prevent('tap');
                } self.info.addMove({ x: x, y: y }); if (!hasLeftMouseButton(e)) {// always fire "end"
                  self.info.state = 'end'; untrackDocument(self.info);
                } if (t) { trackFire(self.info, t, e); } self.info.started = true;
              }
            }; var upfn = function upfn(e) {
              if (self.info.started) { movefn(e); }// remove the temporary listeners
              untrackDocument(self.info);
            };// add temporary document listeners as mouse retargets
            trackDocument(this.info, movefn, upfn); this.info.x = e.clientX; this.info.y = e.clientY;
          },/**
     * @this {GestureRecognizer}
     * @param {TouchEvent} e
     * @return {void}
     */touchstart: function touchstart(e) { var ct = e.changedTouches[0]; this.info.x = ct.clientX; this.info.y = ct.clientY; },/**
     * @this {GestureRecognizer}
     * @param {TouchEvent} e
     * @return {void}
     */touchmove: function touchmove(e) {
            var t = _findOriginalTarget(e); var ct = e.changedTouches[0]; var x = ct.clientX, y = ct.clientY; if (trackHasMovedEnough(this.info, x, y)) {
              if (this.info.state === 'start') {// if and only if tracking, always prevent tap
                _prevent('tap');
              } this.info.addMove({ x: x, y: y }); trackFire(this.info, t, ct); this.info.state = 'track'; this.info.started = true;
            }
          },/**
     * @this {GestureRecognizer}
     * @param {TouchEvent} e
     * @return {void}
     */touchend: function touchend(e) {
            var t = _findOriginalTarget(e); var ct = e.changedTouches[0];// only trackend if track was started and not aborted
            if (this.info.started) {// reset started state on up
              this.info.state = 'end'; this.info.addMove({ x: ct.clientX, y: ct.clientY }); trackFire(this.info, t, ct);
            }
          }
        });/**
       * @param {!GestureInfo} info
       * @param {number} x
       * @param {number} y
       * @return {boolean}
       */function trackHasMovedEnough(info, x, y) { if (info.prevent) { return false; } if (info.started) { return true; } var dx = Math.abs(info.x - x); var dy = Math.abs(info.y - y); return dx >= TRACK_DISTANCE || dy >= TRACK_DISTANCE; }/**
     * @param {!GestureInfo} info
     * @param {?EventTarget} target
     * @param {Touch} touch
     * @return {void}
     */function trackFire(info, target, touch) { if (!target) { return; } var secondlast = info.moves[info.moves.length - 2]; var lastmove = info.moves[info.moves.length - 1]; var dx = lastmove.x - info.x; var dy = lastmove.y - info.y; var ddx, ddy = 0; if (secondlast) { ddx = lastmove.x - secondlast.x; ddy = lastmove.y - secondlast.y; } _fire(target, 'track', { state: info.state, x: touch.clientX, y: touch.clientY, dx: dx, dy: dy, ddx: ddx, ddy: ddy, sourceEvent: touch, hover: function hover() { return deepTargetFind(touch.clientX, touch.clientY); } }); } register$1({
          name: 'tap', deps: ['mousedown', 'click', 'touchstart', 'touchend'], flow: { start: ['mousedown', 'touchstart'], end: ['click', 'touchend'] }, emits: ['tap'], info: { x: NaN, y: NaN, prevent: false },/**
     * @this {GestureRecognizer}
     * @return {void}
     */reset: function reset() { this.info.x = NaN; this.info.y = NaN; this.info.prevent = false; },/**
     * @this {GestureRecognizer}
     * @param {MouseEvent} e
     * @return {void}
     */mousedown: function mousedown(e) { if (hasLeftMouseButton(e)) { this.info.x = e.clientX; this.info.y = e.clientY; } },/**
     * @this {GestureRecognizer}
     * @param {MouseEvent} e
     * @return {void}
     */click: function click(e) { if (hasLeftMouseButton(e)) { trackForward(this.info, e); } },/**
     * @this {GestureRecognizer}
     * @param {TouchEvent} e
     * @return {void}
     */touchstart: function touchstart(e) { var touch = e.changedTouches[0]; this.info.x = touch.clientX; this.info.y = touch.clientY; },/**
     * @this {GestureRecognizer}
     * @param {TouchEvent} e
     * @return {void}
     */touchend: function touchend(e) { trackForward(this.info, e.changedTouches[0], e); }
        });/**
       * @param {!GestureInfo} info
       * @param {Event | Touch} e
       * @param {Event=} preventer
       * @return {void}
       */function trackForward(info, e, preventer) {
          var dx = Math.abs(e.clientX - info.x); var dy = Math.abs(e.clientY - info.y);// find original target from `preventer` for TouchEvents, or `e` for MouseEvents
          var t = _findOriginalTarget(preventer || e); if (!t || canBeDisabled[/** @type {!HTMLElement} */t.localName] && t.hasAttribute('disabled')) { return; }// dx,dy can be NaN if `click` has been simulated and there was no `down` for `start`
          if (isNaN(dx) || isNaN(dy) || dx <= TAP_DISTANCE && dy <= TAP_DISTANCE || isSyntheticClick(e)) {// prevent taps from being generated if an event has canceled them
            if (!info.prevent) { _fire(t, 'tap', { x: e.clientX, y: e.clientY, sourceEvent: e, preventer: preventer }); }
          }
        }/* eslint-enable valid-jsdoc */ /** @deprecated */var findOriginalTarget = _findOriginalTarget;/** @deprecated */var add$1 = addListener;/** @deprecated */var remove = removeListener; var GestureEventListeners = dedupingMixin(function (superClass) {/**
     * @polymer
     * @mixinClass
     * @implements {Polymer_GestureEventListeners}
     */var GestureEventListeners =/*#__PURE__*/function (_superClass3) {
            babelHelpers.inherits(GestureEventListeners, _superClass3); function GestureEventListeners() { babelHelpers.classCallCheck(this, GestureEventListeners); return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(GestureEventListeners).apply(this, arguments)); } babelHelpers.createClass(GestureEventListeners, [{
              key: "_addEventListenerToNode",/**
       * Add the event listener to the node if it is a gestures event.
       *
       * @param {!EventTarget} node Node to add event listener to
       * @param {string} eventName Name of event
       * @param {function(!Event):void} handler Listener function to add
       * @return {void}
       * @override
       */value: function _addEventListenerToNode(node, eventName, handler) { if (!addListener(node, eventName, handler)) { babelHelpers.get(babelHelpers.getPrototypeOf(GestureEventListeners.prototype), "_addEventListenerToNode", this).call(this, node, eventName, handler); } }/**
         * Remove the event listener to the node if it is a gestures event.
         *
         * @param {!EventTarget} node Node to remove event listener from
         * @param {string} eventName Name of event
         * @param {function(!Event):void} handler Listener function to remove
         * @return {void}
         * @override
         */}, { key: "_removeEventListenerFromNode", value: function _removeEventListenerFromNode(node, eventName, handler) { if (!removeListener(node, eventName, handler)) { babelHelpers.get(babelHelpers.getPrototypeOf(GestureEventListeners.prototype), "_removeEventListenerFromNode", this).call(this, node, eventName, handler); } } }]); return GestureEventListeners;
          }(superClass); return GestureEventListeners;
        }); var HOST_DIR = /:host\(:dir\((ltr|rtl)\)\)/g; var HOST_DIR_REPLACMENT = ':host([dir="$1"])'; var EL_DIR = /([\s\w-#\.\[\]\*]*):dir\((ltr|rtl)\)/g; var EL_DIR_REPLACMENT = ':host([dir="$2"]) $1'; var DIR_CHECK = /:dir\((?:ltr|rtl)\)/; var SHIM_SHADOW = Boolean(window['ShadyDOM'] && window['ShadyDOM']['inUse']);/**
                                                                                   * @type {!Array<!Polymer_DirMixin>}
                                                                                   */var DIR_INSTANCES = [];/** @type {?MutationObserver} */var observer = null; var documentDir = ''; function getRTL() { documentDir = document.documentElement.getAttribute('dir'); }/**
     * @param {!Polymer_DirMixin} instance Instance to set RTL status on
     */function setRTL(instance) { if (!instance.__autoDirOptOut) { var el =/** @type {!HTMLElement} */instance; el.setAttribute('dir', documentDir); } } function updateDirection() { getRTL(); documentDir = document.documentElement.getAttribute('dir'); for (var _i42 = 0; _i42 < DIR_INSTANCES.length; _i42++) { setRTL(DIR_INSTANCES[_i42]); } } function takeRecords() { if (observer && observer.takeRecords().length) { updateDirection(); } }/**
     * Element class mixin that allows elements to use the `:dir` CSS Selector to
     * have text direction specific styling.
     *
     * With this mixin, any stylesheet provided in the template will transform
     * `:dir` into `:host([dir])` and sync direction with the page via the
     * element's `dir` attribute.
     *
     * Elements can opt out of the global page text direction by setting the `dir`
     * attribute directly in `ready()` or in HTML.
     *
     * Caveats:
     * - Applications must set `<html dir="ltr">` or `<html dir="rtl">` to sync
     *   direction
     * - Automatic left-to-right or right-to-left styling is sync'd with the
     *   `<html>` element only.
     * - Changing `dir` at runtime is supported.
     * - Opting out of the global direction styling is permanent
     *
     * @mixinFunction
     * @polymer
     * @appliesMixin PropertyAccessors
     * @template T
     * @param {function(new:T)} superClass Class to apply mixin to.
     * @return {function(new:T)} superClass with mixin applied.
     */var DirMixin = dedupingMixin(function (base) {
          if (!SHIM_SHADOW) { if (!observer) { getRTL(); observer = new MutationObserver(updateDirection); observer.observe(document.documentElement, { attributes: true, attributeFilter: ['dir'] }); } }/**
       * @constructor
       * @implements {Polymer_PropertyAccessors}
       * @private
       */var elementBase = PropertyAccessors(base);/**
                                                  * @polymer
                                                  * @mixinClass
                                                  * @implements {Polymer_DirMixin}
                                                  */var Dir =/*#__PURE__*/function (_elementBase) {
            babelHelpers.inherits(Dir, _elementBase); babelHelpers.createClass(Dir, null, [{
              key: "_processStyleText",/**
       * @param {string} cssText .
       * @param {string} baseURI .
       * @return {string} .
       * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do
       * @nocollapse
       */value: function _processStyleText(cssText, baseURI) {// TODO(https://github.com/google/closure-compiler/issues/3240):
                //     Change back to just super.methodCall()
                cssText = elementBase._processStyleText.call(this, cssText, baseURI); if (!SHIM_SHADOW && DIR_CHECK.test(cssText)) { cssText = this._replaceDirInCssText(cssText); this.__activateDir = true; } return cssText;
              }/**
         * Replace `:dir` in the given CSS text
         *
         * @param {string} text CSS text to replace DIR
         * @return {string} Modified CSS
         * @nocollapse
         */}, { key: "_replaceDirInCssText", value: function _replaceDirInCssText(text) { var replacedText = text; replacedText = replacedText.replace(HOST_DIR, HOST_DIR_REPLACMENT); replacedText = replacedText.replace(EL_DIR, EL_DIR_REPLACMENT); return replacedText; } }]); function Dir() { var _this14; babelHelpers.classCallCheck(this, Dir); _this14 = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(Dir).call(this));/** @type {boolean} */_this14.__autoDirOptOut = false; return _this14; }/**
         * @override
         * @suppress {invalidCasts} Closure doesn't understand that `this` is an
         *     HTMLElement
         * @return {void}
         */babelHelpers.createClass(Dir, [{
                key: "ready", value: function ready() { babelHelpers.get(babelHelpers.getPrototypeOf(Dir.prototype), "ready", this).call(this); this.__autoDirOptOut =/** @type {!HTMLElement} */this.hasAttribute('dir'); }/**
         * @override
         * @suppress {missingProperties} If it exists on elementBase, it can be
         *   super'd
         * @return {void}
         */}, {
                key: "connectedCallback", value: function connectedCallback() { if (elementBase.prototype.connectedCallback) { babelHelpers.get(babelHelpers.getPrototypeOf(Dir.prototype), "connectedCallback", this).call(this); } if (this.constructor.__activateDir) { takeRecords(); DIR_INSTANCES.push(this); setRTL(this); } }/**
         * @override
         * @suppress {missingProperties} If it exists on elementBase, it can be
         *   super'd
         * @return {void}
         */}, { key: "disconnectedCallback", value: function disconnectedCallback() { if (elementBase.prototype.disconnectedCallback) { babelHelpers.get(babelHelpers.getPrototypeOf(Dir.prototype), "disconnectedCallback", this).call(this); } if (this.constructor.__activateDir) { var idx = DIR_INSTANCES.indexOf(this); if (idx > -1) { DIR_INSTANCES.splice(idx, 1); } } } }]); return Dir;
          }(elementBase); Dir.__activateDir = false; return Dir;
        }); var scheduled = false; var beforeRenderQueue = []; var afterRenderQueue = []; function schedule() {
          scheduled = true;// before next render
          requestAnimationFrame(function () {
            scheduled = false; flushQueue(beforeRenderQueue);// after the render
            setTimeout(function () { runQueue(afterRenderQueue); });
          });
        } function flushQueue(queue) { while (queue.length) { callMethod(queue.shift()); } } function runQueue(queue) { for (var _i43 = 0, l = queue.length; _i43 < l; _i43++) { callMethod(queue.shift()); } } function callMethod(info) { var context = info[0]; var callback = info[1]; var args = info[2]; try { callback.apply(context, args); } catch (e) { setTimeout(function () { throw e; }); } }/**
     * Flushes all `beforeNextRender` tasks, followed by all `afterNextRender`
     * tasks.
     *
     * @return {void}
     */function flush() { while (beforeRenderQueue.length || afterRenderQueue.length) { flushQueue(beforeRenderQueue); flushQueue(afterRenderQueue); } scheduled = false; }/**
     * Enqueues a callback which will be run before the next render, at
     * `requestAnimationFrame` timing.
     *
     * This method is useful for enqueuing work that requires DOM measurement,
     * since measurement may not be reliable in custom element callbacks before
     * the first render, as well as for batching measurement tasks in general.
     *
     * Tasks in this queue may be flushed by calling `flush()`.
     *
     * @param {*} context Context object the callback function will be bound to
     * @param {function(...*):void} callback Callback function
     * @param {!Array=} args An array of arguments to call the callback function with
     * @return {void}
     */function beforeNextRender(context, callback, args) { if (!scheduled) { schedule(); } beforeRenderQueue.push([context, callback, args]); }/**
     * Enqueues a callback which will be run after the next render, equivalent
     * to one task (`setTimeout`) after the next `requestAnimationFrame`.
     *
     * This method is useful for tuning the first-render performance of an
     * element or application by deferring non-critical work until after the
     * first paint.  Typical non-render-critical work may include adding UI
     * event listeners and aria attributes.
     *
     * @param {*} context Context object the callback function will be bound to
     * @param {function(...*):void} callback Callback function
     * @param {!Array=} args An array of arguments to call the callback function with
     * @return {void}
     */function afterNextRender(context, callback, args) { if (!scheduled) { schedule(); } afterRenderQueue.push([context, callback, args]); }/**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */function resolve() { document.body.removeAttribute('unresolved'); } if (document.readyState === 'interactive' || document.readyState === 'complete') { resolve(); } else { window.addEventListener('DOMContentLoaded', resolve); } function newSplice(index, removed, addedCount) { return { index: index, removed: removed, addedCount: addedCount }; } var EDIT_LEAVE = 0; var EDIT_UPDATE = 1; var EDIT_ADD = 2; var EDIT_DELETE = 3;// Note: This function is *based* on the computation of the Levenshtein
        // "edit" distance. The one change is that "updates" are treated as two
        // edits - not one. With Array splices, an update is really a delete
        // followed by an add. By retaining this, we optimize for "keeping" the
        // maximum array items in the original array. For example:
        //
        //   'xxxx123' -> '123yyyy'
        //
        // With 1-edit updates, the shortest path would be just to update all seven
        // characters. With 2-edit updates, we delete 4, leave 3, and add 4. This
        // leaves the substring '123' intact.
        function calcEditDistances(current, currentStart, currentEnd, old, oldStart, oldEnd) {// "Deletion" columns
          var rowCount = oldEnd - oldStart + 1; var columnCount = currentEnd - currentStart + 1; var distances = new Array(rowCount);// "Addition" rows. Initialize null column.
          for (var _i44 = 0; _i44 < rowCount; _i44++) { distances[_i44] = new Array(columnCount); distances[_i44][0] = _i44; }// Initialize null row
          for (var j = 0; j < columnCount; j++) { distances[0][j] = j; } for (var _i45 = 1; _i45 < rowCount; _i45++) { for (var _j = 1; _j < columnCount; _j++) { if (equals(current[currentStart + _j - 1], old[oldStart + _i45 - 1])) distances[_i45][_j] = distances[_i45 - 1][_j - 1]; else { var north = distances[_i45 - 1][_j] + 1; var west = distances[_i45][_j - 1] + 1; distances[_i45][_j] = north < west ? north : west; } } } return distances;
        }// This starts at the final weight, and walks "backward" by finding
        // the minimum previous weight recursively until the origin of the weight
        // matrix.
        function spliceOperationsFromEditDistances(distances) { var i = distances.length - 1; var j = distances[0].length - 1; var current = distances[i][j]; var edits = []; while (i > 0 || j > 0) { if (i == 0) { edits.push(EDIT_ADD); j--; continue; } if (j == 0) { edits.push(EDIT_DELETE); i--; continue; } var northWest = distances[i - 1][j - 1]; var west = distances[i - 1][j]; var north = distances[i][j - 1]; var min = void 0; if (west < north) min = west < northWest ? west : northWest; else min = north < northWest ? north : northWest; if (min == northWest) { if (northWest == current) { edits.push(EDIT_LEAVE); } else { edits.push(EDIT_UPDATE); current = northWest; } i--; j--; } else if (min == west) { edits.push(EDIT_DELETE); i--; current = west; } else { edits.push(EDIT_ADD); j--; current = north; } } edits.reverse(); return edits; }/**
     * Splice Projection functions:
     *
     * A splice map is a representation of how a previous array of items
     * was transformed into a new array of items. Conceptually it is a list of
     * tuples of
     *
     *   <index, removed, addedCount>
     *
     * which are kept in ascending index order of. The tuple represents that at
     * the |index|, |removed| sequence of items were removed, and counting forward
     * from |index|, |addedCount| items were added.
     */ /**
         * Lacking individual splice mutation information, the minimal set of
         * splices can be synthesized given the previous state and final state of an
         * array. The basic approach is to calculate the edit distance matrix and
         * choose the shortest path through it.
         *
         * Complexity: O(l * p)
         *   l: The length of the current array
         *   p: The length of the old array
         *
         * @param {!Array} current The current "changed" array for which to
         * calculate splices.
         * @param {number} currentStart Starting index in the `current` array for
         * which splices are calculated.
         * @param {number} currentEnd Ending index in the `current` array for
         * which splices are calculated.
         * @param {!Array} old The original "unchanged" array to compare `current`
         * against to determine splices.
         * @param {number} oldStart Starting index in the `old` array for
         * which splices are calculated.
         * @param {number} oldEnd Ending index in the `old` array for
         * which splices are calculated.
         * @return {!Array} Returns an array of splice record objects. Each of these
         * contains: `index` the location where the splice occurred; `removed`
         * the array of removed items from this location; `addedCount` the number
         * of items added at this location.
         */function calcSplices(current, currentStart, currentEnd, old, oldStart, oldEnd) { var prefixCount = 0; var suffixCount = 0; var splice; var minLength = Math.min(currentEnd - currentStart, oldEnd - oldStart); if (currentStart == 0 && oldStart == 0) prefixCount = sharedPrefix(current, old, minLength); if (currentEnd == current.length && oldEnd == old.length) suffixCount = sharedSuffix(current, old, minLength - prefixCount); currentStart += prefixCount; oldStart += prefixCount; currentEnd -= suffixCount; oldEnd -= suffixCount; if (currentEnd - currentStart == 0 && oldEnd - oldStart == 0) return []; if (currentStart == currentEnd) { splice = newSplice(currentStart, [], 0); while (oldStart < oldEnd) { splice.removed.push(old[oldStart++]); } return [splice]; } else if (oldStart == oldEnd) return [newSplice(currentStart, [], currentEnd - currentStart)]; var ops = spliceOperationsFromEditDistances(calcEditDistances(current, currentStart, currentEnd, old, oldStart, oldEnd)); splice = undefined; var splices = []; var index = currentStart; var oldIndex = oldStart; for (var _i46 = 0; _i46 < ops.length; _i46++) { switch (ops[_i46]) { case EDIT_LEAVE: if (splice) { splices.push(splice); splice = undefined; } index++; oldIndex++; break; case EDIT_UPDATE: if (!splice) splice = newSplice(index, [], 0); splice.addedCount++; index++; splice.removed.push(old[oldIndex]); oldIndex++; break; case EDIT_ADD: if (!splice) splice = newSplice(index, [], 0); splice.addedCount++; index++; break; case EDIT_DELETE: if (!splice) splice = newSplice(index, [], 0); splice.removed.push(old[oldIndex]); oldIndex++; break; } } if (splice) { splices.push(splice); } return splices; } function sharedPrefix(current, old, searchLength) { for (var _i47 = 0; _i47 < searchLength; _i47++) { if (!equals(current[_i47], old[_i47])) return _i47; } return searchLength; } function sharedSuffix(current, old, searchLength) { var index1 = current.length; var index2 = old.length; var count = 0; while (count < searchLength && equals(current[--index1], old[--index2])) { count++; } return count; }/**
     * Returns an array of splice records indicating the minimum edits required
     * to transform the `previous` array into the `current` array.
     *
     * Splice records are ordered by index and contain the following fields:
     * - `index`: index where edit started
     * - `removed`: array of removed items from this index
     * - `addedCount`: number of items added at this index
     *
     * This function is based on the Levenshtein "minimum edit distance"
     * algorithm. Note that updates are treated as removal followed by addition.
     *
     * The worst-case time complexity of this algorithm is `O(l * p)`
     *   l: The length of the current array
     *   p: The length of the previous array
     *
     * However, the worst-case complexity is reduced by an `O(n)` optimization
     * to detect any shared prefix & suffix between the two arrays and only
     * perform the more expensive minimum edit distance calculation over the
     * non-shared portions of the arrays.
     *
     * @function
     * @param {!Array} current The "changed" array for which splices will be
     * calculated.
     * @param {!Array} previous The "unchanged" original array to compare
     * `current` against to determine the splices.
     * @return {!Array} Returns an array of splice record objects. Each of these
     * contains: `index` the location where the splice occurred; `removed`
     * the array of removed items from this location; `addedCount` the number
     * of items added at this location.
     */function calculateSplices(current, previous) { return calcSplices(current, 0, current.length, previous, 0, previous.length); } function equals(currentValue, previousValue) { return currentValue === previousValue; } function isSlot(node) { return node.localName === 'slot'; }/**
     * Class that listens for changes (additions or removals) to
     * "flattened nodes" on a given `node`. The list of flattened nodes consists
     * of a node's children and, for any children that are `<slot>` elements,
     * the expanded flattened list of `assignedNodes`.
     * For example, if the observed node has children `<a></a><slot></slot><b></b>`
     * and the `<slot>` has one `<div>` assigned to it, then the flattened
     * nodes list is `<a></a><div></div><b></b>`. If the `<slot>` has other
     * `<slot>` elements assigned to it, these are flattened as well.
     *
     * The provided `callback` is called whenever any change to this list
     * of flattened nodes occurs, where an addition or removal of a node is
     * considered a change. The `callback` is called with one argument, an object
     * containing an array of any `addedNodes` and `removedNodes`.
     *
     * Note: the callback is called asynchronous to any changes
     * at a microtask checkpoint. This is because observation is performed using
     * `MutationObserver` and the `<slot>` element's `slotchange` event which
     * are asynchronous.
     *
     * An example:
     * ```js
     * class TestSelfObserve extends PolymerElement {
     *   static get is() { return 'test-self-observe';}
     *   connectedCallback() {
     *     super.connectedCallback();
     *     this._observer = new FlattenedNodesObserver(this, (info) => {
     *       this.info = info;
     *     });
     *   }
     *   disconnectedCallback() {
     *     super.disconnectedCallback();
     *     this._observer.disconnect();
     *   }
     * }
     * customElements.define(TestSelfObserve.is, TestSelfObserve);
     * ```
     *
     * @summary Class that listens for changes (additions or removals) to
     * "flattened nodes" on a given `node`.
     * @implements {PolymerDomApi.ObserveHandle}
     */var FlattenedNodesObserver =/*#__PURE__*/function () {
          babelHelpers.createClass(FlattenedNodesObserver, null, [{
            key: "getFlattenedNodes",/**
     * Returns the list of flattened nodes for the given `node`.
     * This list consists of a node's children and, for any children
     * that are `<slot>` elements, the expanded flattened list of `assignedNodes`.
     * For example, if the observed node has children `<a></a><slot></slot><b></b>`
     * and the `<slot>` has one `<div>` assigned to it, then the flattened
     * nodes list is `<a></a><div></div><b></b>`. If the `<slot>` has other
     * `<slot>` elements assigned to it, these are flattened as well.
     *
     * @param {!HTMLElement|!HTMLSlotElement} node The node for which to
     *      return the list of flattened nodes.
     * @return {!Array<!Node>} The list of flattened nodes for the given `node`.
     * @nocollapse See https://github.com/google/closure-compiler/issues/2763
     */ // eslint-disable-next-line
            value: function getFlattenedNodes(node) {
              var wrapped = wrap(node); if (isSlot(node)) {
                node =/** @type {!HTMLSlotElement} */node;// eslint-disable-line no-self-assign
                return wrapped.assignedNodes({ flatten: true });
              } else {
                return Array.from(wrapped.childNodes).map(function (node) {
                  if (isSlot(node)) {
                    node =/** @type {!HTMLSlotElement} */node;// eslint-disable-line no-self-assign
                    return wrap(node).assignedNodes({ flatten: true });
                  } else { return [node]; }
                }).reduce(function (a, b) { return a.concat(b); }, []);
              }
            }/**
       * @param {!HTMLElement} target Node on which to listen for changes.
       * @param {?function(this: Element, { target: !HTMLElement, addedNodes: !Array<!Element>, removedNodes: !Array<!Element> }):void} callback Function called when there are additions
       * or removals from the target's list of flattened nodes.
       */ // eslint-disable-next-line
          }]); function FlattenedNodesObserver(target, callback) {
            var _this15 = this; babelHelpers.classCallCheck(this, FlattenedNodesObserver);/**
       * @type {MutationObserver}
       * @private
       */this._shadyChildrenObserver = null;/**
                                              * @type {MutationObserver}
                                              * @private
                                              */this._nativeChildrenObserver = null; this._connected = false;/**
                                * @type {!HTMLElement}
                                * @private
                                */this._target = target; this.callback = callback; this._effectiveNodes = []; this._observer = null; this._scheduled = false;/**
                                * @type {function()}
                                * @private
                                */this._boundSchedule = function () { _this15._schedule(); }; this.connect(); this._schedule();
          }/**
       * Activates an observer. This method is automatically called when
       * a `FlattenedNodesObserver` is created. It should only be called to
       * re-activate an observer that has been deactivated via the `disconnect` method.
       *
       * @return {void}
       */babelHelpers.createClass(FlattenedNodesObserver, [{
            key: "connect", value: function connect() { var _this16 = this; if (isSlot(this._target)) { this._listenSlots([this._target]); } else if (wrap(this._target).children) { this._listenSlots(/** @type {!NodeList<!Node>} */wrap(this._target).children); if (window.ShadyDOM) { this._shadyChildrenObserver = window.ShadyDOM.observeChildren(this._target, function (mutations) { _this16._processMutations(mutations); }); } else { this._nativeChildrenObserver = new MutationObserver(function (mutations) { _this16._processMutations(mutations); }); this._nativeChildrenObserver.observe(this._target, { childList: true }); } } this._connected = true; }/**
       * Deactivates the flattened nodes observer. After calling this method
       * the observer callback will not be called when changes to flattened nodes
       * occur. The `connect` method may be subsequently called to reactivate
       * the observer.
       *
       * @return {void}
       * @override
       */}, {
            key: "disconnect", value: function disconnect() { if (isSlot(this._target)) { this._unlistenSlots([this._target]); } else if (wrap(this._target).children) { this._unlistenSlots(/** @type {!NodeList<!Node>} */wrap(this._target).children); if (window.ShadyDOM && this._shadyChildrenObserver) { window.ShadyDOM.unobserveChildren(this._shadyChildrenObserver); this._shadyChildrenObserver = null; } else if (this._nativeChildrenObserver) { this._nativeChildrenObserver.disconnect(); this._nativeChildrenObserver = null; } } this._connected = false; }/**
       * @return {void}
       * @private
       */}, {
            key: "_schedule", value: function _schedule() { var _this17 = this; if (!this._scheduled) { this._scheduled = true; microTask.run(function () { return _this17.flush(); }); } }/**
       * @param {Array<MutationRecord>} mutations Mutations signaled by the mutation observer
       * @return {void}
       * @private
       */}, {
            key: "_processMutations", value: function _processMutations(mutations) { this._processSlotMutations(mutations); this.flush(); }/**
       * @param {Array<MutationRecord>} mutations Mutations signaled by the mutation observer
       * @return {void}
       * @private
       */}, {
            key: "_processSlotMutations", value: function _processSlotMutations(mutations) { if (mutations) { for (var _i48 = 0; _i48 < mutations.length; _i48++) { var mutation = mutations[_i48]; if (mutation.addedNodes) { this._listenSlots(mutation.addedNodes); } if (mutation.removedNodes) { this._unlistenSlots(mutation.removedNodes); } } } }/**
       * Flushes the observer causing any pending changes to be immediately
       * delivered the observer callback. By default these changes are delivered
       * asynchronously at the next microtask checkpoint.
       *
       * @return {boolean} Returns true if any pending changes caused the observer
       * callback to run.
       */}, {
            key: "flush", value: function flush() {
              if (!this._connected) { return false; } if (window.ShadyDOM) { ShadyDOM.flush(); } if (this._nativeChildrenObserver) { this._processSlotMutations(this._nativeChildrenObserver.takeRecords()); } else if (this._shadyChildrenObserver) { this._processSlotMutations(this._shadyChildrenObserver.takeRecords()); } this._scheduled = false; var info = { target: this._target, addedNodes: [], removedNodes: [] }; var newNodes = this.constructor.getFlattenedNodes(this._target); var splices = calculateSplices(newNodes, this._effectiveNodes);// process removals
              for (var _i49 = 0, s; _i49 < splices.length && (s = splices[_i49]); _i49++) { for (var j = 0, n; j < s.removed.length && (n = s.removed[j]); j++) { info.removedNodes.push(n); } }// process adds
              for (var _i50 = 0, _s2; _i50 < splices.length && (_s2 = splices[_i50]); _i50++) { for (var _j2 = _s2.index; _j2 < _s2.index + _s2.addedCount; _j2++) { info.addedNodes.push(newNodes[_j2]); } }// update cache
              this._effectiveNodes = newNodes; var didFlush = false; if (info.addedNodes.length || info.removedNodes.length) { didFlush = true; this.callback.call(this._target, info); } return didFlush;
            }/**
       * @param {!Array<!Node>|!NodeList<!Node>} nodeList Nodes that could change
       * @return {void}
       * @private
       */}, {
            key: "_listenSlots", value: function _listenSlots(nodeList) { for (var _i51 = 0; _i51 < nodeList.length; _i51++) { var n = nodeList[_i51]; if (isSlot(n)) { n.addEventListener('slotchange', this._boundSchedule); } } }/**
       * @param {!Array<!Node>|!NodeList<!Node>} nodeList Nodes that could change
       * @return {void}
       * @private
       */}, { key: "_unlistenSlots", value: function _unlistenSlots(nodeList) { for (var _i52 = 0; _i52 < nodeList.length; _i52++) { var n = nodeList[_i52]; if (isSlot(n)) { n.removeEventListener('slotchange', this._boundSchedule); } } } }]); return FlattenedNodesObserver;
        }(); var flush$1 = function flush$1() { var shadyDOM, debouncers; do { shadyDOM = window.ShadyDOM && ShadyDOM.flush(); if (window.ShadyCSS && window.ShadyCSS.ScopingShim) { window.ShadyCSS.ScopingShim.flush(); } debouncers = flushDebouncers(); } while (shadyDOM || debouncers); };/* eslint-enable no-unused-vars */var p = Element.prototype;/**
                                * @const {function(this:Node, string): boolean}
                                */var normalizedMatchesSelector = p.matches || p.matchesSelector || p.mozMatchesSelector || p.msMatchesSelector || p.oMatchesSelector || p.webkitMatchesSelector;/**
                                                                                                                                                                     * Cross-platform `element.matches` shim.
                                                                                                                                                                     *
                                                                                                                                                                     * @function matchesSelector
                                                                                                                                                                     * @param {!Node} node Node to check selector against
                                                                                                                                                                     * @param {string} selector Selector to match
                                                                                                                                                                     * @return {boolean} True if node matched selector
                                                                                                                                                                     */var matchesSelector = function matchesSelector(node, selector) { return normalizedMatchesSelector.call(node, selector); };/**
      * Node API wrapper class returned from `Polymer.dom.(target)` when
      * `target` is a `Node`.
      * @implements {PolymerDomApi}
      * @unrestricted
      */var DomApiNative =/*#__PURE__*/function () {/**
     * @param {!Node} node Node for which to create a Polymer.dom helper object.
     */function DomApiNative(node) { babelHelpers.classCallCheck(this, DomApiNative); if (window['ShadyDOM'] && window['ShadyDOM']['inUse']) { window['ShadyDOM']['patch'](node); } this.node = node; }/**
       * Returns an instance of `FlattenedNodesObserver` that
       * listens for node changes on this element.
       *
       * @param {function(this:HTMLElement, { target: !HTMLElement, addedNodes: !Array<!Element>, removedNodes: !Array<!Element> }):void} callback Called when direct or distributed children
       *   of this element changes
       * @return {!PolymerDomApi.ObserveHandle} Observer instance
       * @override
       */babelHelpers.createClass(DomApiNative, [{
          key: "observeNodes", value: function observeNodes(callback) { return new FlattenedNodesObserver(/** @type {!HTMLElement} */this.node, callback); }/**
       * Disconnects an observer previously created via `observeNodes`
       *
       * @param {!PolymerDomApi.ObserveHandle} observerHandle Observer instance
       *   to disconnect.
       * @return {void}
       * @override
       */}, {
          key: "unobserveNodes", value: function unobserveNodes(observerHandle) { observerHandle.disconnect(); }/**
       * Provided as a backwards-compatible API only.  This method does nothing.
       * @return {void}
       */}, {
          key: "notifyObserver", value: function notifyObserver() { }/**
                         * Returns true if the provided node is contained with this element's
                         * light-DOM children or shadow root, including any nested shadow roots
                         * of children therein.
                         *
                         * @param {Node} node Node to test
                         * @return {boolean} Returns true if the given `node` is contained within
                         *   this element's light or shadow DOM.
                         * @override
                         */}, {
          key: "deepContains", value: function deepContains(node) {
            if (wrap(this.node).contains(node)) { return true; } var n = node; var doc = node.ownerDocument;// walk from node to `this` or `document`
            while (n && n !== doc && n !== this.node) {// use logical parentnode, or native ShadowRoot host
              n = wrap(n).parentNode || wrap(n).host;
            } return n === this.node;
          }/**
       * Returns the root node of this node.  Equivalent to `getRootNode()`.
       *
       * @return {!Node} Top most element in the dom tree in which the node
       * exists. If the node is connected to a document this is either a
       * shadowRoot or the document; otherwise, it may be the node
       * itself or a node or document fragment containing it.
       * @override
       */}, {
          key: "getOwnerRoot", value: function getOwnerRoot() { return wrap(this.node).getRootNode(); }/**
       * For slot elements, returns the nodes assigned to the slot; otherwise
       * an empty array. It is equivalent to `<slot>.addignedNodes({flatten:true})`.
       *
       * @return {!Array<!Node>} Array of assigned nodes
       * @override
       */}, {
          key: "getDistributedNodes", value: function getDistributedNodes() { return this.node.localName === 'slot' ? wrap(this.node).assignedNodes({ flatten: true }) : []; }/**
       * Returns an array of all slots this element was distributed to.
       *
       * @return {!Array<!HTMLSlotElement>} Description
       * @override
       */}, {
          key: "getDestinationInsertionPoints", value: function getDestinationInsertionPoints() { var ip$ = []; var n = wrap(this.node).assignedSlot; while (n) { ip$.push(n); n = wrap(n).assignedSlot; } return ip$; }/**
       * Calls `importNode` on the `ownerDocument` for this node.
       *
       * @param {!Node} node Node to import
       * @param {boolean} deep True if the node should be cloned deeply during
       *   import
       * @return {Node} Clone of given node imported to this owner document
       */}, {
          key: "importNode", value: function importNode(node, deep) { var doc = babelHelpers.instanceof(this.node, Document) ? this.node : this.node.ownerDocument; return wrap(doc).importNode(node, deep); }/**
       * @return {!Array<!Node>} Returns a flattened list of all child nodes and
       * nodes assigned to child slots.
       * @override
       */}, {
          key: "getEffectiveChildNodes", value: function getEffectiveChildNodes() { return FlattenedNodesObserver.getFlattenedNodes(/** @type {!HTMLElement} */this.node); }/**
       * Returns a filtered list of flattened child elements for this element based
       * on the given selector.
       *
       * @param {string} selector Selector to filter nodes against
       * @return {!Array<!HTMLElement>} List of flattened child elements
       * @override
       */}, {
          key: "queryDistributedElements", value: function queryDistributedElements(selector) { var c$ = this.getEffectiveChildNodes(); var list = []; for (var _i53 = 0, l = c$.length, c; _i53 < l && (c = c$[_i53]); _i53++) { if (c.nodeType === Node.ELEMENT_NODE && matchesSelector(c, selector)) { list.push(c); } } return list; }/**
       * For shadow roots, returns the currently focused element within this
       * shadow root.
       *
       * return {Node|undefined} Currently focused element
       * @override
       */}, { key: "activeElement", get: function get() { var node = this.node; return node._activeElement !== undefined ? node._activeElement : node.activeElement; } }]); return DomApiNative;
        }(); function forwardMethods(proto, methods) { var _loop = function _loop(_i54) { var method = methods[_i54];/* eslint-disable valid-jsdoc */proto[method] =/** @this {DomApiNative} */function () { return this.node[method].apply(this.node, arguments); };/* eslint-enable */ }; for (var _i54 = 0; _i54 < methods.length; _i54++) { _loop(_i54); } } function forwardReadOnlyProperties(proto, properties) { var _loop2 = function _loop2(_i55) { var name = properties[_i55]; Object.defineProperty(proto, name, { get: function get() { var domApi =/** @type {DomApiNative} */this; return domApi.node[name]; }, configurable: true }); }; for (var _i55 = 0; _i55 < properties.length; _i55++) { _loop2(_i55); } } function forwardProperties(proto, properties) {
          var _loop3 = function _loop3(_i56) {
            var name = properties[_i56]; Object.defineProperty(proto, name, {/**
         * @this {DomApiNative}
         * @return {*} .
         */get: function get() { return this.node[name]; },/**
         * @this {DomApiNative}
         * @param {*} value .
         */set: function set(value) { this.node[name] = value; }, configurable: true
            });
          }; for (var _i56 = 0; _i56 < properties.length; _i56++) { _loop3(_i56); }
        }/**
     * Event API wrapper class returned from `dom.(target)` when
     * `target` is an `Event`.
     */var EventApi =/*#__PURE__*/function () {
          function EventApi(event) { babelHelpers.classCallCheck(this, EventApi); this.event = event; }/**
       * Returns the first node on the `composedPath` of this event.
       *
       * @return {!EventTarget} The node this event was dispatched to
       */babelHelpers.createClass(EventApi, [{
            key: "rootTarget", get: function get() { return this.path[0]; }/**
       * Returns the local (re-targeted) target for this event.
       *
       * @return {!EventTarget} The local (re-targeted) target for this event.
       */}, {
            key: "localTarget", get: function get() { return this.event.target; }/**
       * Returns the `composedPath` for this event.
       * @return {!Array<!EventTarget>} The nodes this event propagated through
       */}, { key: "path", get: function get() { return this.event.composedPath(); } }]); return EventApi;
        }();/**
     * @function
     * @param {boolean=} deep
     * @return {!Node}
     */DomApiNative.prototype.cloneNode;/**
                                     * @function
                                     * @param {!Node} node
                                     * @return {!Node}
                                     */DomApiNative.prototype.appendChild;/**
                                       * @function
                                       * @param {!Node} newChild
                                       * @param {Node} refChild
                                       * @return {!Node}
                                       */DomApiNative.prototype.insertBefore;/**
                                        * @function
                                        * @param {!Node} node
                                        * @return {!Node}
                                        */DomApiNative.prototype.removeChild;/**
                                       * @function
                                       * @param {!Node} oldChild
                                       * @param {!Node} newChild
                                       * @return {!Node}
                                       */DomApiNative.prototype.replaceChild;/**
                                        * @function
                                        * @param {string} name
                                        * @param {string} value
                                        * @return {void}
                                        */DomApiNative.prototype.setAttribute;/**
                                        * @function
                                        * @param {string} name
                                        * @return {void}
                                        */DomApiNative.prototype.removeAttribute;/**
                                           * @function
                                           * @param {string} selector
                                           * @return {?Element}
                                           */DomApiNative.prototype.querySelector;/**
                                         * @function
                                         * @param {string} selector
                                         * @return {!NodeList<!Element>}
                                         */DomApiNative.prototype.querySelectorAll;/** @type {?Node} */DomApiNative.prototype.parentNode;/** @type {?Node} */DomApiNative.prototype.firstChild;/** @type {?Node} */DomApiNative.prototype.lastChild;/** @type {?Node} */DomApiNative.prototype.nextSibling;/** @type {?Node} */DomApiNative.prototype.previousSibling;/** @type {?HTMLElement} */DomApiNative.prototype.firstElementChild;/** @type {?HTMLElement} */DomApiNative.prototype.lastElementChild;/** @type {?HTMLElement} */DomApiNative.prototype.nextElementSibling;/** @type {?HTMLElement} */DomApiNative.prototype.previousElementSibling;/** @type {!Array<!Node>} */DomApiNative.prototype.childNodes;/** @type {!Array<!HTMLElement>} */DomApiNative.prototype.children;/** @type {?DOMTokenList} */DomApiNative.prototype.classList;/** @type {string} */DomApiNative.prototype.textContent;/** @type {string} */DomApiNative.prototype.innerHTML; var DomApiImpl = DomApiNative; if (window['ShadyDOM'] && window['ShadyDOM']['inUse'] && window['ShadyDOM']['noPatch'] && window['ShadyDOM']['Wrapper']) {/**
     * @private
     * @extends {HTMLElement}
     */var Wrapper =/*#__PURE__*/function (_window$ShadyDOM$Wrap) { babelHelpers.inherits(Wrapper, _window$ShadyDOM$Wrap); function Wrapper() { babelHelpers.classCallCheck(this, Wrapper); return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(Wrapper).apply(this, arguments)); } return Wrapper; }(window['ShadyDOM']['Wrapper']);// copy bespoke API onto wrapper
          Object.getOwnPropertyNames(DomApiNative.prototype).forEach(function (prop) { if (prop != 'activeElement') { Wrapper.prototype[prop] = DomApiNative.prototype[prop]; } });// Note, `classList` is here only for legacy compatibility since it does not
          // trigger distribution in v1 Shadow DOM.
          forwardReadOnlyProperties(Wrapper.prototype, ['classList']); DomApiImpl = Wrapper; Object.defineProperties(EventApi.prototype, {// Returns the "lowest" node in the same root as the event's currentTarget.
            // When in `noPatch` mode, this must be calculated by walking the event's
            // path.
            localTarget: { get: function get() { var current = this.event.currentTarget; var currentRoot = current && dom(current).getOwnerRoot(); var p$ = this.path; for (var _i57 = 0; _i57 < p$.length; _i57++) { var e = p$[_i57]; if (dom(e).getOwnerRoot() === currentRoot) { return e; } } }, configurable: true }, path: { get: function get() { return window['ShadyDOM']['composedPath'](this.event); }, configurable: true }
          });
        } else {// Methods that can provoke distribution or must return the logical, not
          // composed tree.
          forwardMethods(DomApiNative.prototype, ['cloneNode', 'appendChild', 'insertBefore', 'removeChild', 'replaceChild', 'setAttribute', 'removeAttribute', 'querySelector', 'querySelectorAll']);// Properties that should return the logical, not composed tree. Note, `classList`
          // is here only for legacy compatibility since it does not trigger distribution
          // in v1 Shadow DOM.
          forwardReadOnlyProperties(DomApiNative.prototype, ['parentNode', 'firstChild', 'lastChild', 'nextSibling', 'previousSibling', 'firstElementChild', 'lastElementChild', 'nextElementSibling', 'previousElementSibling', 'childNodes', 'children', 'classList']); forwardProperties(DomApiNative.prototype, ['textContent', 'innerHTML', 'className']);
        } var DomApi = DomApiImpl;/**
                                     * Legacy DOM and Event manipulation API wrapper factory used to abstract
                                     * differences between native Shadow DOM and "Shady DOM" when polyfilling on
                                     * older browsers.
                                     *
                                     * Note that in Polymer 2.x use of `Polymer.dom` is no longer required and
                                     * in the majority of cases simply facades directly to the standard native
                                     * API.
                                     *
                                     * @summary Legacy DOM and Event manipulation API wrapper factory used to
                                     * abstract differences between native Shadow DOM and "Shady DOM."
                                     * @param {(Node|Event|DomApiNative|EventApi)=} obj Node or event to operate on
                                     * @return {!DomApiNative|!EventApi} Wrapper providing either node API or event API
                                     */var dom = function dom(obj) { obj = obj || document; if (babelHelpers.instanceof(obj, DomApiImpl)) { return (/** @type {!DomApi} */obj); } if (babelHelpers.instanceof(obj, EventApi)) { return (/** @type {!EventApi} */obj); } var helper = obj['__domApi']; if (!helper) { if (babelHelpers.instanceof(obj, Event)) { helper = new EventApi(obj); } else { helper = new DomApiImpl(/** @type {Node} */obj); } obj['__domApi'] = helper; } return helper; }; var ShadyDOM$1 = window.ShadyDOM; var ShadyCSS = window.ShadyCSS;/**
                                     * Return true if node scope is correct.
                                     *
                                     * @param {!Element} node Node to check scope
                                     * @param {!Node} scope Scope reference
                                     * @return {boolean} True if node is in scope
                                     */function sameScope(node, scope) { return wrap(node).getRootNode() === scope; }/**
     * Ensure that elements in a ShadowDOM container are scoped correctly.
     * This function is only needed when ShadyDOM is used and unpatched DOM APIs are used in third party code.
     * This can happen in noPatch mode or when specialized APIs like ranges or tables are used to mutate DOM.
     *
     * @param  {!Element} container Container element to scope
     * @param  {boolean=} shouldObserve if true, start a mutation observer for added nodes to the container
     * @return {?MutationObserver} Returns a new MutationObserver on `container` if `shouldObserve` is true.
     */function _scopeSubtree(container) {
          var shouldObserve = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;// If using native ShadowDOM, abort
          if (!ShadyDOM$1 || !ShadyCSS) { return null; }// ShadyCSS handles DOM mutations when ShadyDOM does not handle scoping itself
          if (!ShadyDOM$1['handlesDynamicScoping']) { return null; } var ScopingShim = ShadyCSS['ScopingShim'];// if ScopingShim is not available, abort
          if (!ScopingShim) { return null; }// capture correct scope for container
          var containerScope = ScopingShim['scopeForNode'](container); var root = wrap(container).getRootNode(); var scopify = function scopify(node) {
            if (!sameScope(node, root)) { return; }// NOTE: native qSA does not honor scoped DOM, but it is faster, and the same behavior as Polymer v1
            var elements = Array.from(ShadyDOM$1['nativeMethods']['querySelectorAll'].call(node, '*')); elements.push(node); for (var _i58 = 0; _i58 < elements.length; _i58++) { var el = elements[_i58]; if (!sameScope(el, root)) { continue; } var currentScope = ScopingShim['currentScopeForNode'](el); if (currentScope !== containerScope) { if (currentScope !== '') { ScopingShim['unscopeNode'](el, currentScope); } ScopingShim['scopeNode'](el, containerScope); } }
          };// scope everything in container
          scopify(container); if (shouldObserve) { var mo = new MutationObserver(function (mxns) { for (var _i59 = 0; _i59 < mxns.length; _i59++) { var mxn = mxns[_i59]; for (var j = 0; j < mxn.addedNodes.length; j++) { var addedNode = mxn.addedNodes[j]; if (addedNode.nodeType === Node.ELEMENT_NODE) { scopify(addedNode); } } } }); mo.observe(container, { childList: true, subtree: true }); return mo; } else { return null; }
        } var DISABLED_ATTR = 'disable-upgrade'; var findObservedAttributesGetter = function findObservedAttributesGetter(ctor) { while (ctor) { var desc = Object.getOwnPropertyDescriptor(ctor, 'observedAttributes'); if (desc) { return desc.get; } ctor = Object.getPrototypeOf(ctor.prototype).constructor; } return function () { return []; }; };/**
      * Element class mixin that allows the element to boot up in a non-enabled
      * state when the `disable-upgrade` attribute is present. This mixin is
      * designed to be used with element classes like PolymerElement that perform
      * initial startup work when they are first connected. When the
      * `disable-upgrade` attribute is removed, if the element is connected, it
      * boots up and "enables" as it otherwise would; if it is not connected, the
      * element boots up when it is next connected.
      *
      * Using `disable-upgrade` with PolymerElement prevents any data propagation
      * to the element, any element DOM from stamping, or any work done in
      * connected/disconnctedCallback from occuring, but it does not prevent work
      * done in the element constructor.
      *
      * Note, this mixin must be applied on top of any element class that
      * itself implements a `connectedCallback` so that it can control the work
      * done in `connectedCallback`. For example,
      *
      *     MyClass = DisableUpgradeMixin(class extends BaseClass {...});
      *
      * @mixinFunction
      * @polymer
      * @appliesMixin ElementMixin
      * @template T
      * @param {function(new:T)} superClass Class to apply mixin to.
      * @return {function(new:T)} superClass with mixin applied.
      */var DisableUpgradeMixin = dedupingMixin(function (base) {/**
     * @constructor
     * @implements {Polymer_ElementMixin}
     * @extends {HTMLElement}
     * @private
     */var superClass = ElementMixin(base);// Work around for closure bug #126934458. Using `super` in a property
          // getter does not work so instead we search the Base prototype for an
          // implementation of observedAttributes so that we can override and call
          // the `super` getter. Note, this is done one time ever because we assume
          // that `Base` is always comes from `Polymer.LegacyElementMixn`.
          var observedAttributesGetter = findObservedAttributesGetter(superClass);/**
                                                                              * @polymer
                                                                              * @mixinClass
                                                                              * @implements {Polymer_DisableUpgradeMixin}
                                                                              */var DisableUpgradeClass =/*#__PURE__*/function (_superClass4) {
            babelHelpers.inherits(DisableUpgradeClass, _superClass4); function DisableUpgradeClass() { var _this18; babelHelpers.classCallCheck(this, DisableUpgradeClass); _this18 = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(DisableUpgradeClass).call(this));/** @type {boolean|undefined} */_this18.__isUpgradeDisabled; return _this18; } babelHelpers.createClass(DisableUpgradeClass, [{
              key: "_initializeProperties",// Prevent element from initializing properties when it's upgrade disabled.
  /** @override */value: function _initializeProperties() { if (this.hasAttribute(DISABLED_ATTR)) { this.__isUpgradeDisabled = true; } else { babelHelpers.get(babelHelpers.getPrototypeOf(DisableUpgradeClass.prototype), "_initializeProperties", this).call(this); } }// Prevent element from enabling properties when it's upgrade disabled.
              // Normally overriding connectedCallback would be enough, but dom-* elements
              /** @override */
  }, {
              key: "_enableProperties", value: function _enableProperties() { if (!this.__isUpgradeDisabled) { babelHelpers.get(babelHelpers.getPrototypeOf(DisableUpgradeClass.prototype), "_enableProperties", this).call(this); } }// If the element starts upgrade-disabled and a property is set for
              // which an accessor exists, the default should not be applied.
              // This additional check is needed because defaults are applied via
              // `_initializeProperties` which is called after initial properties
              // have been set when the element starts upgrade-disabled.
              /** @override */
  }, {
              key: "_canApplyPropertyDefault", value: function _canApplyPropertyDefault(property) { return babelHelpers.get(babelHelpers.getPrototypeOf(DisableUpgradeClass.prototype), "_canApplyPropertyDefault", this).call(this, property) && !(this.__isUpgradeDisabled && this._isPropertyPending(property)); }/**
         * @override
         * @param {string} name Attribute name.
         * @param {?string} old The previous value for the attribute.
         * @param {?string} value The new value for the attribute.
         * @param {?string} namespace The XML namespace for the attribute.
         * @return {void}
         */}, {
              key: "attributeChangedCallback", value: function attributeChangedCallback(name, old, value, namespace) {
                if (name == DISABLED_ATTR) {// When disable-upgrade is removed, intialize properties and
                  // provoke connectedCallback if the element is already connected.
                  if (this.__isUpgradeDisabled && value == null) { babelHelpers.get(babelHelpers.getPrototypeOf(DisableUpgradeClass.prototype), "_initializeProperties", this).call(this); this.__isUpgradeDisabled = false; if (wrap(this).isConnected) { babelHelpers.get(babelHelpers.getPrototypeOf(DisableUpgradeClass.prototype), "connectedCallback", this).call(this); } }
                } else { babelHelpers.get(babelHelpers.getPrototypeOf(DisableUpgradeClass.prototype), "attributeChangedCallback", this).call(this, name, old, value,/** @type {null|string} */namespace); }
              }// Prevent element from connecting when it's upgrade disabled.
              // This prevents user code in `attached` from being called.
              /** @override */
  }, {
              key: "connectedCallback", value: function connectedCallback() { if (!this.__isUpgradeDisabled) { babelHelpers.get(babelHelpers.getPrototypeOf(DisableUpgradeClass.prototype), "connectedCallback", this).call(this); } }// Prevent element from disconnecting when it's upgrade disabled.
              // This avoids allowing user code `detached` from being called without a
              // paired call to `attached`.
              /** @override */
  }, { key: "disconnectedCallback", value: function disconnectedCallback() { if (!this.__isUpgradeDisabled) { babelHelpers.get(babelHelpers.getPrototypeOf(DisableUpgradeClass.prototype), "disconnectedCallback", this).call(this); } } }], [{ key: "observedAttributes", get: function get() { return observedAttributesGetter.call(this).concat(DISABLED_ATTR); } }]); return DisableUpgradeClass;
          }(superClass); return DisableUpgradeClass;
        }); var bundledImportMeta$1 = _objectSpread({}, meta, { url: new URL('./node_modules/%40polymer/polymer/lib/legacy/legacy-element-mixin.js', meta.url).href }); var DISABLED_ATTR$1 = 'disable-upgrade'; var styleInterface = window.ShadyCSS;/**
                                         * Element class mixin that provides Polymer's "legacy" API intended to be
                                         * backward-compatible to the greatest extent possible with the API
                                         * found on the Polymer 1.x `Polymer.Base` prototype applied to all elements
                                         * defined using the `Polymer({...})` function.
                                         *
                                         * @mixinFunction
                                         * @polymer
                                         * @appliesMixin ElementMixin
                                         * @appliesMixin GestureEventListeners
                                         * @appliesMixin DirMixin
                                         * @property isAttached {boolean} Set to `true` in this element's
                                         *   `connectedCallback` and `false` in `disconnectedCallback`
                                         * @summary Element class mixin that provides Polymer's "legacy" API
                                         */var LegacyElementMixin = dedupingMixin(function (base) {// TODO(kschaaf): Note, the `@implements {Polymer_DirMixin}` is required here
  // (rather than on legacyElementBase) for unknown reasons.
  /**
     * @constructor
     * @implements {Polymer_ElementMixin}
     * @implements {Polymer_GestureEventListeners}
     * @implements {Polymer_DirMixin}
     * @extends {HTMLElement}
     * @private
     */var GesturesElement = GestureEventListeners(ElementMixin(base));// Note, the DirMixin does nothing if css is built so avoid including it
  // in that case.
  /**
     * @constructor
     * @extends {GesturesElement}
     * @private
     */var legacyElementBase = builtCSS ? GesturesElement : DirMixin(GesturesElement); var observedAttributesGetter = findObservedAttributesGetter(legacyElementBase);/**
                                                                                       * Map of simple names to touch action names
                                                                                       * @dict
                                                                                       */var DIRECTION_MAP = { 'x': 'pan-x', 'y': 'pan-y', 'none': 'none', 'all': 'auto' };/**
        * @polymer
        * @mixinClass
        * @extends {legacyElementBase}
        * @implements {Polymer_LegacyElementMixin}
        * @unrestricted
        */var LegacyElement =/*#__PURE__*/function (_legacyElementBase) {
            babelHelpers.inherits(LegacyElement, _legacyElementBase); function LegacyElement() {
              var _this19; babelHelpers.classCallCheck(this, LegacyElement); _this19 = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(LegacyElement).call(this));/** @type {boolean} */_this19.isAttached;/** @type {?WeakMap<!Element, !Object<string, !Function>>} */_this19.__boundListeners;/** @type {?Object<string, ?Function>} */_this19._debouncers;// NOTE: Inlined for perf from version of DisableUpgradeMixin.
  /** @type {boolean|undefined} */_this19.__isUpgradeDisabled;/** @type {boolean|undefined} */_this19.__needsAttributesAtConnected;/** @type {boolean|undefined} */_this19._legacyForceObservedAttributes; return _this19;
            }/**
         * Forwards `importMeta` from the prototype (i.e. from the info object
         * passed to `Polymer({...})`) to the static API.
         *
         * @return {!Object} The `import.meta` object set on the prototype
         * @suppress {missingProperties} `this` is always in the instance in
         *  closure for some reason even in a static method, rather than the class
         * @nocollapse
         */babelHelpers.createClass(LegacyElement, [{
              key: "created",/**
         * Legacy callback called during the `constructor`, for overriding
         * by the user.
         * @override
         * @return {void}
         */value: function created() { }/**
                    * Processes an attribute reaction when the `legacyNoObservedAttributes`
                    * setting is in use.
                    * @param {string} name Name of attribute that changed
                    * @param {?string} old Old attribute value
                    * @param {?string} value New attribute value
                    * @return {void}
                    */}, {
              key: "__attributeReaction", value: function __attributeReaction(name, old, value) { if (this.__dataAttributes && this.__dataAttributes[name] || name === DISABLED_ATTR$1) { this.attributeChangedCallback(name, old, value, null); } }/**
         * Sets the value of an attribute.
         * @override
         * @param {string} name The name of the attribute to change.
         * @param {string|number|boolean|!TrustedHTML|!TrustedScriptURL|!TrustedURL} value The new attribute value.
         */}, {
              key: "setAttribute", value: function setAttribute(name, value) {
                if (legacyNoObservedAttributes && !this._legacyForceObservedAttributes) {
                  var oldValue = this.getAttribute(name); babelHelpers.get(babelHelpers.getPrototypeOf(LegacyElement.prototype), "setAttribute", this).call(this, name, value);// value coerced to String for closure's benefit
                  this.__attributeReaction(name, oldValue, String(value));
                } else { babelHelpers.get(babelHelpers.getPrototypeOf(LegacyElement.prototype), "setAttribute", this).call(this, name, value); }
              }/**
         * Removes an attribute.
         * @override
         * @param {string} name The name of the attribute to remove.
         */}, {
              key: "removeAttribute", value: function removeAttribute(name) { if (legacyNoObservedAttributes && !this._legacyForceObservedAttributes) { var oldValue = this.getAttribute(name); babelHelpers.get(babelHelpers.getPrototypeOf(LegacyElement.prototype), "removeAttribute", this).call(this, name); this.__attributeReaction(name, oldValue, null); } else { babelHelpers.get(babelHelpers.getPrototypeOf(LegacyElement.prototype), "removeAttribute", this).call(this, name); } }// NOTE: Inlined for perf from version of DisableUpgradeMixin.
            }, {
              key: "_enableProperties",// NOTE: Inlined for perf from version of DisableUpgradeMixin.
  // Prevent element from enabling properties when it's upgrade disabled.
  // Normally overriding connectedCallback would be enough, but dom-* elements
  /** @override */value: function _enableProperties() { if (!this.__isUpgradeDisabled) { babelHelpers.get(babelHelpers.getPrototypeOf(LegacyElement.prototype), "_enableProperties", this).call(this); } }// NOTE: Inlined for perf from version of DisableUpgradeMixin.
              // If the element starts upgrade-disabled and a property is set for
              // which an accessor exists, the default should not be applied.
              // This additional check is needed because defaults are applied via
              // `_initializeProperties` which is called after initial properties
              // have been set when the element starts upgrade-disabled.
              /** @override */
  }, {
              key: "_canApplyPropertyDefault", value: function _canApplyPropertyDefault(property) { return babelHelpers.get(babelHelpers.getPrototypeOf(LegacyElement.prototype), "_canApplyPropertyDefault", this).call(this, property) && !(this.__isUpgradeDisabled && this._isPropertyPending(property)); }/**
         * Provides an implementation of `connectedCallback`
         * which adds Polymer legacy API's `attached` method.
         * @return {void}
         * @override
         */}, {
              key: "connectedCallback", value: function connectedCallback() {
                if (this.__needsAttributesAtConnected) { this._takeAttributes(); }// NOTE: Inlined for perf from version of DisableUpgradeMixin.
                if (!this.__isUpgradeDisabled) { babelHelpers.get(babelHelpers.getPrototypeOf(LegacyElement.prototype), "connectedCallback", this).call(this); this.isAttached = true; this.attached(); }
              }/**
         * Legacy callback called during `connectedCallback`, for overriding
         * by the user.
         * @override
         * @return {void}
         */}, {
              key: "attached", value: function attached() { }/**
                     * Provides an implementation of `disconnectedCallback`
                     * which adds Polymer legacy API's `detached` method.
                     * @return {void}
                     * @override
                     */}, {
              key: "disconnectedCallback", value: function disconnectedCallback() {// NOTE: Inlined for perf from version of DisableUpgradeMixin.
                if (!this.__isUpgradeDisabled) { babelHelpers.get(babelHelpers.getPrototypeOf(LegacyElement.prototype), "disconnectedCallback", this).call(this); this.isAttached = false; this.detached(); }
              }/**
         * Legacy callback called during `disconnectedCallback`, for overriding
         * by the user.
         * @override
         * @return {void}
         */}, {
              key: "detached", value: function detached() { }/**
                     * Provides an override implementation of `attributeChangedCallback`
                     * which adds the Polymer legacy API's `attributeChanged` method.
                     * @param {string} name Name of attribute.
                     * @param {?string} old Old value of attribute.
                     * @param {?string} value Current value of attribute.
                     * @param {?string} namespace Attribute namespace.
                     * @return {void}
                     * @override
                     */}, {
              key: "attributeChangedCallback", value: function attributeChangedCallback(name, old, value, namespace) {
                if (old !== value) {// NOTE: Inlined for perf from version of DisableUpgradeMixin.
                  if (name == DISABLED_ATTR$1) {// When disable-upgrade is removed, intialize properties and
                    // provoke connectedCallback if the element is already connected.
                    if (this.__isUpgradeDisabled && value == null) { this._initializeProperties(); this.__isUpgradeDisabled = false; if (wrap(this).isConnected) { this.connectedCallback(); } }
                  } else { babelHelpers.get(babelHelpers.getPrototypeOf(LegacyElement.prototype), "attributeChangedCallback", this).call(this, name, old, value, namespace); this.attributeChanged(name, old, value); }
                }
              }/**
         * Legacy callback called during `attributeChangedChallback`, for overriding
         * by the user.
         * @param {string} name Name of attribute.
         * @param {?string} old Old value of attribute.
         * @param {?string} value Current value of attribute.
         * @return {void}
         * @override
         */}, {
              key: "attributeChanged", value: function attributeChanged(name, old, value) { }// eslint-disable-line no-unused-vars
  /**
       * Overrides the default `Polymer.PropertyEffects` implementation to
       * add support for class initialization via the `_registered` callback.
       * This is called only when the first instance of the element is created.
       *
       * @return {void}
       * @override
       * @suppress {invalidCasts}
       */}, {
              key: "_initializeProperties", value: function _initializeProperties() {// NOTE: Inlined for perf from version of DisableUpgradeMixin.
                // Only auto-use disable-upgrade if legacyOptimizations is set.
                if (legacyOptimizations && this.hasAttribute(DISABLED_ATTR$1)) { this.__isUpgradeDisabled = true; } else {
                  var _proto = Object.getPrototypeOf(this); if (!_proto.hasOwnProperty(JSCompiler_renameProperty('__hasRegisterFinished', _proto))) {
                    this._registered();// backstop in case the `_registered` implementation does not set this
                    _proto.__hasRegisterFinished = true;
                  } babelHelpers.get(babelHelpers.getPrototypeOf(LegacyElement.prototype), "_initializeProperties", this).call(this); this.root =/** @type {HTMLElement} */this; this.created();// Pull all attribute values 1x if `legacyNoObservedAttributes` is set.
                  if (legacyNoObservedAttributes && !this._legacyForceObservedAttributes) {
                    if (this.hasAttributes()) {
                      this._takeAttributes();// Element created from scratch or parser generated
                    } else if (!this.parentNode) { this.__needsAttributesAtConnected = true; }
                  }// Ensure listeners are applied immediately so that they are
                  // added before declarative event listeners. This allows an element to
                  // decorate itself via an event prior to any declarative listeners
                  // seeing the event. Note, this ensures compatibility with 1.x ordering.
                  this._applyListeners();
                }
              }
            }, {
              key: "_takeAttributes", value: function _takeAttributes() { var a = this.attributes; for (var _i60 = 0, l = a.length; _i60 < l; _i60++) { var _attr = a[_i60]; this.__attributeReaction(_attr.name, null, _attr.value); } }/**
         * Called automatically when an element is initializing.
         * Users may override this method to perform class registration time
         * work. The implementation should ensure the work is performed
         * only once for the class.
         * @protected
         * @return {void}
         * @override
         */}, {
              key: "_registered", value: function _registered() { }/**
                        * Overrides the default `Polymer.PropertyEffects` implementation to
                        * add support for installing `hostAttributes` and `listeners`.
                        *
                        * @return {void}
                        * @override
                        */}, {
              key: "ready", value: function ready() { this._ensureAttributes(); babelHelpers.get(babelHelpers.getPrototypeOf(LegacyElement.prototype), "ready", this).call(this); }/**
         * Ensures an element has required attributes. Called when the element
         * is being readied via `ready`. Users should override to set the
         * element's required attributes. The implementation should be sure
         * to check and not override existing attributes added by
         * the user of the element. Typically, setting attributes should be left
         * to the element user and not done here; reasonable exceptions include
         * setting aria roles and focusability.
         * @protected
         * @return {void}
         * @override
         */}, {
              key: "_ensureAttributes", value: function _ensureAttributes() { }/**
                              * Adds element event listeners. Called when the element
                              * is being readied via `ready`. Users should override to
                              * add any required element event listeners.
                              * In performance critical elements, the work done here should be kept
                              * to a minimum since it is done before the element is rendered. In
                              * these elements, consider adding listeners asynchronously so as not to
                              * block render.
                              * @protected
                              * @return {void}
                              * @override
                              */}, {
              key: "_applyListeners", value: function _applyListeners() { }/**
                            * Converts a typed JavaScript value to a string.
                            *
                            * Note this method is provided as backward-compatible legacy API
                            * only.  It is not directly called by any Polymer features. To customize
                            * how properties are serialized to attributes for attribute bindings and
                            * `reflectToAttribute: true` properties as well as this method, override
                            * the `_serializeValue` method provided by `Polymer.PropertyAccessors`.
                            *
                            * @param {*} value Value to deserialize
                            * @return {string | undefined} Serialized value
                            * @override
                            */}, {
              key: "serialize", value: function serialize(value) { return this._serializeValue(value); }/**
         * Converts a string to a typed JavaScript value.
         *
         * Note this method is provided as backward-compatible legacy API
         * only.  It is not directly called by any Polymer features.  To customize
         * how attributes are deserialized to properties for in
         * `attributeChangedCallback`, override `_deserializeValue` method
         * provided by `Polymer.PropertyAccessors`.
         *
         * @param {string} value String to deserialize
         * @param {*} type Type to deserialize the string to
         * @return {*} Returns the deserialized value in the `type` given.
         * @override
         */}, {
              key: "deserialize", value: function deserialize(value, type) { return this._deserializeValue(value, type); }/**
         * Serializes a property to its associated attribute.
         *
         * Note this method is provided as backward-compatible legacy API
         * only.  It is not directly called by any Polymer features.
         *
         * @param {string} property Property name to reflect.
         * @param {string=} attribute Attribute name to reflect.
         * @param {*=} value Property value to reflect.
         * @return {void}
         * @override
         */}, {
              key: "reflectPropertyToAttribute", value: function reflectPropertyToAttribute(property, attribute, value) { this._propertyToAttribute(property, attribute, value); }/**
         * Sets a typed value to an HTML attribute on a node.
         *
         * Note this method is provided as backward-compatible legacy API
         * only.  It is not directly called by any Polymer features.
         *
         * @param {*} value Value to serialize.
         * @param {string} attribute Attribute name to serialize to.
         * @param {Element} node Element to set attribute to.
         * @return {void}
         * @override
         */}, {
              key: "serializeValueToAttribute", value: function serializeValueToAttribute(value, attribute, node) { this._valueToNodeAttribute(/** @type {Element} */node || this, value, attribute); }/**
         * Copies own properties (including accessor descriptors) from a source
         * object to a target object.
         *
         * @param {Object} prototype Target object to copy properties to.
         * @param {Object} api Source object to copy properties from.
         * @return {Object} prototype object that was passed as first argument.
         * @override
         */}, {
              key: "extend", value: function extend(prototype, api) { if (!(prototype && api)) { return prototype || api; } var n$ = Object.getOwnPropertyNames(api); for (var _i61 = 0, n; _i61 < n$.length && (n = n$[_i61]); _i61++) { var pd = Object.getOwnPropertyDescriptor(api, n); if (pd) { Object.defineProperty(prototype, n, pd); } } return prototype; }/**
         * Copies props from a source object to a target object.
         *
         * Note, this method uses a simple `for...in` strategy for enumerating
         * properties.  To ensure only `ownProperties` are copied from source
         * to target and that accessor implementations are copied, use `extend`.
         *
         * @param {!Object} target Target object to copy properties to.
         * @param {!Object} source Source object to copy properties from.
         * @return {!Object} Target object that was passed as first argument.
         * @override
         */}, {
              key: "mixin", value: function mixin(target, source) { for (var _i62 in source) { target[_i62] = source[_i62]; } return target; }/**
         * Sets the prototype of an object.
         *
         * Note this method is provided as backward-compatible legacy API
         * only.  It is not directly called by any Polymer features.
         * @param {Object} object The object on which to set the prototype.
         * @param {Object} prototype The prototype that will be set on the given
         * `object`.
         * @return {Object} Returns the given `object` with its prototype set
         * to the given `prototype` object.
         * @override
         */}, {
              key: "chainObject", value: function chainObject(object, prototype) { if (object && prototype && object !== prototype) { object.__proto__ = prototype; } return object; }/* **** Begin Template **** */ /**
                                        * Calls `importNode` on the `content` of the `template` specified and
                                        * returns a document fragment containing the imported content.
                                        *
                                        * @param {HTMLTemplateElement} template HTML template element to instance.
                                        * @return {!DocumentFragment} Document fragment containing the imported
                                        *   template content.
                                        * @override
                                        * @suppress {missingProperties} go/missingfnprops
                                        */}, {
              key: "instanceTemplate", value: function instanceTemplate(template) { var content = this.constructor._contentForTemplate(template); var dom =/** @type {!DocumentFragment} */document.importNode(content, true); return dom; }/* **** Begin Events **** */ /**
                                      * Dispatches a custom event with an optional detail value.
                                      *
                                      * @param {string} type Name of event type.
                                      * @param {*=} detail Detail value containing event-specific
                                      *   payload.
                                      * @param {{ bubbles: (boolean|undefined), cancelable: (boolean|undefined),
                                      *     composed: (boolean|undefined) }=}
                                      *  options Object specifying options.  These may include:
                                      *  `bubbles` (boolean, defaults to `true`),
                                      *  `cancelable` (boolean, defaults to false), and
                                      *  `node` on which to fire the event (HTMLElement, defaults to `this`).
                                      * @return {!Event} The new event that was fired.
                                      * @override
                                      */}, {
              key: "fire", value: function fire(type, detail, options) { options = options || {}; detail = detail === null || detail === undefined ? {} : detail; var event = new Event(type, { bubbles: options.bubbles === undefined ? true : options.bubbles, cancelable: Boolean(options.cancelable), composed: options.composed === undefined ? true : options.composed }); event.detail = detail; var node = options.node || this; wrap(node).dispatchEvent(event); return event; }/**
         * Convenience method to add an event listener on a given element,
         * late bound to a named method on this element.
         *
         * @param {?EventTarget} node Element to add event listener to.
         * @param {string} eventName Name of event to listen for.
         * @param {string} methodName Name of handler method on `this` to call.
         * @return {void}
         * @override
         */}, {
              key: "listen", value: function listen(node, eventName, methodName) { node =/** @type {!EventTarget} */node || this; var hbl = this.__boundListeners || (this.__boundListeners = new WeakMap()); var bl = hbl.get(node); if (!bl) { bl = {}; hbl.set(node, bl); } var key = eventName + methodName; if (!bl[key]) { bl[key] = this._addMethodEventListenerToNode(/** @type {!Node} */node, eventName, methodName, this); } }/**
         * Convenience method to remove an event listener from a given element,
         * late bound to a named method on this element.
         *
         * @param {?EventTarget} node Element to remove event listener from.
         * @param {string} eventName Name of event to stop listening to.
         * @param {string} methodName Name of handler method on `this` to not call
         anymore.
         * @return {void}
         * @override
         */}, {
              key: "unlisten", value: function unlisten(node, eventName, methodName) { node =/** @type {!EventTarget} */node || this; var bl = this.__boundListeners && this.__boundListeners.get(/** @type {!Element} */node); var key = eventName + methodName; var handler = bl && bl[key]; if (handler) { this._removeEventListenerFromNode(/** @type {!Node} */node, eventName, handler); bl[key] =/** @type {?} */null; } }/**
         * Override scrolling behavior to all direction, one direction, or none.
         *
         * Valid scroll directions:
         *   - 'all': scroll in any direction
         *   - 'x': scroll only in the 'x' direction
         *   - 'y': scroll only in the 'y' direction
         *   - 'none': disable scrolling for this node
         *
         * @param {string=} direction Direction to allow scrolling
         * Defaults to `all`.
         * @param {Element=} node Element to apply scroll direction setting.
         * Defaults to `this`.
         * @return {void}
         * @override
         */}, {
              key: "setScrollDirection", value: function setScrollDirection(direction, node) { setTouchAction(/** @type {!Element} */node || this, DIRECTION_MAP[direction] || 'auto'); }/* **** End Events **** */ /**
                                    * Convenience method to run `querySelector` on this local DOM scope.
                                    *
                                    * This function calls `Polymer.dom(this.root).querySelector(slctr)`.
                                    *
                                    * @param {string} slctr Selector to run on this local DOM scope
                                    * @return {Element} Element found by the selector, or null if not found.
                                    * @override
                                    */}, {
              key: "$$", value: function $$(slctr) {// Note, no need to `wrap` this because root is always patched
                return this.root.querySelector(slctr);
              }/**
         * Return the element whose local dom within which this element
         * is contained. This is a shorthand for
         * `this.getRootNode().host`.
         * @this {Element}
         * @return {?Node} The element whose local dom within which this element is
         * contained.
         * @override
         */}, {
              key: "distributeContent",/**
         * Force this element to distribute its children to its local dom.
         * This should not be necessary as of Polymer 2.0.2 and is provided only
         * for backwards compatibility.
         * @return {void}
         * @override
         */value: function distributeContent() { var thisEl =/** @type {Element} */this; var domApi =/** @type {PolymerDomApi} */dom(thisEl); if (window.ShadyDOM && domApi.shadowRoot) { ShadyDOM.flush(); } }/**
         * Returns a list of nodes that are the effective childNodes. The effective
         * childNodes list is the same as the element's childNodes except that
         * any `<content>` elements are replaced with the list of nodes distributed
         * to the `<content>`, the result of its `getDistributedNodes` method.
         * @return {!Array<!Node>} List of effective child nodes.
         * @suppress {invalidCasts} LegacyElementMixin must be applied to an
         *     HTMLElement
         * @override
         */}, {
              key: "getEffectiveChildNodes", value: function getEffectiveChildNodes() { var thisEl =/** @type {Element} */this; var domApi =/** @type {PolymerDomApi} */dom(thisEl); return domApi.getEffectiveChildNodes(); }/**
         * Returns a list of nodes distributed within this element that match
         * `selector`. These can be dom children or elements distributed to
         * children that are insertion points.
         * @param {string} selector Selector to run.
         * @return {!Array<!Node>} List of distributed elements that match selector.
         * @suppress {invalidCasts} LegacyElementMixin must be applied to an
         * HTMLElement
         * @override
         */}, {
              key: "queryDistributedElements", value: function queryDistributedElements(selector) { var thisEl =/** @type {Element} */this; var domApi =/** @type {PolymerDomApi} */dom(thisEl); return domApi.queryDistributedElements(selector); }/**
         * Returns a list of elements that are the effective children. The effective
         * children list is the same as the element's children except that
         * any `<content>` elements are replaced with the list of elements
         * distributed to the `<content>`.
         *
         * @return {!Array<!Node>} List of effective children.
         * @override
         */}, {
              key: "getEffectiveChildren", value: function getEffectiveChildren() { var list = this.getEffectiveChildNodes(); return list.filter(function (/** @type {!Node} */n) { return n.nodeType === Node.ELEMENT_NODE; }); }/**
         * Returns a string of text content that is the concatenation of the
         * text content's of the element's effective childNodes (the elements
         * returned by <a href="#getEffectiveChildNodes>getEffectiveChildNodes</a>.
         *
         * @return {string} List of effective children.
         * @override
         */}, {
              key: "getEffectiveTextContent", value: function getEffectiveTextContent() { var cn = this.getEffectiveChildNodes(); var tc = []; for (var _i63 = 0, c; c = cn[_i63]; _i63++) { if (c.nodeType !== Node.COMMENT_NODE) { tc.push(c.textContent); } } return tc.join(''); }/**
         * Returns the first effective childNode within this element that
         * match `selector`. These can be dom child nodes or elements distributed
         * to children that are insertion points.
         * @param {string} selector Selector to run.
         * @return {Node} First effective child node that matches selector.
         * @override
         */}, {
              key: "queryEffectiveChildren", value: function queryEffectiveChildren(selector) { var e$ = this.queryDistributedElements(selector); return e$ && e$[0]; }/**
         * Returns a list of effective childNodes within this element that
         * match `selector`. These can be dom child nodes or elements distributed
         * to children that are insertion points.
         * @param {string} selector Selector to run.
         * @return {!Array<!Node>} List of effective child nodes that match
         *     selector.
         * @override
         */}, {
              key: "queryAllEffectiveChildren", value: function queryAllEffectiveChildren(selector) { return this.queryDistributedElements(selector); }/**
         * Returns a list of nodes distributed to this element's `<slot>`.
         *
         * If this element contains more than one `<slot>` in its local DOM,
         * an optional selector may be passed to choose the desired content.
         *
         * @param {string=} slctr CSS selector to choose the desired
         *   `<slot>`.  Defaults to `content`.
         * @return {!Array<!Node>} List of distributed nodes for the `<slot>`.
         * @override
         */}, {
              key: "getContentChildNodes", value: function getContentChildNodes(slctr) {// Note, no need to `wrap` this because root is always
                var content = this.root.querySelector(slctr || 'slot'); return content ?/** @type {PolymerDomApi} */dom(content).getDistributedNodes() : [];
              }/**
         * Returns a list of element children distributed to this element's
         * `<slot>`.
         *
         * If this element contains more than one `<slot>` in its
         * local DOM, an optional selector may be passed to choose the desired
         * content.  This method differs from `getContentChildNodes` in that only
         * elements are returned.
         *
         * @param {string=} slctr CSS selector to choose the desired
         *   `<content>`.  Defaults to `content`.
         * @return {!Array<!HTMLElement>} List of distributed nodes for the
         *   `<slot>`.
         * @suppress {invalidCasts}
         * @override
         */}, {
              key: "getContentChildren", value: function getContentChildren(slctr) { var children =/** @type {!Array<!HTMLElement>} */this.getContentChildNodes(slctr).filter(function (n) { return n.nodeType === Node.ELEMENT_NODE; }); return children; }/**
         * Checks whether an element is in this element's light DOM tree.
         *
         * @param {?Node} node The element to be checked.
         * @return {boolean} true if node is in this element's light DOM tree.
         * @suppress {invalidCasts} LegacyElementMixin must be applied to an
         * HTMLElement
         * @override
         */}, {
              key: "isLightDescendant", value: function isLightDescendant(node) { var thisNode =/** @type {Node} */this; return thisNode !== node && wrap(thisNode).contains(node) && wrap(thisNode).getRootNode() === wrap(node).getRootNode(); }/**
         * Checks whether an element is in this element's local DOM tree.
         *
         * @param {!Element} node The element to be checked.
         * @return {boolean} true if node is in this element's local DOM tree.
         * @override
         */}, {
              key: "isLocalDescendant", value: function isLocalDescendant(node) { return this.root === wrap(node).getRootNode(); }/**
         * No-op for backwards compatibility. This should now be handled by
         * ShadyCss library.
         * @param  {!Element} container Container element to scope
         * @param  {boolean=} shouldObserve if true, start a mutation observer for added nodes to the container
         * @return {?MutationObserver} Returns a new MutationObserver on `container` if `shouldObserve` is true.
         * @override
         */}, {
              key: "scopeSubtree", value: function scopeSubtree(container) { var shouldObserve = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false; return _scopeSubtree(container, shouldObserve); }/**
         * Returns the computed style value for the given property.
         * @param {string} property The css property name.
         * @return {string} Returns the computed css property value for the given
         * `property`.
         * @suppress {invalidCasts} LegacyElementMixin must be applied to an
         *     HTMLElement
         * @override
         */}, {
              key: "getComputedStyleValue", value: function getComputedStyleValue(property) { return styleInterface.getComputedStyleValue(/** @type {!Element} */this, property); }// debounce
  /**
       * Call `debounce` to collapse multiple requests for a named task into
       * one invocation which is made after the wait time has elapsed with
       * no new request.  If no wait time is given, the callback will be called
       * at microtask timing (guaranteed before paint).
       *
       *     debouncedClickAction(e) {
       *       // will not call `processClick` more than once per 100ms
       *       this.debounce('click', function() {
       *        this.processClick();
       *       } 100);
       *     }
       *
       * @param {string} jobName String to identify the debounce job.
       * @param {function():void} callback Function that is called (with `this`
       *   context) when the wait time elapses.
       * @param {number=} wait Optional wait time in milliseconds (ms) after the
       *   last signal that must elapse before invoking `callback`
       * @return {!Object} Returns a debouncer object on which exists the
       * following methods: `isActive()` returns true if the debouncer is
       * active; `cancel()` cancels the debouncer if it is active;
       * `flush()` immediately invokes the debounced callback if the debouncer
       * is active.
       * @override
       */}, {
              key: "debounce", value: function debounce(jobName, callback, wait) { this._debouncers = this._debouncers || {}; return this._debouncers[jobName] = Debouncer.debounce(this._debouncers[jobName], wait > 0 ? timeOut.after(wait) : microTask, callback.bind(this)); }/**
         * Returns whether a named debouncer is active.
         *
         * @param {string} jobName The name of the debouncer started with `debounce`
         * @return {boolean} Whether the debouncer is active (has not yet fired).
         * @override
         */}, {
              key: "isDebouncerActive", value: function isDebouncerActive(jobName) { this._debouncers = this._debouncers || {}; var debouncer = this._debouncers[jobName]; return !!(debouncer && debouncer.isActive()); }/**
         * Immediately calls the debouncer `callback` and inactivates it.
         *
         * @param {string} jobName The name of the debouncer started with `debounce`
         * @return {void}
         * @override
         */}, {
              key: "flushDebouncer", value: function flushDebouncer(jobName) { this._debouncers = this._debouncers || {}; var debouncer = this._debouncers[jobName]; if (debouncer) { debouncer.flush(); } }/**
         * Cancels an active debouncer.  The `callback` will not be called.
         *
         * @param {string} jobName The name of the debouncer started with `debounce`
         * @return {void}
         * @override
         */}, {
              key: "cancelDebouncer", value: function cancelDebouncer(jobName) { this._debouncers = this._debouncers || {}; var debouncer = this._debouncers[jobName]; if (debouncer) { debouncer.cancel(); } }/**
         * Runs a callback function asynchronously.
         *
         * By default (if no waitTime is specified), async callbacks are run at
         * microtask timing, which will occur before paint.
         *
         * @param {!Function} callback The callback function to run, bound to
         *     `this`.
         * @param {number=} waitTime Time to wait before calling the
         *   `callback`.  If unspecified or 0, the callback will be run at microtask
         *   timing (before paint).
         * @return {number} Handle that may be used to cancel the async job.
         * @override
         */}, {
              key: "async", value: function async(callback, waitTime) { return waitTime > 0 ? timeOut.run(callback.bind(this), waitTime) : ~microTask.run(callback.bind(this)); }/**
         * Cancels an async operation started with `async`.
         *
         * @param {number} handle Handle returned from original `async` call to
         *   cancel.
         * @return {void}
         * @override
         */}, {
              key: "cancelAsync", value: function cancelAsync(handle) { handle < 0 ? microTask.cancel(~handle) : timeOut.cancel(handle); }// other
  /**
       * Convenience method for creating an element and configuring it.
       *
       * @param {string} tag HTML element tag to create.
       * @param {Object=} props Object of properties to configure on the
       *    instance.
       * @return {!Element} Newly created and configured element.
       * @override
       */}, {
              key: "create", value: function create(tag, props) { var elt = document.createElement(tag); if (props) { if (elt.setProperties) { elt.setProperties(props); } else { for (var n in props) { elt[n] = props[n]; } } } return elt; }/**
         * Polyfill for Element.prototype.matches, which is sometimes still
         * prefixed.
         *
         * @param {string} selector Selector to test.
         * @param {!Element=} node Element to test the selector against.
         * @return {boolean} Whether the element matches the selector.
         * @override
         */}, {
              key: "elementMatches", value: function elementMatches(selector, node) { return matchesSelector(node || this, selector); }/**
         * Toggles an HTML attribute on or off.
         *
         * @param {string} name HTML attribute name
         * @param {boolean=} bool Boolean to force the attribute on or off.
         *    When unspecified, the state of the attribute will be reversed.
         * @return {boolean} true if the attribute now exists
         * @override
         */}, {
              key: "toggleAttribute", value: function toggleAttribute(name, bool) { var node =/** @type {Element} */this; if (arguments.length === 3) { node =/** @type {Element} */arguments[2]; } if (arguments.length == 1) { bool = !node.hasAttribute(name); } if (bool) { wrap(node).setAttribute(name, ''); return true; } else { wrap(node).removeAttribute(name); return false; } }/**
         * Toggles a CSS class on or off.
         *
         * @param {string} name CSS class name
         * @param {boolean=} bool Boolean to force the class on or off.
         *    When unspecified, the state of the class will be reversed.
         * @param {Element=} node Node to target.  Defaults to `this`.
         * @return {void}
         * @override
         */}, {
              key: "toggleClass", value: function toggleClass(name, bool, node) { node =/** @type {Element} */node || this; if (arguments.length == 1) { bool = !node.classList.contains(name); } if (bool) { node.classList.add(name); } else { node.classList.remove(name); } }/**
         * Cross-platform helper for setting an element's CSS `transform` property.
         *
         * @param {string} transformText Transform setting.
         * @param {Element=} node Element to apply the transform to.
         * Defaults to `this`
         * @return {void}
         * @override
         */}, {
              key: "transform", value: function transform(transformText, node) { node =/** @type {Element} */node || this; node.style.webkitTransform = transformText; node.style.transform = transformText; }/**
         * Cross-platform helper for setting an element's CSS `translate3d`
         * property.
         *
         * @param {number|string} x X offset.
         * @param {number|string} y Y offset.
         * @param {number|string} z Z offset.
         * @param {Element=} node Element to apply the transform to.
         * Defaults to `this`.
         * @return {void}
         * @override
         */}, {
              key: "translate3d", value: function translate3d(x, y, z, node) { node =/** @type {Element} */node || this; this.transform('translate3d(' + x + ',' + y + ',' + z + ')', node); }/**
         * Removes an item from an array, if it exists.
         *
         * If the array is specified by path, a change notification is
         * generated, so that observers, data bindings and computed
         * properties watching that path can update.
         *
         * If the array is passed directly, **no change
         * notification is generated**.
         *
         * @param {string | !Array<number|string>} arrayOrPath Path to array from
         *     which to remove the item
         *   (or the array itself).
         * @param {*} item Item to remove.
         * @return {Array} Array containing item removed.
         * @override
         */}, {
              key: "arrayDelete", value: function arrayDelete(arrayOrPath, item) { var index; if (Array.isArray(arrayOrPath)) { index = arrayOrPath.indexOf(item); if (index >= 0) { return arrayOrPath.splice(index, 1); } } else { var arr = _get(this, arrayOrPath); index = arr.indexOf(item); if (index >= 0) { return this.splice(arrayOrPath, index, 1); } } return null; }// logging
  /**
       * Facades `console.log`/`warn`/`error` as override point.
       *
       * @param {string} level One of 'log', 'warn', 'error'
       * @param {Array} args Array of strings or objects to log
       * @return {void}
       * @override
       */}, {
              key: "_logger", value: function _logger(level, args) {
                var _console;// accept ['foo', 'bar'] and [['foo', 'bar']]
                if (Array.isArray(args) && args.length === 1 && Array.isArray(args[0])) { args = args[0]; } switch (level) { case 'log': case 'warn': case 'error': (_console = console)[level].apply(_console, babelHelpers.toConsumableArray(args)); }
              }/**
         * Facades `console.log` as an override point.
         *
         * @param {...*} args Array of strings or objects to log
         * @return {void}
         * @override
         */}, {
              key: "_log", value: function _log() { for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) { args[_key6] = arguments[_key6]; } this._logger('log', args); }/**
         * Facades `console.warn` as an override point.
         *
         * @param {...*} args Array of strings or objects to log
         * @return {void}
         * @override
         */}, {
              key: "_warn", value: function _warn() { for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) { args[_key7] = arguments[_key7]; } this._logger('warn', args); }/**
         * Facades `console.error` as an override point.
         *
         * @param {...*} args Array of strings or objects to log
         * @return {void}
         * @override
         */}, {
              key: "_error", value: function _error() { for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) { args[_key8] = arguments[_key8]; } this._logger('error', args); }/**
         * Formats a message using the element type an a method name.
         *
         * @param {string} methodName Method name to associate with message
         * @param {...*} args Array of strings or objects to log
         * @return {!Array} Array with formatting information for `console`
         *   logging.
         * @override
         */}, { key: "_logf", value: function _logf(methodName) { for (var _len9 = arguments.length, args = new Array(_len9 > 1 ? _len9 - 1 : 0), _key9 = 1; _key9 < _len9; _key9++) { args[_key9 - 1] = arguments[_key9]; } return ['[%s::%s]', this.is, methodName].concat(args); } }, { key: "domHost", get: function get() { var root = wrap(this).getRootNode(); return babelHelpers.instanceof(root, DocumentFragment) ?/** @type {ShadowRoot} */root.host : root; } }], [{ key: "importMeta", get: function get() { return this.prototype.importMeta; } }, {
              key: "observedAttributes", get: function get() {
                if (legacyNoObservedAttributes && !this.prototype._legacyForceObservedAttributes) {// Ensure this element is property registered with the telemetry system.
                  if (!this.hasOwnProperty(JSCompiler_renameProperty('__observedAttributes', this))) { this.__observedAttributes = []; register(this.prototype); } return this.__observedAttributes;
                } else { return observedAttributesGetter.call(this).concat(DISABLED_ATTR$1); }
              }
            }]); return LegacyElement;
          }(legacyElementBase); LegacyElement.prototype.is = ''; return LegacyElement;
        }); var lifecycleProps = { attached: true, detached: true, ready: true, created: true, beforeRegister: true, registered: true, attributeChanged: true, listeners: true, hostAttributes: true }; var excludeOnInfo = { attached: true, detached: true, ready: true, created: true, beforeRegister: true, registered: true, attributeChanged: true, behaviors: true, _noAccessors: true }; var excludeOnBehaviors = Object.assign({ listeners: true, hostAttributes: true, properties: true, observers: true }, excludeOnInfo); function copyProperties(source, target, excludeProps) {
          var noAccessors = source._noAccessors; var propertyNames = Object.getOwnPropertyNames(source); for (var _i64 = 0; _i64 < propertyNames.length; _i64++) {
            var _p16 = propertyNames[_i64]; if (_p16 in excludeProps) { continue; } if (noAccessors) { target[_p16] = source[_p16]; } else {
              var pd = Object.getOwnPropertyDescriptor(source, _p16); if (pd) {// ensure property is configurable so that a later behavior can
                // re-configure it.
                pd.configurable = true; Object.defineProperty(target, _p16, pd);
              }
            }
          }
        }/**
     * Applies a "legacy" behavior or array of behaviors to the provided class.
     *
     * Note: this method will automatically also apply the `LegacyElementMixin`
     * to ensure that any legacy behaviors can rely on legacy Polymer API on
     * the underlying element.
     *
     * @function
     * @template T
     * @param {!Object|!Array<!Object>} behaviors Behavior object or array of behaviors.
     * @param {function(new:T)} klass Element class.
     * @return {?} Returns a new Element class extended by the
     * passed in `behaviors` and also by `LegacyElementMixin`.
     * @suppress {invalidCasts, checkTypes}
     */function mixinBehaviors(behaviors, klass) { return GenerateClassFromInfo({}, LegacyElementMixin(klass), behaviors); }// NOTE:
        // 1.x
        // Behaviors were mixed in *in reverse order* and de-duped on the fly.
        // The rule was that behavior properties were copied onto the element
        // prototype if and only if the property did not already exist.
        // Given: Polymer{ behaviors: [A, B, C, A, B]}, property copy order was:
        // (1), B, (2), A, (3) C. This means prototype properties win over
        // B properties win over A win over C. This mirrors what would happen
        // with inheritance if element extended B extended A extended C.
        //
        // Again given, Polymer{ behaviors: [A, B, C, A, B]}, the resulting
        // `behaviors` array was [C, A, B].
        // Behavior lifecycle methods were called in behavior array order
        // followed by the element, e.g. (1) C.created, (2) A.created,
        // (3) B.created, (4) element.created. There was no support for
        // super, and "super-behavior" methods were callable only by name).
        //
        // 2.x
        // Behaviors are made into proper mixins which live in the
        // element's prototype chain. Behaviors are placed in the element prototype
        // eldest to youngest and de-duped youngest to oldest:
        // So, first [A, B, C, A, B] becomes [C, A, B] then,
        // the element prototype becomes (oldest) (1) PolymerElement, (2) class(C),
        // (3) class(A), (4) class(B), (5) class(Polymer({...})).
        // Result:
        // This means element properties win over B properties win over A win
        // over C. (same as 1.x)
        // If lifecycle is called (super then me), order is
        // (1) C.created, (2) A.created, (3) B.created, (4) element.created
        // (again same as 1.x)
        function applyBehaviors(proto, behaviors, lifecycle) { for (var _i65 = 0; _i65 < behaviors.length; _i65++) { applyInfo(proto, behaviors[_i65], lifecycle, excludeOnBehaviors); } } function applyInfo(proto, info, lifecycle, excludeProps) { copyProperties(info, proto, excludeProps); for (var _p17 in lifecycleProps) { if (info[_p17]) { lifecycle[_p17] = lifecycle[_p17] || []; lifecycle[_p17].push(info[_p17]); } } }/**
     * @param {Array} behaviors List of behaviors to flatten.
     * @param {Array=} list Target list to flatten behaviors into.
     * @param {Array=} exclude List of behaviors to exclude from the list.
     * @return {!Array} Returns the list of flattened behaviors.
     */function flattenBehaviors(behaviors, list, exclude) {
          list = list || []; for (var _i66 = behaviors.length - 1; _i66 >= 0; _i66--) {
            var b = behaviors[_i66]; if (b) {
              if (Array.isArray(b)) { flattenBehaviors(b, list); } else {// dedup
                if (list.indexOf(b) < 0 && (!exclude || exclude.indexOf(b) < 0)) { list.unshift(b); }
              }
            } else { console.warn('behavior is null, check for missing or 404 import'); }
          } return list;
        }/**
     * Copies property descriptors from source to target, overwriting all fields
     * of any previous descriptor for a property *except* for `value`, which is
     * merged in from the target if it does not exist on the source.
     *
     * @param {*} target Target properties object
     * @param {*} source Source properties object
     */function mergeProperties(target, source) { for (var _p18 in source) { var targetInfo = target[_p18]; var sourceInfo = source[_p18]; if (!('value' in sourceInfo) && targetInfo && 'value' in targetInfo) { target[_p18] = Object.assign({ value: targetInfo.value }, sourceInfo); } else { target[_p18] = sourceInfo; } } } var LegacyElement = LegacyElementMixin(HTMLElement);/* Note about construction and extension of legacy classes.
                                                           [Changed in Q4 2018 to optimize performance.]
                                                         
                                                           When calling `Polymer` or `mixinBehaviors`, the generated class below is
                                                           made. The list of behaviors was previously made into one generated class per
                                                           behavior, but this is no longer the case as behaviors are now called
                                                           manually. Note, there may *still* be multiple generated classes in the
                                                           element's prototype chain if extension is used with `mixinBehaviors`.
                                                         
                                                           The generated class is directly tied to the info object and behaviors
                                                           used to create it. That list of behaviors is filtered so it's only the
                                                           behaviors not active on the superclass. In order to call through to the
                                                           entire list of lifecycle methods, it's important to call `super`.
                                                         
                                                           The element's `properties` and `observers` are controlled via the finalization
                                                           mechanism provided by `PropertiesMixin`. `Properties` and `observers` are
                                                           collected by manually traversing the prototype chain and merging.
                                                         
                                                           To limit changes, the `_registered` method is called via `_initializeProperties`
                                                           and not `_finalizeClass`.
                                                         
                                                         */ /**
                                                             * @param {!PolymerInit} info Polymer info object
                                                             * @param {function(new:HTMLElement)} Base base class to extend with info object
                                                             * @param {Object=} behaviors behaviors to copy into the element
                                                             * @return {function(new:HTMLElement)} Generated class
                                                             * @suppress {checkTypes}
                                                             * @private
                                                             */function GenerateClassFromInfo(info, Base, behaviors) {// manages behavior and lifecycle processing (filled in after class definition)
          var behaviorList; var lifecycle = {};/** @private */var PolymerGenerated =/*#__PURE__*/function (_Base) {
            babelHelpers.inherits(PolymerGenerated, _Base); function PolymerGenerated() { babelHelpers.classCallCheck(this, PolymerGenerated); return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(PolymerGenerated).apply(this, arguments)); } babelHelpers.createClass(PolymerGenerated, [{
              key: "created",/**
         * @return {void}
         */value: function created() { babelHelpers.get(babelHelpers.getPrototypeOf(PolymerGenerated.prototype), "created", this).call(this); var list = lifecycle.created; if (list) { for (var _i67 = 0; _i67 < list.length; _i67++) { list[_i67].call(this); } } }/**
         * @return {void}
         */}, {
              key: "_registered", value: function _registered() {/* NOTE: `beforeRegister` is called here for bc, but the behavior
          is different than in 1.x. In 1.0, the method was called *after*
          mixing prototypes together but *before* processing of meta-objects.
          However, dynamic effects can still be set here and can be done either
          in `beforeRegister` or `registered`. It is no longer possible to set
          `is` in `beforeRegister` as you could in 1.x.
        */ // only proceed if the generated class' prototype has not been registered.
                var generatedProto = PolymerGenerated.prototype; if (!generatedProto.hasOwnProperty(JSCompiler_renameProperty('__hasRegisterFinished', generatedProto))) {
                  generatedProto.__hasRegisterFinished = true;// ensure superclass is registered first.
                  babelHelpers.get(babelHelpers.getPrototypeOf(PolymerGenerated.prototype), "_registered", this).call(this);// copy properties onto the generated class lazily if we're optimizing,
                  if (legacyOptimizations) { copyPropertiesToProto(generatedProto); }// make sure legacy lifecycle is called on the *element*'s prototype
                  // and not the generated class prototype; if the element has been
                  // extended, these are *not* the same.
                  var _proto2 = Object.getPrototypeOf(this); var list = lifecycle.beforeRegister; if (list) { for (var _i68 = 0; _i68 < list.length; _i68++) { list[_i68].call(_proto2); } } list = lifecycle.registered; if (list) { for (var _i69 = 0; _i69 < list.length; _i69++) { list[_i69].call(_proto2); } }
                }
              }/**
         * @return {void}
         */}, {
              key: "_applyListeners", value: function _applyListeners() { babelHelpers.get(babelHelpers.getPrototypeOf(PolymerGenerated.prototype), "_applyListeners", this).call(this); var list = lifecycle.listeners; if (list) { for (var _i70 = 0; _i70 < list.length; _i70++) { var listeners = list[_i70]; if (listeners) { for (var l in listeners) { this._addMethodEventListenerToNode(this, l, listeners[l]); } } } } }// note: exception to "super then me" rule;
  // do work before calling super so that super attributes
  // only apply if not already set.
  /**
       * @return {void}
       */}, {
              key: "_ensureAttributes", value: function _ensureAttributes() { var list = lifecycle.hostAttributes; if (list) { for (var _i71 = list.length - 1; _i71 >= 0; _i71--) { var hostAttributes = list[_i71]; for (var a in hostAttributes) { this._ensureAttribute(a, hostAttributes[a]); } } } babelHelpers.get(babelHelpers.getPrototypeOf(PolymerGenerated.prototype), "_ensureAttributes", this).call(this); }/**
         * @return {void}
         */}, {
              key: "ready", value: function ready() { babelHelpers.get(babelHelpers.getPrototypeOf(PolymerGenerated.prototype), "ready", this).call(this); var list = lifecycle.ready; if (list) { for (var _i72 = 0; _i72 < list.length; _i72++) { list[_i72].call(this); } } }/**
         * @return {void}
         */}, {
              key: "attached", value: function attached() { babelHelpers.get(babelHelpers.getPrototypeOf(PolymerGenerated.prototype), "attached", this).call(this); var list = lifecycle.attached; if (list) { for (var _i73 = 0; _i73 < list.length; _i73++) { list[_i73].call(this); } } }/**
         * @return {void}
         */}, {
              key: "detached", value: function detached() { babelHelpers.get(babelHelpers.getPrototypeOf(PolymerGenerated.prototype), "detached", this).call(this); var list = lifecycle.detached; if (list) { for (var _i74 = 0; _i74 < list.length; _i74++) { list[_i74].call(this); } } }/**
         * Implements native Custom Elements `attributeChangedCallback` to
         * set an attribute value to a property via `_attributeToProperty`.
         *
         * @param {string} name Name of attribute that changed
         * @param {?string} old Old attribute value
         * @param {?string} value New attribute value
         * @return {void}
         */}, { key: "attributeChanged", value: function attributeChanged(name, old, value) { babelHelpers.get(babelHelpers.getPrototypeOf(PolymerGenerated.prototype), "attributeChanged", this).call(this); var list = lifecycle.attributeChanged; if (list) { for (var _i75 = 0; _i75 < list.length; _i75++) { list[_i75].call(this, name, old, value); } } } }], [{
              key: "_finalizeClass",// explicitly not calling super._finalizeClass
  /** @nocollapse */value: function _finalizeClass() {// if calling via a subclass that hasn't been generated, pass through to super
                if (!this.hasOwnProperty(JSCompiler_renameProperty('generatedFrom', this))) {// TODO(https://github.com/google/closure-compiler/issues/3240):
                  //     Change back to just super.methodCall()
                  Base._finalizeClass.call(this);
                } else {// interleave properties and observers per behavior and `info`
                  if (behaviorList) { for (var _i76 = 0, b; _i76 < behaviorList.length; _i76++) { b = behaviorList[_i76]; if (b.properties) { this.createProperties(b.properties); } if (b.observers) { this.createObservers(b.observers, b.properties); } } } if (info.properties) { this.createProperties(info.properties); } if (info.observers) { this.createObservers(info.observers, info.properties); }// make sure to prepare the element template
                  this._prepareTemplate();
                }
              }/** @nocollapse */
            }, { key: "properties", get: function get() { var properties = {}; if (behaviorList) { for (var _i77 = 0; _i77 < behaviorList.length; _i77++) { mergeProperties(properties, behaviorList[_i77].properties); } } mergeProperties(properties, info.properties); return properties; }/** @nocollapse */ }, { key: "observers", get: function get() { var observers = []; if (behaviorList) { for (var _i78 = 0, b; _i78 < behaviorList.length; _i78++) { b = behaviorList[_i78]; if (b.observers) { observers = observers.concat(b.observers); } } } if (info.observers) { observers = observers.concat(info.observers); } return observers; } }]); return PolymerGenerated;
          }(Base);// apply behaviors, note actual copying is done lazily at first instance creation
          if (behaviors) {// NOTE: ensure the behavior is extending a class with
            // legacy element api. This is necessary since behaviors expect to be able
            // to access 1.x legacy api.
            if (!Array.isArray(behaviors)) { behaviors = [behaviors]; } var superBehaviors = Base.prototype.behaviors;// get flattened, deduped list of behaviors *not* already on super class
            behaviorList = flattenBehaviors(behaviors, null, superBehaviors); PolymerGenerated.prototype.behaviors = superBehaviors ? superBehaviors.concat(behaviors) : behaviorList;
          } var copyPropertiesToProto = function copyPropertiesToProto(proto) { if (behaviorList) { applyBehaviors(proto, behaviorList, lifecycle); } applyInfo(proto, info, lifecycle, excludeOnInfo); };// copy properties if we're not optimizing
          if (!legacyOptimizations) { copyPropertiesToProto(PolymerGenerated.prototype); } PolymerGenerated.generatedFrom = info; return PolymerGenerated;
        }/**
     * Generates a class that extends `LegacyElement` based on the
     * provided info object.  Metadata objects on the `info` object
     * (`properties`, `observers`, `listeners`, `behaviors`, `is`) are used
     * for Polymer's meta-programming systems, and any functions are copied
     * to the generated class.
     *
     * Valid "metadata" values are as follows:
     *
     * `is`: String providing the tag name to register the element under. In
     * addition, if a `dom-module` with the same id exists, the first template
     * in that `dom-module` will be stamped into the shadow root of this element,
     * with support for declarative event listeners (`on-...`), Polymer data
     * bindings (`[[...]]` and `{{...}}`), and id-based node finding into
     * `this.$`.
     *
     * `properties`: Object describing property-related metadata used by Polymer
     * features (key: property names, value: object containing property metadata).
     * Valid keys in per-property metadata include:
     * - `type` (String|Number|Object|Array|...): Used by
     *   `attributeChangedCallback` to determine how string-based attributes
     *   are deserialized to JavaScript property values.
     * - `notify` (boolean): Causes a change in the property to fire a
     *   non-bubbling event called `<property>-changed`. Elements that have
     *   enabled two-way binding to the property use this event to observe changes.
     * - `readOnly` (boolean): Creates a getter for the property, but no setter.
     *   To set a read-only property, use the private setter method
     *   `_setProperty(property, value)`.
     * - `observer` (string): Observer method name that will be called when
     *   the property changes. The arguments of the method are
     *   `(value, previousValue)`.
     * - `computed` (string): String describing method and dependent properties
     *   for computing the value of this property (e.g. `'computeFoo(bar, zot)'`).
     *   Computed properties are read-only by default and can only be changed
     *   via the return value of the computing method.
     *
     * `observers`: Array of strings describing multi-property observer methods
     *  and their dependent properties (e.g. `'observeABC(a, b, c)'`).
     *
     * `listeners`: Object describing event listeners to be added to each
     *  instance of this element (key: event name, value: method name).
     *
     * `behaviors`: Array of additional `info` objects containing metadata
     * and callbacks in the same format as the `info` object here which are
     * merged into this element.
     *
     * `hostAttributes`: Object listing attributes to be applied to the host
     *  once created (key: attribute name, value: attribute value).  Values
     *  are serialized based on the type of the value.  Host attributes should
     *  generally be limited to attributes such as `tabIndex` and `aria-...`.
     *  Attributes in `hostAttributes` are only applied if a user-supplied
     *  attribute is not already present (attributes in markup override
     *  `hostAttributes`).
     *
     * In addition, the following Polymer-specific callbacks may be provided:
     * - `registered`: called after first instance of this element,
     * - `created`: called during `constructor`
     * - `attached`: called during `connectedCallback`
     * - `detached`: called during `disconnectedCallback`
     * - `ready`: called before first `attached`, after all properties of
     *   this element have been propagated to its template and all observers
     *   have run
     *
     * @param {!PolymerInit} info Object containing Polymer metadata and functions
     *   to become class methods.
     * @template T
     * @param {function(T):T} mixin Optional mixin to apply to legacy base class
     *   before extending with Polymer metaprogramming.
     * @return {function(new:HTMLElement)} Generated class
     */var Class = function Class(info, mixin) {
          if (!info) { console.warn('Polymer.Class requires `info` argument'); } var klass = mixin ? mixin(LegacyElement) : LegacyElement; klass = GenerateClassFromInfo(info, klass, info.behaviors);// decorate klass with registration info
          klass.is = klass.prototype.is = info.is; return klass;
        }; var Polymer = function Polymer(info) {// if input is a `class` (aka a function with a prototype), use the prototype
          // remember that the `constructor` will never be called
          var klass; if (typeof info === 'function') { klass = info; } else { klass = Polymer.Class(info); }// Copy opt out for `legacyNoObservedAttributes` from info object to class.
          if (info._legacyForceObservedAttributes) { klass.prototype._legacyForceObservedAttributes = info._legacyForceObservedAttributes; } customElements.define(klass.is,/** @type {!HTMLElement} */klass); return klass;
        }; Polymer.Class = Class; function mutablePropertyChange(inst, property, value, old, mutableData) {
          var isObject; if (mutableData) {
            isObject = babelHelpers.typeof(value) === 'object' && value !== null;// Pull `old` for Objects from temp cache, but treat `null` as a primitive
            if (isObject) { old = inst.__dataTemp[property]; }
          }// Strict equality check, but return false for NaN===NaN
          var shouldChange = old !== value && (old === old || value === value);// Objects are stored in temporary cache (cleared at end of
          // turn), which is used for dirty-checking
          if (isObject && shouldChange) { inst.__dataTemp[property] = value; } return shouldChange;
        }/**
     * Element class mixin to skip strict dirty-checking for objects and arrays
     * (always consider them to be "dirty"), for use on elements utilizing
     * `PropertyEffects`
     *
     * By default, `PropertyEffects` performs strict dirty checking on
     * objects, which means that any deep modifications to an object or array will
     * not be propagated unless "immutable" data patterns are used (i.e. all object
     * references from the root to the mutation were changed).
     *
     * Polymer also provides a proprietary data mutation and path notification API
     * (e.g. `notifyPath`, `set`, and array mutation API's) that allow efficient
     * mutation and notification of deep changes in an object graph to all elements
     * bound to the same object graph.
     *
     * In cases where neither immutable patterns nor the data mutation API can be
     * used, applying this mixin will cause Polymer to skip dirty checking for
     * objects and arrays (always consider them to be "dirty").  This allows a
     * user to make a deep modification to a bound object graph, and then either
     * simply re-set the object (e.g. `this.items = this.items`) or call `notifyPath`
     * (e.g. `this.notifyPath('items')`) to update the tree.  Note that all
     * elements that wish to be updated based on deep mutations must apply this
     * mixin or otherwise skip strict dirty checking for objects/arrays.
     * Specifically, any elements in the binding tree between the source of a
     * mutation and the consumption of it must apply this mixin or enable the
     * `OptionalMutableData` mixin.
     *
     * In order to make the dirty check strategy configurable, see
     * `OptionalMutableData`.
     *
     * Note, the performance characteristics of propagating large object graphs
     * will be worse as opposed to using strict dirty checking with immutable
     * patterns or Polymer's path notification API.
     *
     * @mixinFunction
     * @polymer
     * @summary Element class mixin to skip strict dirty-checking for objects
     *   and arrays
     * @template T
     * @param {function(new:T)} superClass Class to apply mixin to.
     * @return {function(new:T)} superClass with mixin applied.
     */var MutableData = dedupingMixin(function (superClass) {/**
     * @polymer
     * @mixinClass
     * @implements {Polymer_MutableData}
     */var MutableData =/*#__PURE__*/function (_superClass5) {
            babelHelpers.inherits(MutableData, _superClass5); function MutableData() { babelHelpers.classCallCheck(this, MutableData); return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(MutableData).apply(this, arguments)); } babelHelpers.createClass(MutableData, [{
              key: "_shouldPropertyChange",/**
       * Overrides `PropertyEffects` to provide option for skipping
       * strict equality checking for Objects and Arrays.
       *
       * This method pulls the value to dirty check against from the `__dataTemp`
       * cache (rather than the normal `__data` cache) for Objects.  Since the temp
       * cache is cleared at the end of a turn, this implementation allows
       * side-effects of deep object changes to be processed by re-setting the
       * same object (using the temp cache as an in-turn backstop to prevent
       * cycles due to 2-way notification).
       *
       * @param {string} property Property name
       * @param {*} value New property value
       * @param {*} old Previous property value
       * @return {boolean} Whether the property should be considered a change
       * @protected
       */value: function _shouldPropertyChange(property, value, old) { return mutablePropertyChange(this, property, value, old, true); }
            }]); return MutableData;
          }(superClass); return MutableData;
        });/**
       * Element class mixin to add the optional ability to skip strict
       * dirty-checking for objects and arrays (always consider them to be
       * "dirty") by setting a `mutable-data` attribute on an element instance.
       *
       * By default, `PropertyEffects` performs strict dirty checking on
       * objects, which means that any deep modifications to an object or array will
       * not be propagated unless "immutable" data patterns are used (i.e. all object
       * references from the root to the mutation were changed).
       *
       * Polymer also provides a proprietary data mutation and path notification API
       * (e.g. `notifyPath`, `set`, and array mutation API's) that allow efficient
       * mutation and notification of deep changes in an object graph to all elements
       * bound to the same object graph.
       *
       * In cases where neither immutable patterns nor the data mutation API can be
       * used, applying this mixin will allow Polymer to skip dirty checking for
       * objects and arrays (always consider them to be "dirty").  This allows a
       * user to make a deep modification to a bound object graph, and then either
       * simply re-set the object (e.g. `this.items = this.items`) or call `notifyPath`
       * (e.g. `this.notifyPath('items')`) to update the tree.  Note that all
       * elements that wish to be updated based on deep mutations must apply this
       * mixin or otherwise skip strict dirty checking for objects/arrays.
       * Specifically, any elements in the binding tree between the source of a
       * mutation and the consumption of it must enable this mixin or apply the
       * `MutableData` mixin.
       *
       * While this mixin adds the ability to forgo Object/Array dirty checking,
       * the `mutableData` flag defaults to false and must be set on the instance.
       *
       * Note, the performance characteristics of propagating large object graphs
       * will be worse by relying on `mutableData: true` as opposed to using
       * strict dirty checking with immutable patterns or Polymer's path notification
       * API.
       *
       * @mixinFunction
       * @polymer
       * @summary Element class mixin to optionally skip strict dirty-checking
       *   for objects and arrays
       */var OptionalMutableData = dedupingMixin(function (superClass) {/**
     * @mixinClass
     * @polymer
     * @implements {Polymer_OptionalMutableData}
     */var OptionalMutableData =/*#__PURE__*/function (_superClass6) {
            babelHelpers.inherits(OptionalMutableData, _superClass6); function OptionalMutableData() { babelHelpers.classCallCheck(this, OptionalMutableData); return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(OptionalMutableData).apply(this, arguments)); } babelHelpers.createClass(OptionalMutableData, [{
              key: "_shouldPropertyChange",/**
         * Overrides `PropertyEffects` to provide option for skipping
         * strict equality checking for Objects and Arrays.
         *
         * When `this.mutableData` is true on this instance, this method
         * pulls the value to dirty check against from the `__dataTemp` cache
         * (rather than the normal `__data` cache) for Objects.  Since the temp
         * cache is cleared at the end of a turn, this implementation allows
         * side-effects of deep object changes to be processed by re-setting the
         * same object (using the temp cache as an in-turn backstop to prevent
         * cycles due to 2-way notification).
         *
         * @param {string} property Property name
         * @param {*} value New property value
         * @param {*} old Previous property value
         * @return {boolean} Whether the property should be considered a change
         * @protected
         */value: function _shouldPropertyChange(property, value, old) { return mutablePropertyChange(this, property, value, old, this.mutableData); }
            }], [{
              key: "properties",/** @nocollapse */get: function get() {
                return {/**
           * Instance-level flag for configuring the dirty-checking strategy
           * for this element.  When true, Objects and Arrays will skip dirty
           * checking, otherwise strict equality checking will be used.
           */mutableData: Boolean
                };
              }
            }]); return OptionalMutableData;
          }(superClass); return OptionalMutableData;
        });// Export for use by legacy behavior
        MutableData._mutablePropertyChange = mutablePropertyChange;// machinery for propagating host properties to children. This is an ES5
        // class only because Babel (incorrectly) requires super() in the class
        // constructor even though no `this` is used and it returns an instance.
        var newInstance = null;/**
                           * @constructor
                           * @extends {HTMLTemplateElement}
                           * @private
                           */function HTMLTemplateElementExtension() { return newInstance; } HTMLTemplateElementExtension.prototype = Object.create(HTMLTemplateElement.prototype, { constructor: { value: HTMLTemplateElementExtension, writable: true } });/**
       * @constructor
       * @implements {Polymer_PropertyEffects}
       * @extends {HTMLTemplateElementExtension}
       * @private
       */var DataTemplate = PropertyEffects(HTMLTemplateElementExtension);/**
                                                                       * @constructor
                                                                       * @implements {Polymer_MutableData}
                                                                       * @extends {DataTemplate}
                                                                       * @private
                                                                       */var MutableDataTemplate = MutableData(DataTemplate);// Applies a DataTemplate subclass to a <template> instance
        function upgradeTemplate(template, constructor) { newInstance = template; Object.setPrototypeOf(template, constructor.prototype); new constructor(); newInstance = null; }/**
     * Base class for TemplateInstance.
     * @constructor
     * @extends {HTMLElement}
     * @implements {Polymer_PropertyEffects}
     * @private
     */var templateInstanceBase = PropertyEffects(/*#__PURE__*/function () { function _class() { babelHelpers.classCallCheck(this, _class); } return _class; }()); function showHideChildren(hide, children) {
          for (var _i79 = 0; _i79 < children.length; _i79++) {
            var n = children[_i79];// Ignore non-changes
            if (Boolean(hide) != Boolean(n.__hideTemplateChildren__)) {// clear and restore text
              if (n.nodeType === Node.TEXT_NODE) {
                if (hide) { n.__polymerTextContent__ = n.textContent; n.textContent = ''; } else { n.textContent = n.__polymerTextContent__; }// remove and replace slot
              } else if (n.localName === 'slot') { if (hide) { n.__polymerReplaced__ = document.createComment('hidden-slot'); wrap(wrap(n).parentNode).replaceChild(n.__polymerReplaced__, n); } else { var replace = n.__polymerReplaced__; if (replace) { wrap(wrap(replace).parentNode).replaceChild(n, replace); } } }// hide and show nodes
              else if (n.style) { if (hide) { n.__polymerDisplay__ = n.style.display; n.style.display = 'none'; } else { n.style.display = n.__polymerDisplay__; } }
            } n.__hideTemplateChildren__ = hide; if (n._showHideChildren) { n._showHideChildren(hide); }
          }
        }/**
     * @polymer
     * @customElement
     * @appliesMixin PropertyEffects
     * @unrestricted
     */var TemplateInstanceBase =/*#__PURE__*/function (_templateInstanceBase) {
          babelHelpers.inherits(TemplateInstanceBase, _templateInstanceBase); function TemplateInstanceBase(props) {
            var _this20; babelHelpers.classCallCheck(this, TemplateInstanceBase); _this20 = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(TemplateInstanceBase).call(this)); _this20._configureProperties(props);/** @type {!StampedTemplate} */_this20.root = _this20._stampTemplate(_this20.__dataHost);// Save list of stamped children
            var children = [];/** @suppress {invalidCasts} */_this20.children =/** @type {!NodeList} */children;// Polymer 1.x did not use `Polymer.dom` here so not bothering.
            for (var n = _this20.root.firstChild; n; n = n.nextSibling) { children.push(n); n.__templatizeInstance = babelHelpers.assertThisInitialized(_this20); } if (_this20.__templatizeOwner && _this20.__templatizeOwner.__hideTemplateChildren__) { _this20._showHideChildren(true); }// Flush props only when props are passed if instance props exist
            // or when there isn't instance props.
            var options = _this20.__templatizeOptions; if (props && options.instanceProps || !options.instanceProps) { _this20._enableProperties(); } return _this20;
          }/**
       * Configure the given `props` by calling `_setPendingProperty`. Also
       * sets any properties stored in `__hostProps`.
       * @private
       * @param {Object} props Object of property name-value pairs to set.
       * @return {void}
       */babelHelpers.createClass(TemplateInstanceBase, [{
            key: "_configureProperties", value: function _configureProperties(props) {
              var options = this.__templatizeOptions; if (options.forwardHostProp) { for (var hprop in this.__hostProps) { this._setPendingProperty(hprop, this.__dataHost['_host_' + hprop]); } }// Any instance props passed in the constructor will overwrite host props;
              // normally this would be a user error but we don't specifically filter them
              for (var iprop in props) { this._setPendingProperty(iprop, props[iprop]); }
            }/**
       * Forwards a host property to this instance.  This method should be
       * called on instances from the `options.forwardHostProp` callback
       * to propagate changes of host properties to each instance.
       *
       * Note this method enqueues the change, which are flushed as a batch.
       *
       * @param {string} prop Property or path name
       * @param {*} value Value of the property to forward
       * @return {void}
       */}, {
            key: "forwardHostProp", value: function forwardHostProp(prop, value) { if (this._setPendingPropertyOrPath(prop, value, false, true)) { this.__dataHost._enqueueClient(this); } }/**
       * Override point for adding custom or simulated event handling.
       *
       * @override
       * @param {!Node} node Node to add event listener to
       * @param {string} eventName Name of event
       * @param {function(!Event):void} handler Listener function to add
       * @return {void}
       */}, {
            key: "_addEventListenerToNode", value: function _addEventListenerToNode(node, eventName, handler) {
              var _this21 = this; if (this._methodHost && this.__templatizeOptions.parentModel) {// If this instance should be considered a parent model, decorate
                // events this template instance as `model`
                this._methodHost._addEventListenerToNode(node, eventName, function (e) { e.model = _this21; handler(e); });
              } else {// Otherwise delegate to the template's host (which could be)
                // another template instance
                var templateHost = this.__dataHost.__dataHost; if (templateHost) { templateHost._addEventListenerToNode(node, eventName, handler); }
              }
            }/**
       * Shows or hides the template instance top level child elements. For
       * text nodes, `textContent` is removed while "hidden" and replaced when
       * "shown."
       * @param {boolean} hide Set to true to hide the children;
       * set to false to show them.
       * @return {void}
       * @protected
       */}, {
            key: "_showHideChildren", value: function _showHideChildren(hide) { showHideChildren(hide, this.children); }/**
       * Overrides default property-effects implementation to intercept
       * textContent bindings while children are "hidden" and cache in
       * private storage for later retrieval.
       *
       * @override
       * @param {!Node} node The node to set a property on
       * @param {string} prop The property to set
       * @param {*} value The value to set
       * @return {void}
       * @protected
       */}, {
            key: "_setUnmanagedPropertyToNode", value: function _setUnmanagedPropertyToNode(node, prop, value) { if (node.__hideTemplateChildren__ && node.nodeType == Node.TEXT_NODE && prop == 'textContent') { node.__polymerTextContent__ = value; } else { babelHelpers.get(babelHelpers.getPrototypeOf(TemplateInstanceBase.prototype), "_setUnmanagedPropertyToNode", this).call(this, node, prop, value); } }/**
       * Find the parent model of this template instance.  The parent model
       * is either another templatize instance that had option `parentModel: true`,
       * or else the host element.
       *
       * @return {!Polymer_PropertyEffects} The parent model of this instance
       */}, {
            key: "dispatchEvent",/**
       * Stub of HTMLElement's `dispatchEvent`, so that effects that may
       * dispatch events safely no-op.
       *
       * @param {Event} event Event to dispatch
       * @return {boolean} Always true.
       * @override
       */value: function dispatchEvent(event) {// eslint-disable-line no-unused-vars
              return true;
            }
          }, {
            key: "parentModel", get: function get() {
              var model = this.__parentModel; if (!model) {
                var options; model = this; do {// A template instance's `__dataHost` is a <template>
                  // `model.__dataHost.__dataHost` is the template's host
                  model = model.__dataHost.__dataHost;
                } while ((options = model.__templatizeOptions) && !options.parentModel); this.__parentModel = model;
              } return model;
            }
          }]); return TemplateInstanceBase;
        }(templateInstanceBase);/** @type {!DataTemplate} */TemplateInstanceBase.prototype.__dataHost;/** @type {!TemplatizeOptions} */TemplateInstanceBase.prototype.__templatizeOptions;/** @type {!Polymer_PropertyEffects} */TemplateInstanceBase.prototype._methodHost;/** @type {!Object} */TemplateInstanceBase.prototype.__templatizeOwner;/** @type {!Object} */TemplateInstanceBase.prototype.__hostProps;/**
                                               * @constructor
                                               * @extends {TemplateInstanceBase}
                                               * @implements {Polymer_MutableData}
                                               * @private
                                               */var MutableTemplateInstanceBase = MutableData(// This cast shouldn't be neccessary, but Closure doesn't understand that
  // TemplateInstanceBase is a constructor function.
  /** @type {function(new:TemplateInstanceBase)} */TemplateInstanceBase); function findMethodHost(template) {// Technically this should be the owner of the outermost template.
          // In shadow dom, this is always getRootNode().host, but we can
          // approximate this via cooperation with our dataHost always setting
          // `_methodHost` as long as there were bindings (or id's) on this
          // instance causing it to get a dataHost.
          var templateHost = template.__dataHost; return templateHost && templateHost._methodHost || templateHost;
        }/* eslint-disable valid-jsdoc */ /**
                                      * @suppress {missingProperties} class.prototype is not defined for some reason
                                      */function createTemplatizerClass(template, templateInfo, options) {/**
     * @constructor
     * @extends {TemplateInstanceBase}
     */var templatizerBase = options.mutableData ? MutableTemplateInstanceBase : TemplateInstanceBase;// Affordance for global mixins onto TemplatizeInstance
          if (_templatize.mixin) { templatizerBase = _templatize.mixin(templatizerBase); }/**
       * Anonymous class created by the templatize
       * @constructor
       * @private
       */var klass =/*#__PURE__*/function (_templatizerBase) { babelHelpers.inherits(klass, _templatizerBase); function klass() { babelHelpers.classCallCheck(this, klass); return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(klass).apply(this, arguments)); } return klass; }(templatizerBase);/** @override */klass.prototype.__templatizeOptions = options; klass.prototype._bindTemplate(template); addNotifyEffects(klass, template, templateInfo, options); return klass;
        }/**
     * Adds propagate effects from the template to the template instance for
     * properties that the host binds to the template using the `_host_` prefix.
     *
     * @suppress {missingProperties} class.prototype is not defined for some reason
     */function addPropagateEffects(target, templateInfo, options, methodHost) {
          var userForwardHostProp = options.forwardHostProp; if (userForwardHostProp && templateInfo.hasHostProps) {// Under the `removeNestedTemplates` optimization, a custom element like
            // `dom-if` or `dom-repeat` can itself be treated as the "template"; this
            // flag is used to switch between upgrading a `<template>` to be a property
            // effects client vs. adding the effects directly to the custom element
            var isTemplate = target.localName == 'template';// Provide data API and property effects on memoized template class
            var klass = templateInfo.templatizeTemplateClass; if (!klass) {
              if (isTemplate) {/**
           * @constructor
           * @extends {DataTemplate}
           */var templatizedBase = options.mutableData ? MutableDataTemplate : DataTemplate;// NOTE: due to https://github.com/google/closure-compiler/issues/2928,
  // combining the next two lines into one assignment causes a spurious
  // type error.
  /** @private */var TemplatizedTemplate =/*#__PURE__*/function (_templatizedBase) { babelHelpers.inherits(TemplatizedTemplate, _templatizedBase); function TemplatizedTemplate() { babelHelpers.classCallCheck(this, TemplatizedTemplate); return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(TemplatizedTemplate).apply(this, arguments)); } return TemplatizedTemplate; }(templatizedBase); klass = templateInfo.templatizeTemplateClass = TemplatizedTemplate;
              } else {/**
           * @constructor
           * @extends {PolymerElement}
           */var _templatizedBase2 = target.constructor;// Create a cached subclass of the base custom element class onto which
  // to put the template-specific propagate effects
  // NOTE: due to https://github.com/google/closure-compiler/issues/2928,
  // combining the next two lines into one assignment causes a spurious
  // type error.
  /** @private */var TemplatizedTemplateExtension =/*#__PURE__*/function (_templatizedBase3) { babelHelpers.inherits(TemplatizedTemplateExtension, _templatizedBase3); function TemplatizedTemplateExtension() { babelHelpers.classCallCheck(this, TemplatizedTemplateExtension); return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(TemplatizedTemplateExtension).apply(this, arguments)); } return TemplatizedTemplateExtension; }(_templatizedBase2); klass = templateInfo.templatizeTemplateClass = TemplatizedTemplateExtension;
              }// Add template - >instances effects
              // and host <- template effects
              var hostProps = templateInfo.hostProps; for (var prop in hostProps) { klass.prototype._addPropertyEffect('_host_' + prop, klass.prototype.PROPERTY_EFFECT_TYPES.PROPAGATE, { fn: createForwardHostPropEffect(prop, userForwardHostProp) }); klass.prototype._createNotifyingProperty('_host_' + prop); } if (legacyWarnings && methodHost) { warnOnUndeclaredProperties(templateInfo, options, methodHost); }
            }// Mix any pre-bound data into __data; no need to flush this to
            // instances since they pull from the template at instance-time
            if (target.__dataProto) {// Note, generally `__dataProto` could be chained, but it's guaranteed
              // to not be since this is a vanilla template we just added effects to
              Object.assign(target.__data, target.__dataProto);
            } if (isTemplate) {
              upgradeTemplate(target, klass);// Clear any pending data for performance
              target.__dataTemp = {}; target.__dataPending = null; target.__dataOld = null; target._enableProperties();
            } else {// Swizzle the cached subclass prototype onto the custom element
              Object.setPrototypeOf(target, klass.prototype);// Check for any pre-bound instance host properties, and do the
              // instance property delete/assign dance for those (directly into data;
              // not need to go through accessor since they are pulled at instance time)
              var _hostProps = templateInfo.hostProps; for (var _prop in _hostProps) { _prop = '_host_' + _prop; if (_prop in target) { var val = target[_prop]; delete target[_prop]; target.__data[_prop] = val; } }
            }
          }
        }/* eslint-enable valid-jsdoc */function createForwardHostPropEffect(hostProp, userForwardHostProp) { return function forwardHostProp(template, prop, props) { userForwardHostProp.call(template.__templatizeOwner, prop.substring('_host_'.length), props[prop]); }; } function addNotifyEffects(klass, template, templateInfo, options) {
          var hostProps = templateInfo.hostProps || {}; for (var iprop in options.instanceProps) { delete hostProps[iprop]; var userNotifyInstanceProp = options.notifyInstanceProp; if (userNotifyInstanceProp) { klass.prototype._addPropertyEffect(iprop, klass.prototype.PROPERTY_EFFECT_TYPES.NOTIFY, { fn: createNotifyInstancePropEffect(iprop, userNotifyInstanceProp) }); } } if (options.forwardHostProp && template.__dataHost) {
            for (var hprop in hostProps) {// As we're iterating hostProps in this function, note whether
              // there were any, for an optimization in addPropagateEffects
              if (!templateInfo.hasHostProps) { templateInfo.hasHostProps = true; } klass.prototype._addPropertyEffect(hprop, klass.prototype.PROPERTY_EFFECT_TYPES.NOTIFY, { fn: createNotifyHostPropEffect() });
            }
          }
        } function createNotifyInstancePropEffect(instProp, userNotifyInstanceProp) { return function notifyInstanceProp(inst, prop, props) { userNotifyInstanceProp.call(inst.__templatizeOwner, inst, prop, props[prop]); }; } function createNotifyHostPropEffect() { return function notifyHostProp(inst, prop, props) { inst.__dataHost._setPendingPropertyOrPath('_host_' + prop, props[prop], true, true); }; }/**
     * Returns an anonymous `PropertyEffects` class bound to the
     * `<template>` provided.  Instancing the class will result in the
     * template being stamped into a document fragment stored as the instance's
     * `root` property, after which it can be appended to the DOM.
     *
     * Templates may utilize all Polymer data-binding features as well as
     * declarative event listeners.  Event listeners and inline computing
     * functions in the template will be called on the host of the template.
     *
     * The constructor returned takes a single argument dictionary of initial
     * property values to propagate into template bindings.  Additionally
     * host properties can be forwarded in, and instance properties can be
     * notified out by providing optional callbacks in the `options` dictionary.
     *
     * Valid configuration in `options` are as follows:
     *
     * - `forwardHostProp(property, value)`: Called when a property referenced
     *   in the template changed on the template's host. As this library does
     *   not retain references to templates instanced by the user, it is the
     *   templatize owner's responsibility to forward host property changes into
     *   user-stamped instances.  The `instance.forwardHostProp(property, value)`
     *    method on the generated class should be called to forward host
     *   properties into the template to prevent unnecessary property-changed
     *   notifications. Any properties referenced in the template that are not
     *   defined in `instanceProps` will be notified up to the template's host
     *   automatically.
     * - `instanceProps`: Dictionary of property names that will be added
     *   to the instance by the templatize owner.  These properties shadow any
     *   host properties, and changes within the template to these properties
     *   will result in `notifyInstanceProp` being called.
     * - `mutableData`: When `true`, the generated class will skip strict
     *   dirty-checking for objects and arrays (always consider them to be
     *   "dirty").
     * - `notifyInstanceProp(instance, property, value)`: Called when
     *   an instance property changes.  Users may choose to call `notifyPath`
     *   on e.g. the owner to notify the change.
     * - `parentModel`: When `true`, events handled by declarative event listeners
     *   (`on-event="handler"`) will be decorated with a `model` property pointing
     *   to the template instance that stamped it.  It will also be returned
     *   from `instance.parentModel` in cases where template instance nesting
     *   causes an inner model to shadow an outer model.
     *
     * All callbacks are called bound to the `owner`. Any context
     * needed for the callbacks (such as references to `instances` stamped)
     * should be stored on the `owner` such that they can be retrieved via
     * `this`.
     *
     * When `options.forwardHostProp` is declared as an option, any properties
     * referenced in the template will be automatically forwarded from the host of
     * the `<template>` to instances, with the exception of any properties listed in
     * the `options.instanceProps` object.  `instanceProps` are assumed to be
     * managed by the owner of the instances, either passed into the constructor
     * or set after the fact.  Note, any properties passed into the constructor will
     * always be set to the instance (regardless of whether they would normally
     * be forwarded from the host).
     *
     * Note that `templatize()` can be run only once for a given `<template>`.
     * Further calls will result in an error. Also, there is a special
     * behavior if the template was duplicated through a mechanism such as
     * `<dom-repeat>` or `<test-fixture>`. In this case, all calls to
     * `templatize()` return the same class for all duplicates of a template.
     * The class returned from `templatize()` is generated only once using
     * the `options` from the first call. This means that any `options`
     * provided to subsequent calls will be ignored. Therefore, it is very
     * important not to close over any variables inside the callbacks. Also,
     * arrow functions must be avoided because they bind the outer `this`.
     * Inside the callbacks, any contextual information can be accessed
     * through `this`, which points to the `owner`.
     *
     * @param {!HTMLTemplateElement} template Template to templatize
     * @param {Polymer_PropertyEffects=} owner Owner of the template instances;
     *   any optional callbacks will be bound to this owner.
     * @param {Object=} options Options dictionary (see summary for details)
     * @return {function(new:TemplateInstanceBase, Object=)} Generated class bound
     *   to the template provided
     * @suppress {invalidCasts}
     */function _templatize(template, owner, options) {// Under strictTemplatePolicy, the templatized element must be owned
          // by a (trusted) Polymer element, indicated by existence of _methodHost;
          // e.g. for dom-if & dom-repeat in main document, _methodHost is null
          if (strictTemplatePolicy && !findMethodHost(template)) { throw new Error('strictTemplatePolicy: template owner not trusted'); } options =/** @type {!TemplatizeOptions} */options || {}; if (template.__templatizeOwner) { throw new Error('A <template> can only be templatized once'); } template.__templatizeOwner = owner; var ctor = owner ? owner.constructor : TemplateInstanceBase; var templateInfo = ctor._parseTemplate(template);// Get memoized base class for the prototypical template, which
  // includes property effects for binding template & forwarding
  /**
     * @constructor
     * @extends {TemplateInstanceBase}
     */var baseClass = templateInfo.templatizeInstanceClass; if (!baseClass) { baseClass = createTemplatizerClass(template, templateInfo, options); templateInfo.templatizeInstanceClass = baseClass; } var methodHost = findMethodHost(template);// Host property forwarding must be installed onto template instance
          addPropagateEffects(template, templateInfo, options, methodHost);// Subclass base class and add reference for this specific template
  /** @private */var klass =/*#__PURE__*/function (_baseClass) { babelHelpers.inherits(TemplateInstance, _baseClass); function TemplateInstance() { babelHelpers.classCallCheck(this, TemplateInstance); return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(TemplateInstance).apply(this, arguments)); } return TemplateInstance; }(baseClass);/** @override */klass.prototype._methodHost = methodHost;/** @override */klass.prototype.__dataHost =/** @type {!DataTemplate} */template;/** @override */klass.prototype.__templatizeOwner =/** @type {!Object} */owner;/** @override */klass.prototype.__hostProps = templateInfo.hostProps; klass =/** @type {function(new:TemplateInstanceBase)} */klass;//eslint-disable-line no-self-assign
          return klass;
        } function warnOnUndeclaredProperties(templateInfo, options, methodHost) {
          var declaredProps = methodHost.constructor._properties; var propertyEffects = templateInfo.propertyEffects; var instanceProps = options.instanceProps; for (var prop in propertyEffects) {// Ensure properties with template effects are declared on the outermost
            // host (`methodHost`), unless they are instance props or static functions
            if (!declaredProps[prop] && !(instanceProps && instanceProps[prop])) { var effects = propertyEffects[prop]; for (var _i80 = 0; _i80 < effects.length; _i80++) { var part = effects[_i80].info.part; if (!(part.signature && part.signature.static)) { console.warn("Property '".concat(prop, "' used in template but not ") + "declared in 'properties'; attribute will not be observed."); break; } } }
          }
        }/**
     * Returns the template "model" associated with a given element, which
     * serves as the binding scope for the template instance the element is
     * contained in. A template model is an instance of
     * `TemplateInstanceBase`, and should be used to manipulate data
     * associated with this template instance.
     *
     * Example:
     *
     *   let model = modelForElement(el);
     *   if (model.index < 10) {
     *     model.set('item.checked', true);
     *   }
     *
     * @param {HTMLElement} template The model will be returned for
     *   elements stamped from this template (accepts either an HTMLTemplateElement)
     *   or a `<dom-if>`/`<dom-repeat>` element when using `removeNestedTemplates`
     *   optimization.
     * @param {Node=} node Node for which to return a template model.
     * @return {TemplateInstanceBase} Template instance representing the
     *   binding scope for the element
     */function _modelForElement(template, node) {
          var model; while (node) {// An element with a __templatizeInstance marks the top boundary
            // of a scope; walk up until we find one, and then ensure that
            // its __dataHost matches `this`, meaning this dom-repeat stamped it
            if (model = node.__dataHost ? node : node.__templatizeInstance) {// Found an element stamped by another template; keep walking up
              // from its __dataHost
              if (model.__dataHost != template) { node = model.__dataHost; } else { return model; }
            } else {// Still in a template scope, keep going up until
              // a __templatizeInstance is found
              node = wrap(node).parentNode;
            }
          } return null;
        }/**
     * @typedef {{
     *   _templatizerTemplate: HTMLTemplateElement,
     *   _parentModel: boolean,
     *   _instanceProps: Object,
     *   _forwardHostPropV2: Function,
     *   _notifyInstancePropV2: Function,
     *   ctor: function(new:TemplateInstanceBase, Object=)
     * }}
     */var TemplatizerUser;// eslint-disable-line
  /**
   * The `Templatizer` behavior adds methods to generate instances of
   * templates that are each managed by an anonymous `PropertyEffects`
   * instance where data-bindings in the stamped template content are bound to
   * accessors on itself.
   *
   * This behavior is provided in Polymer 2.x-3.x as a hybrid-element convenience
   * only.  For non-hybrid usage, the `Templatize` library
   * should be used instead.
   *
   * Example:
   *
   *     import {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';
   *     // Get a template from somewhere, e.g. light DOM
   *     let template = this.querySelector('template');
   *     // Prepare the template
   *     this.templatize(template);
   *     // Instance the template with an initial data model
   *     let instance = this.stamp({myProp: 'initial'});
   *     // Insert the instance's DOM somewhere, e.g. light DOM
   *     dom(this).appendChild(instance.root);
   *     // Changing a property on the instance will propagate to bindings
   *     // in the template
   *     instance.myProp = 'new value';
   *
   * Users of `Templatizer` may need to implement the following abstract
   * API's to determine how properties and paths from the host should be
   * forwarded into to instances:
   *
   *     _forwardHostPropV2: function(prop, value)
   *
   * Likewise, users may implement these additional abstract API's to determine
   * how instance-specific properties that change on the instance should be
   * forwarded out to the host, if necessary.
   *
   *     _notifyInstancePropV2: function(inst, prop, value)
   *
   * In order to determine which properties are instance-specific and require
   * custom notification via `_notifyInstanceProp`, define an `_instanceProps`
   * object containing keys for each instance prop, for example:
   *
   *     _instanceProps: {
   *       item: true,
   *       index: true
   *     }
   *
   * Any properties used in the template that are not defined in _instanceProp
   * will be forwarded out to the Templatize `owner` automatically.
   *
   * Users may also implement the following abstract function to show or
   * hide any DOM generated using `stamp`:
   *
   *     _showHideChildren: function(shouldHide)
   *
   * Note that some callbacks are suffixed with `V2` in the Polymer 2.x behavior
   * as the implementations will need to differ from the callbacks required
   * by the 1.x Templatizer API due to changes in the `TemplateInstance` API
   * between versions 1.x and 2.x.
   *
   * @polymerBehavior
   */var Templatizer = {/**
     * Generates an anonymous `TemplateInstance` class (stored as `this.ctor`)
     * for the provided template.  This method should be called once per
     * template to prepare an element for stamping the template, followed
     * by `stamp` to create new instances of the template.
     *
     * @param {!HTMLTemplateElement} template Template to prepare
     * @param {boolean=} mutableData When `true`, the generated class will skip
     *   strict dirty-checking for objects and arrays (always consider them to
     *   be "dirty"). Defaults to false.
     * @return {void}
     * @this {TemplatizerUser}
     */templatize: function templatize(template, mutableData) { this._templatizerTemplate = template; this.ctor = _templatize(template,/** @type {!Polymer_PropertyEffects} */this, { mutableData: Boolean(mutableData), parentModel: this._parentModel, instanceProps: this._instanceProps, forwardHostProp: this._forwardHostPropV2, notifyInstanceProp: this._notifyInstancePropV2 }); },/**
     * Creates an instance of the template prepared by `templatize`.  The object
     * returned is an instance of the anonymous class generated by `templatize`
     * whose `root` property is a document fragment containing newly cloned
     * template content, and which has property accessors corresponding to
     * properties referenced in template bindings.
     *
     * @param {Object=} model Object containing initial property values to
     *   populate into the template bindings.
     * @return {TemplateInstanceBase} Returns the created instance of
     * the template prepared by `templatize`.
     * @this {TemplatizerUser}
     */stamp: function stamp(model) { return new this.ctor(model); },/**
     * Returns the template "model" (`TemplateInstance`) associated with
     * a given element, which serves as the binding scope for the template
     * instance the element is contained in.  A template model should be used
     * to manipulate data associated with this template instance.
     *
     * @param {HTMLElement} el Element for which to return a template model.
     * @return {TemplateInstanceBase} Model representing the binding scope for
     *   the element.
     * @this {TemplatizerUser}
     */modelForElement: function modelForElement(el) { return _modelForElement(this._templatizerTemplate, el); }
        }; var elementsHidden = false;/**
                               * @return {boolean} True if elements will be hidden globally
                               */function hideElementsGlobally() { if (legacyOptimizations && !useShadow) { if (!elementsHidden) { elementsHidden = true; var _style7 = document.createElement('style'); _style7.textContent = 'dom-bind,dom-if,dom-repeat{display:none;}'; document.head.appendChild(_style7); } return true; } return false; } var domBindBase = GestureEventListeners(OptionalMutableData(PropertyEffects(HTMLElement)));/**
                                                                                                 * Custom element to allow using Polymer's template features (data binding,
                                                                                                 * declarative event listeners, etc.) in the main document without defining
                                                                                                 * a new custom element.
                                                                                                 *
                                                                                                 * `<template>` tags utilizing bindings may be wrapped with the `<dom-bind>`
                                                                                                 * element, which will immediately stamp the wrapped template into the main
                                                                                                 * document and bind elements to the `dom-bind` element itself as the
                                                                                                 * binding scope.
                                                                                                 *
                                                                                                 * @polymer
                                                                                                 * @customElement
                                                                                                 * @appliesMixin PropertyEffects
                                                                                                 * @appliesMixin OptionalMutableData
                                                                                                 * @appliesMixin GestureEventListeners
                                                                                                 * @extends {domBindBase}
                                                                                                 * @summary Custom element to allow using Polymer's template features (data
                                                                                                 *   binding, declarative event listeners, etc.) in the main document.
                                                                                                 */var DomBind =/*#__PURE__*/function (_domBindBase) {
          babelHelpers.inherits(DomBind, _domBindBase); babelHelpers.createClass(DomBind, null, [{ key: "observedAttributes", get: function get() { return ['mutable-data']; } }]); function DomBind() { var _this22; babelHelpers.classCallCheck(this, DomBind); _this22 = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(DomBind).call(this)); if (strictTemplatePolicy) { throw new Error("strictTemplatePolicy: dom-bind not allowed"); } _this22.root = null; _this22.$ = null; _this22.__children = null; return _this22; }/* eslint-disable no-unused-vars */ /**
                                           * @override
                                           * @param {string} name Name of attribute that changed
                                           * @param {?string} old Old attribute value
                                           * @param {?string} value New attribute value
                                           * @param {?string} namespace Attribute namespace.
                                           * @return {void}
                                           */babelHelpers.createClass(DomBind, [{
            key: "attributeChangedCallback", value: function attributeChangedCallback(name, old, value, namespace) {// assumes only one observed attribute
              this.mutableData = true;
            }/**
       * @override
       * @return {void}
       */}, {
            key: "connectedCallback", value: function connectedCallback() { if (!hideElementsGlobally()) { this.style.display = 'none'; } this.render(); }/**
       * @override
       * @return {void}
       */}, { key: "disconnectedCallback", value: function disconnectedCallback() { this.__removeChildren(); } }, { key: "__insertChildren", value: function __insertChildren() { wrap(wrap(this).parentNode).insertBefore(this.root, this); } }, {
            key: "__removeChildren", value: function __removeChildren() { if (this.__children) { for (var _i81 = 0; _i81 < this.__children.length; _i81++) { this.root.appendChild(this.__children[_i81]); } } }/**
       * Forces the element to render its content. This is typically only
       * necessary to call if HTMLImports with the async attribute are used.
       * @return {void}
       */}, {
            key: "render", value: function render() {
              var _this23 = this; var template; if (!this.__children) {
                template =/** @type {?HTMLTemplateElement} */template || this.querySelector('template'); if (!template) {// Wait until childList changes and template should be there by then
                  var _observer = new MutationObserver(function () { template =/** @type {HTMLTemplateElement} */_this23.querySelector('template'); if (template) { _observer.disconnect(); _this23.render(); } else { throw new Error('dom-bind requires a <template> child'); } }); _observer.observe(this, { childList: true }); return;
                } this.root = this._stampTemplate(/** @type {!HTMLTemplateElement} */template); this.$ = this.root.$; this.__children = []; for (var n = this.root.firstChild; n; n = n.nextSibling) { this.__children[this.__children.length] = n; } this._enableProperties();
              } this.__insertChildren(); this.dispatchEvent(new CustomEvent('dom-change', { bubbles: true, composed: true }));
            }
          }]); return DomBind;
        }(domBindBase); customElements.define('dom-bind', DomBind); var domRepeatBase = OptionalMutableData(PolymerElement);/**
                                                              * The `<dom-repeat>` element will automatically stamp and binds one instance
                                                              * of template content to each object in a user-provided array.
                                                              * `dom-repeat` accepts an `items` property, and one instance of the template
                                                              * is stamped for each item into the DOM at the location of the `dom-repeat`
                                                              * element.  The `item` property will be set on each instance's binding
                                                              * scope, thus templates should bind to sub-properties of `item`.
                                                              *
                                                              * Example:
                                                              *
                                                              * ```html
                                                              * <dom-module id="employee-list">
                                                              *
                                                              *   <template>
                                                              *
                                                              *     <div> Employee list: </div>
                                                              *     <dom-repeat items="{{employees}}">
                                                              *       <template>
                                                              *         <div>First name: <span>{{item.first}}</span></div>
                                                              *         <div>Last name: <span>{{item.last}}</span></div>
                                                              *       </template>
                                                              *     </dom-repeat>
                                                              *
                                                              *   </template>
                                                              *
                                                              * </dom-module>
                                                              * ```
                                                              *
                                                              * With the following custom element definition:
                                                              *
                                                              * ```js
                                                              * class EmployeeList extends PolymerElement {
                                                              *   static get is() { return 'employee-list'; }
                                                              *   static get properties() {
                                                              *     return {
                                                              *       employees: {
                                                              *         value() {
                                                              *           return [
                                                              *             {first: 'Bob', last: 'Smith'},
                                                              *             {first: 'Sally', last: 'Johnson'},
                                                              *             ...
                                                              *           ];
                                                              *         }
                                                              *       }
                                                              *     };
                                                              *   }
                                                              * }
                                                              * ```
                                                              *
                                                              * Notifications for changes to items sub-properties will be forwarded to template
                                                              * instances, which will update via the normal structured data notification system.
                                                              *
                                                              * Mutations to the `items` array itself should be made using the Array
                                                              * mutation API's on the PropertyEffects mixin (`push`, `pop`, `splice`,
                                                              * `shift`, `unshift`), and template instances will be kept in sync with the
                                                              * data in the array.
                                                              *
                                                              * Events caught by event handlers within the `dom-repeat` template will be
                                                              * decorated with a `model` property, which represents the binding scope for
                                                              * each template instance.  The model should be used to manipulate data on the
                                                              * instance, for example `event.model.set('item.checked', true);`.
                                                              *
                                                              * Alternatively, the model for a template instance for an element stamped by
                                                              * a `dom-repeat` can be obtained using the `modelForElement` API on the
                                                              * `dom-repeat` that stamped it, for example
                                                              * `this.$.domRepeat.modelForElement(event.target).set('item.checked', true);`.
                                                              * This may be useful for manipulating instance data of event targets obtained
                                                              * by event handlers on parents of the `dom-repeat` (event delegation).
                                                              *
                                                              * A view-specific filter/sort may be applied to each `dom-repeat` by supplying a
                                                              * `filter` and/or `sort` property.  This may be a string that names a function on
                                                              * the host, or a function may be assigned to the property directly.  The functions
                                                              * should implemented following the standard `Array` filter/sort API.
                                                              *
                                                              * In order to re-run the filter or sort functions based on changes to sub-fields
                                                              * of `items`, the `observe` property may be set as a space-separated list of
                                                              * `item` sub-fields that should cause a re-filter/sort when modified.  If
                                                              * the filter or sort function depends on properties not contained in `items`,
                                                              * the user should observe changes to those properties and call `render` to update
                                                              * the view based on the dependency change.
                                                              *
                                                              * For example, for an `dom-repeat` with a filter of the following:
                                                              *
                                                              * ```js
                                                              * isEngineer(item) {
                                                              *   return item.type == 'engineer' || item.manager.type == 'engineer';
                                                              * }
                                                              * ```
                                                              *
                                                              * Then the `observe` property should be configured as follows:
                                                              *
                                                              * ```html
                                                              * <dom-repeat items="{{employees}}" filter="isEngineer" observe="type manager.type">
                                                              * ```
                                                              *
                                                              * @customElement
                                                              * @polymer
                                                              * @extends {domRepeatBase}
                                                              * @appliesMixin OptionalMutableData
                                                              * @summary Custom element for stamping instance of a template bound to
                                                              *   items in an array.
                                                              */var DomRepeat =/*#__PURE__*/function (_domRepeatBase) {
          babelHelpers.inherits(DomRepeat, _domRepeatBase); babelHelpers.createClass(DomRepeat, null, [{
            key: "is",// Not needed to find template; can be removed once the analyzer
            // can find the tag name from customElements.define call
            get: function get() { return 'dom-repeat'; }
          }, { key: "template", get: function get() { return null; } }, {
            key: "properties", get: function get() {/**
       * Fired whenever DOM is added or removed by this template (by
       * default, rendering occurs lazily).  To force immediate rendering, call
       * `render`.
       *
       * @event dom-change
       */return {/**
         * An array containing items determining how many instances of the template
         * to stamp and that that each template instance should bind to.
         */items: { type: Array },/**
         * The name of the variable to add to the binding scope for the array
         * element associated with a given template instance.
         */as: { type: String, value: 'item' },/**
         * The name of the variable to add to the binding scope with the index
         * of the instance in the sorted and filtered list of rendered items.
         * Note, for the index in the `this.items` array, use the value of the
         * `itemsIndexAs` property.
         */indexAs: { type: String, value: 'index' },/**
         * The name of the variable to add to the binding scope with the index
         * of the instance in the `this.items` array. Note, for the index of
         * this instance in the sorted and filtered list of rendered items,
         * use the value of the `indexAs` property.
         */itemsIndexAs: { type: String, value: 'itemsIndex' },/**
         * A function that should determine the sort order of the items.  This
         * property should either be provided as a string, indicating a method
         * name on the element's host, or else be an actual function.  The
         * function should match the sort function passed to `Array.sort`.
         * Using a sort function has no effect on the underlying `items` array.
         */sort: { type: Function, observer: '__sortChanged' },/**
         * A function that can be used to filter items out of the view.  This
         * property should either be provided as a string, indicating a method
         * name on the element's host, or else be an actual function.  The
         * function should match the sort function passed to `Array.filter`.
         * Using a filter function has no effect on the underlying `items` array.
         */filter: { type: Function, observer: '__filterChanged' },/**
         * When using a `filter` or `sort` function, the `observe` property
         * should be set to a space-separated list of the names of item
         * sub-fields that should trigger a re-sort or re-filter when changed.
         * These should generally be fields of `item` that the sort or filter
         * function depends on.
         */observe: { type: String, observer: '__observeChanged' },/**
         * When using a `filter` or `sort` function, the `delay` property
         * determines a debounce time in ms after a change to observed item
         * properties that must pass before the filter or sort is re-run.
         * This is useful in rate-limiting shuffling of the view when
         * item changes may be frequent.
         */delay: Number,/**
         * Count of currently rendered items after `filter` (if any) has been applied.
         * If "chunking mode" is enabled, `renderedItemCount` is updated each time a
         * set of template instances is rendered.
         *
         */renderedItemCount: { type: Number, notify: !suppressTemplateNotifications, readOnly: true },/**
         * When greater than zero, defines an initial count of template instances
         * to render after setting the `items` array, before the next paint, and
         * puts the `dom-repeat` into "chunking mode".  The remaining items (and
         * any future items as a result of pushing onto the array) will be created
         * and rendered incrementally at each animation frame thereof until all
         * instances have been rendered.
         */initialCount: { type: Number },/**
         * When `initialCount` is used, this property defines a frame rate (in
         * fps) to target by throttling the number of instances rendered each
         * frame to not exceed the budget for the target frame rate.  The
         * framerate is effectively the number of `requestAnimationFrame`s that
         * it tries to allow to actually fire in a given second. It does this
         * by measuring the time between `rAF`s and continuously adjusting the
         * number of items created each `rAF` to maintain the target framerate.
         * Setting this to a higher number allows lower latency and higher
         * throughput for event handlers and other tasks, but results in a
         * longer time for the remaining items to complete rendering.
         */targetFramerate: { type: Number, value: 20 }, _targetFrameTime: { type: Number, computed: '__computeFrameTime(targetFramerate)' },/**
         * When the global `suppressTemplateNotifications` setting is used, setting
         * `notifyDomChange: true` will enable firing `dom-change` events on this
         * element.
         */notifyDomChange: { type: Boolean },/**
         * When chunking is enabled via `initialCount` and the `items` array is
         * set to a new array, this flag controls whether the previously rendered
         * instances are reused or not.
         *
         * When `true`, any previously rendered template instances are updated in
         * place to their new item values synchronously in one shot, and then any
         * further items (if any) are chunked out.  When `false`, the list is
         * returned back to its `initialCount` (any instances over the initial
         * count are discarded) and the remainder of the list is chunked back in.
         * Set this to `true` to avoid re-creating the list and losing scroll
         * position, although note that when changing the list to completely
         * different data the render thread will be blocked until all existing
         * instances are updated to their new data.
         */reuseChunkedInstances: { type: Boolean }
              };
            }
          }, { key: "observers", get: function get() { return ['__itemsChanged(items.*)']; } }]); function DomRepeat() { var _this24; babelHelpers.classCallCheck(this, DomRepeat); _this24 = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(DomRepeat).call(this)); _this24.__instances = []; _this24.__renderDebouncer = null; _this24.__itemsIdxToInstIdx = {}; _this24.__chunkCount = null; _this24.__renderStartTime = null; _this24.__itemsArrayChanged = false; _this24.__shouldMeasureChunk = false; _this24.__shouldContinueChunking = false; _this24.__chunkingId = 0; _this24.__sortFn = null; _this24.__filterFn = null; _this24.__observePaths = null;/** @type {?function(new:TemplateInstanceBase, Object=)} */_this24.__ctor = null; _this24.__isDetached = true; _this24.template = null;/** @type {TemplateInfo} */_this24._templateInfo; return _this24; }/**
       * @override
       * @return {void}
       */babelHelpers.createClass(DomRepeat, [{
            key: "disconnectedCallback", value: function disconnectedCallback() { babelHelpers.get(babelHelpers.getPrototypeOf(DomRepeat.prototype), "disconnectedCallback", this).call(this); this.__isDetached = true; for (var _i82 = 0; _i82 < this.__instances.length; _i82++) { this.__detachInstance(_i82); } }/**
       * @override
       * @return {void}
       */}, {
            key: "connectedCallback", value: function connectedCallback() {
              babelHelpers.get(babelHelpers.getPrototypeOf(DomRepeat.prototype), "connectedCallback", this).call(this); if (!hideElementsGlobally()) { this.style.display = 'none'; }// only perform attachment if the element was previously detached.
              if (this.__isDetached) { this.__isDetached = false; var wrappedParent = wrap(wrap(this).parentNode); for (var _i83 = 0; _i83 < this.__instances.length; _i83++) { this.__attachInstance(_i83, wrappedParent); } }
            }
          }, {
            key: "__ensureTemplatized", value: function __ensureTemplatized() {
              var _this25 = this;// Templatizing (generating the instance constructor) needs to wait
              // until ready, since won't have its template content handed back to
              // it until then
              if (!this.__ctor) {// When `removeNestedTemplates` is true, the "template" is the element
                // itself, which has been given a `_templateInfo` property
                var thisAsTemplate =/** @type {!HTMLTemplateElement} */ /** @type {!HTMLElement} */this; var _template3 = this.template = thisAsTemplate._templateInfo ? thisAsTemplate :/** @type {!HTMLTemplateElement} */this.querySelector('template'); if (!_template3) {// Wait until childList changes and template should be there by then
                  var _observer2 = new MutationObserver(function () { if (_this25.querySelector('template')) { _observer2.disconnect(); _this25.__render(); } else { throw new Error('dom-repeat requires a <template> child'); } }); _observer2.observe(this, { childList: true }); return false;
                }// Template instance props that should be excluded from forwarding
                var instanceProps = {}; instanceProps[this.as] = true; instanceProps[this.indexAs] = true; instanceProps[this.itemsIndexAs] = true; this.__ctor = _templatize(_template3, this, {
                  mutableData: this.mutableData, parentModel: true, instanceProps: instanceProps,/**
           * @this {DomRepeat}
           * @param {string} prop Property to set
           * @param {*} value Value to set property to
           */forwardHostProp: function forwardHostProp(prop, value) { var i$ = this.__instances; for (var _i84 = 0, inst; _i84 < i$.length && (inst = i$[_i84]); _i84++) { inst.forwardHostProp(prop, value); } },/**
           * @this {DomRepeat}
           * @param {Object} inst Instance to notify
           * @param {string} prop Property to notify
           * @param {*} value Value to notify
           */notifyInstanceProp: function notifyInstanceProp(inst, prop, value) { if (matches(this.as, prop)) { var idx = inst[this.itemsIndexAs]; if (prop == this.as) { this.items[idx] = value; } var path = translate(this.as, "".concat(JSCompiler_renameProperty('items', this), ".").concat(idx), prop); this.notifyPath(path, value); } }
                });
              } return true;
            }
          }, {
            key: "__getMethodHost", value: function __getMethodHost() {// Technically this should be the owner of the outermost template.
              // In shadow dom, this is always getRootNode().host, but we can
              // approximate this via cooperation with our dataHost always setting
              // `_methodHost` as long as there were bindings (or id's) on this
              // instance causing it to get a dataHost.
              return this.__dataHost._methodHost || this.__dataHost;
            }
          }, { key: "__functionFromPropertyValue", value: function __functionFromPropertyValue(functionOrMethodName) { if (typeof functionOrMethodName === 'string') { var methodName = functionOrMethodName; var obj = this.__getMethodHost(); return function () { return obj[methodName].apply(obj, arguments); }; } return functionOrMethodName; } }, { key: "__sortChanged", value: function __sortChanged(sort) { this.__sortFn = this.__functionFromPropertyValue(sort); if (this.items) { this.__debounceRender(this.__render); } } }, { key: "__filterChanged", value: function __filterChanged(filter) { this.__filterFn = this.__functionFromPropertyValue(filter); if (this.items) { this.__debounceRender(this.__render); } } }, { key: "__computeFrameTime", value: function __computeFrameTime(rate) { return Math.ceil(1000 / rate); } }, { key: "__observeChanged", value: function __observeChanged() { this.__observePaths = this.observe && this.observe.replace('.*', '.').split(' '); } }, {
            key: "__handleObservedPaths", value: function __handleObservedPaths(path) {// Handle cases where path changes should cause a re-sort/filter
              if (this.__sortFn || this.__filterFn) {
                if (!path) {// Always re-render if the item itself changed
                  this.__debounceRender(this.__render, this.delay);
                } else if (this.__observePaths) {// Otherwise, re-render if the path changed matches an observed path
                  var paths = this.__observePaths; for (var _i85 = 0; _i85 < paths.length; _i85++) { if (path.indexOf(paths[_i85]) === 0) { this.__debounceRender(this.__render, this.delay); } }
                }
              }
            }
          }, {
            key: "__itemsChanged", value: function __itemsChanged(change) {
              if (this.items && !Array.isArray(this.items)) { console.warn('dom-repeat expected array for `items`, found', this.items); }// If path was to an item (e.g. 'items.3' or 'items.3.foo'), forward the
              // path to that instance synchronously (returns false for non-item paths)
              if (!this.__handleItemPath(change.path, change.value)) {// Otherwise, the array was reset ('items') or spliced ('items.splices'),
                // so queue a render.  Restart chunking when the items changed (for
                // backward compatibility), unless `reuseChunkedInstances` option is set
                if (change.path === 'items') { this.__itemsArrayChanged = true; } this.__debounceRender(this.__render);
              }
            }/**
       * @param {function(this:DomRepeat)} fn Function to debounce.
       * @param {number=} delay Delay in ms to debounce by.
       */}, {
            key: "__debounceRender", value: function __debounceRender(fn) { var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0; this.__renderDebouncer = Debouncer.debounce(this.__renderDebouncer, delay > 0 ? timeOut.after(delay) : microTask, fn.bind(this)); enqueueDebouncer(this.__renderDebouncer); }/**
       * Forces the element to render its content. Normally rendering is
       * asynchronous to a provoking change. This is done for efficiency so
       * that multiple changes trigger only a single render. The render method
       * should be called if, for example, template rendering is required to
       * validate application state.
       * @return {void}
       */}, {
            key: "render", value: function render() {// Queue this repeater, then flush all in order
              this.__debounceRender(this.__render); flush$1();
            }
          }, {
            key: "__render", value: function __render() {
              var _this26 = this; if (!this.__ensureTemplatized()) {// No template found yet
                return;
              } var items = this.items || [];// Sort and filter the items into a mapping array from instance->item
              var isntIdxToItemsIdx = this.__sortAndFilterItems(items);// If we're chunking, increase the limit if there are new instances to
              // create and schedule the next chunk
              var limit = this.__calculateLimit(isntIdxToItemsIdx.length);// Create, update, and/or remove instances
              this.__updateInstances(items, limit, isntIdxToItemsIdx);// If we're chunking, schedule a rAF task to measure/continue chunking.     
              // Do this before any notifying events (renderedItemCount & dom-change)
              // since those could modify items and enqueue a new full render which will
              // pre-empt this measurement.
              if (this.initialCount && (this.__shouldMeasureChunk || this.__shouldContinueChunking)) { cancelAnimationFrame(this.__chunkingId); this.__chunkingId = requestAnimationFrame(function () { return _this26.__continueChunking(); }); }// Set rendered item count
              this._setRenderedItemCount(this.__instances.length);// Notify users
              if (!suppressTemplateNotifications || this.notifyDomChange) { this.dispatchEvent(new CustomEvent('dom-change', { bubbles: true, composed: true })); }
            }
          }, {
            key: "__sortAndFilterItems", value: function __sortAndFilterItems(items) {
              var _this27 = this;// Generate array maping the instance index to the items array index
              var isntIdxToItemsIdx = new Array(items.length); for (var _i86 = 0; _i86 < items.length; _i86++) { isntIdxToItemsIdx[_i86] = _i86; }// Apply user filter
              if (this.__filterFn) { isntIdxToItemsIdx = isntIdxToItemsIdx.filter(function (i, idx, array) { return _this27.__filterFn(items[i], idx, array); }); }// Apply user sort
              if (this.__sortFn) { isntIdxToItemsIdx.sort(function (a, b) { return _this27.__sortFn(items[a], items[b]); }); } return isntIdxToItemsIdx;
            }
          }, {
            key: "__calculateLimit", value: function __calculateLimit(filteredItemCount) {
              var limit = filteredItemCount; var currentCount = this.__instances.length;// When chunking, we increase the limit from the currently rendered count
              // by the chunk count that is re-calculated after each rAF (with special
              // cases for reseting the limit to initialCount after changing items)
              if (this.initialCount) {
                var newCount; if (!this.__chunkCount || this.__itemsArrayChanged && !this.reuseChunkedInstances) {// Limit next render to the initial count
                  limit = Math.min(filteredItemCount, this.initialCount);// Subtract off any existing instances to determine the number of
                  // instances that will be created
                  newCount = Math.max(limit - currentCount, 0);// Initialize the chunk size with how many items we're creating
                  this.__chunkCount = newCount || 1;
                } else {// The number of new instances that will be created is based on the
                  // existing instances, the new list size, and the chunk size
                  newCount = Math.min(Math.max(filteredItemCount - currentCount, 0), this.__chunkCount);// Update the limit based on how many new items we're making, limited
                  // buy the total size of the list
                  limit = Math.min(currentCount + newCount, filteredItemCount);
                }// Record some state about chunking for use in `__continueChunking`
                this.__shouldMeasureChunk = newCount === this.__chunkCount; this.__shouldContinueChunking = limit < filteredItemCount; this.__renderStartTime = performance.now();
              } this.__itemsArrayChanged = false; return limit;
            }
          }, {
            key: "__continueChunking", value: function __continueChunking() {// Simple auto chunkSize throttling algorithm based on feedback loop:
              // measure actual time between frames and scale chunk count by ratio of
              // target/actual frame time.  Only modify chunk size if our measurement
              // reflects the cost of a creating a full chunk's worth of instances; this
              // avoids scaling up the chunk size if we e.g. quickly re-rendered instances
              // in place
              if (this.__shouldMeasureChunk) { var renderTime = performance.now() - this.__renderStartTime; var ratio = this._targetFrameTime / renderTime; this.__chunkCount = Math.round(this.__chunkCount * ratio) || 1; }// Enqueue a new render if we haven't reached the full size of the list
              if (this.__shouldContinueChunking) { this.__debounceRender(this.__render); }
            }
          }, {
            key: "__updateInstances", value: function __updateInstances(items, limit, isntIdxToItemsIdx) {// items->inst map kept for item path forwarding
              var itemsIdxToInstIdx = this.__itemsIdxToInstIdx = {}; var instIdx;// Generate instances and assign items
              for (instIdx = 0; instIdx < limit; instIdx++) { var inst = this.__instances[instIdx]; var itemIdx = isntIdxToItemsIdx[instIdx]; var item = items[itemIdx]; itemsIdxToInstIdx[itemIdx] = instIdx; if (inst) { inst._setPendingProperty(this.as, item); inst._setPendingProperty(this.indexAs, instIdx); inst._setPendingProperty(this.itemsIndexAs, itemIdx); inst._flushProperties(); } else { this.__insertInstance(item, instIdx, itemIdx); } }// Remove any extra instances from previous state
              for (var _i87 = this.__instances.length - 1; _i87 >= instIdx; _i87--) { this.__detachAndRemoveInstance(_i87); }
            }
          }, { key: "__detachInstance", value: function __detachInstance(idx) { var inst = this.__instances[idx]; var wrappedRoot = wrap(inst.root); for (var _i88 = 0; _i88 < inst.children.length; _i88++) { var el = inst.children[_i88]; wrappedRoot.appendChild(el); } return inst; } }, {
            key: "__attachInstance", value: function __attachInstance(idx, parent) {
              var inst = this.__instances[idx];// Note, this is pre-wrapped as an optimization
              parent.insertBefore(inst.root, this);
            }
          }, { key: "__detachAndRemoveInstance", value: function __detachAndRemoveInstance(idx) { this.__detachInstance(idx); this.__instances.splice(idx, 1); } }, { key: "__stampInstance", value: function __stampInstance(item, instIdx, itemIdx) { var model = {}; model[this.as] = item; model[this.indexAs] = instIdx; model[this.itemsIndexAs] = itemIdx; return new this.__ctor(model); } }, {
            key: "__insertInstance", value: function __insertInstance(item, instIdx, itemIdx) { var inst = this.__stampInstance(item, instIdx, itemIdx); var beforeRow = this.__instances[instIdx + 1]; var beforeNode = beforeRow ? beforeRow.children[0] : this; wrap(wrap(this).parentNode).insertBefore(inst.root, beforeNode); this.__instances[instIdx] = inst; return inst; }// Implements extension point from Templatize mixin
  /**
     * Shows or hides the template instance top level child elements. For
     * text nodes, `textContent` is removed while "hidden" and replaced when
     * "shown."
     * @param {boolean} hidden Set to true to hide the children;
     * set to false to show them.
     * @return {void}
     * @protected
     */}, {
            key: "_showHideChildren", value: function _showHideChildren(hidden) { for (var _i89 = 0; _i89 < this.__instances.length; _i89++) { this.__instances[_i89]._showHideChildren(hidden); } }// Called as a side effect of a host items.<key>.<path> path change,
            // responsible for notifying item.<path> changes to inst for key
          }, {
            key: "__handleItemPath", value: function __handleItemPath(path, value) {
              var itemsPath = path.slice(6);// 'items.'.length == 6
              var dot = itemsPath.indexOf('.'); var itemsIdx = dot < 0 ? itemsPath : itemsPath.substring(0, dot);// If path was index into array...
              if (itemsIdx == parseInt(itemsIdx, 10)) {
                var itemSubPath = dot < 0 ? '' : itemsPath.substring(dot + 1);// If the path is observed, it will trigger a full refresh
                this.__handleObservedPaths(itemSubPath);// Note, even if a rull refresh is triggered, always do the path
                // notification because unless mutableData is used for dom-repeat
                // and all elements in the instance subtree, a full refresh may
                // not trigger the proper update.
                var instIdx = this.__itemsIdxToInstIdx[itemsIdx]; var inst = this.__instances[instIdx]; if (inst) {
                  var itemPath = this.as + (itemSubPath ? '.' + itemSubPath : '');// This is effectively `notifyPath`, but avoids some of the overhead
                  // of the public API
                  inst._setPendingPropertyOrPath(itemPath, value, false, true); inst._flushProperties();
                } return true;
              }
            }/**
       * Returns the item associated with a given element stamped by
       * this `dom-repeat`.
       *
       * Note, to modify sub-properties of the item,
       * `modelForElement(el).set('item.<sub-prop>', value)`
       * should be used.
       *
       * @param {!HTMLElement} el Element for which to return the item.
       * @return {*} Item associated with the element.
       */}, {
            key: "itemForElement", value: function itemForElement(el) { var instance = this.modelForElement(el); return instance && instance[this.as]; }/**
       * Returns the inst index for a given element stamped by this `dom-repeat`.
       * If `sort` is provided, the index will reflect the sorted order (rather
       * than the original array order).
       *
       * @param {!HTMLElement} el Element for which to return the index.
       * @return {?number} Row index associated with the element (note this may
       *   not correspond to the array index if a user `sort` is applied).
       */}, {
            key: "indexForElement", value: function indexForElement(el) { var instance = this.modelForElement(el); return instance && instance[this.indexAs]; }/**
       * Returns the template "model" associated with a given element, which
       * serves as the binding scope for the template instance the element is
       * contained in. A template model
       * should be used to manipulate data associated with this template instance.
       *
       * Example:
       *
       *   let model = modelForElement(el);
       *   if (model.index < 10) {
       *     model.set('item.checked', true);
       *   }
       *
       * @param {!HTMLElement} el Element for which to return a template model.
       * @return {TemplateInstanceBase} Model representing the binding scope for
       *   the element.
       */}, { key: "modelForElement", value: function modelForElement(el) { return _modelForElement(this.template, el); } }]); return DomRepeat;
        }(domRepeatBase); customElements.define(DomRepeat.is, DomRepeat); var DomIfBase =/*#__PURE__*/function (_PolymerElement) {
          babelHelpers.inherits(DomIfBase, _PolymerElement); babelHelpers.createClass(DomIfBase, null, [{
            key: "is",// Not needed to find template; can be removed once the analyzer
            // can find the tag name from customElements.define call
            get: function get() { return 'dom-if'; }
          }, { key: "template", get: function get() { return null; } }, {
            key: "properties", get: function get() {
              return {/**
         * Fired whenever DOM is added or removed/hidden by this template (by
         * default, rendering occurs lazily).  To force immediate rendering, call
         * `render`.
         *
         * @event dom-change
         */ /**
             * A boolean indicating whether this template should stamp.
             */if: { type: Boolean, observer: '__debounceRender' },/**
         * When true, elements will be removed from DOM and discarded when `if`
         * becomes false and re-created and added back to the DOM when `if`
         * becomes true.  By default, stamped elements will be hidden but left
         * in the DOM when `if` becomes false, which is generally results
         * in better performance.
         */restamp: { type: Boolean, observer: '__debounceRender' },/**
         * When the global `suppressTemplateNotifications` setting is used, setting
         * `notifyDomChange: true` will enable firing `dom-change` events on this
         * element.
         */notifyDomChange: { type: Boolean }
              };
            }
          }]); function DomIfBase() { var _this28; babelHelpers.classCallCheck(this, DomIfBase); _this28 = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(DomIfBase).call(this)); _this28.__renderDebouncer = null; _this28._lastIf = false; _this28.__hideTemplateChildren__ = false;/** @type {!HTMLTemplateElement|undefined} */_this28.__template;/** @type {!TemplateInfo|undefined} */_this28._templateInfo; return _this28; } babelHelpers.createClass(DomIfBase, [{
            key: "__debounceRender", value: function __debounceRender() {
              var _this29 = this;// Render is async for 2 reasons:
              // 1. To eliminate dom creation trashing if user code thrashes `if` in the
              //    same turn. This was more common in 1.x where a compound computed
              //    property could result in the result changing multiple times, but is
              //    mitigated to a large extent by batched property processing in 2.x.
              // 2. To avoid double object propagation when a bag including values bound
              //    to the `if` property as well as one or more hostProps could enqueue
              //    the <dom-if> to flush before the <template>'s host property
              //    forwarding. In that scenario creating an instance would result in
              //    the host props being set once, and then the enqueued changes on the
              //    template would set properties a second time, potentially causing an
              //    object to be set to an instance more than once.  Creating the
              //    instance async from flushing data ensures this doesn't happen. If
              //    we wanted a sync option in the future, simply having <dom-if> flush
              //    (or clear) its template's pending host properties before creating
              //    the instance would also avoid the problem.
              this.__renderDebouncer = Debouncer.debounce(this.__renderDebouncer, microTask, function () { return _this29.__render(); }); enqueueDebouncer(this.__renderDebouncer);
            }/**
       * @override
       * @return {void}
       */}, {
            key: "disconnectedCallback", value: function disconnectedCallback() { babelHelpers.get(babelHelpers.getPrototypeOf(DomIfBase.prototype), "disconnectedCallback", this).call(this); var parent = wrap(this).parentNode; if (!parent || parent.nodeType == Node.DOCUMENT_FRAGMENT_NODE && !wrap(parent).host) { this.__teardownInstance(); } }/**
       * @override
       * @return {void}
       */}, {
            key: "connectedCallback", value: function connectedCallback() { babelHelpers.get(babelHelpers.getPrototypeOf(DomIfBase.prototype), "connectedCallback", this).call(this); if (!hideElementsGlobally()) { this.style.display = 'none'; } if (this.if) { this.__debounceRender(); } }/**
       * Ensures a template has been assigned to `this.__template`.  If it has not
       * yet been, it querySelectors for it in its children and if it does not yet
       * exist (e.g. in parser-generated case), opens a mutation observer and
       * waits for it to appear (returns false if it has not yet been found,
       * otherwise true).  In the `removeNestedTemplates` case, the "template" will
       * be the `dom-if` element itself.
       *
       * @return {boolean} True when a template has been found, false otherwise
       */}, {
            key: "__ensureTemplate", value: function __ensureTemplate() {
              var _this30 = this; if (!this.__template) {// When `removeNestedTemplates` is true, the "template" is the element
                // itself, which has been given a `_templateInfo` property
                var thisAsTemplate =/** @type {!HTMLTemplateElement} */ /** @type {!HTMLElement} */this; var _template4 = thisAsTemplate._templateInfo ? thisAsTemplate :/** @type {!HTMLTemplateElement} */wrap(thisAsTemplate).querySelector('template'); if (!_template4) {// Wait until childList changes and template should be there by then
                  var _observer3 = new MutationObserver(function () { if (wrap(_this30).querySelector('template')) { _observer3.disconnect(); _this30.__render(); } else { throw new Error('dom-if requires a <template> child'); } }); _observer3.observe(this, { childList: true }); return false;
                } this.__template = _template4;
              } return true;
            }/**
       * Ensures a an instance of the template has been created and inserted. This
       * method may return false if the template has not yet been found or if
       * there is no `parentNode` to insert the template into (in either case,
       * connection or the template-finding mutation observer firing will queue
       * another render, causing this method to be called again at a more
       * appropriate time).
       *
       * Subclasses should implement the following methods called here:
       * - `__hasInstance`
       * - `__createAndInsertInstance`
       * - `__getInstanceNodes`
       *
       * @return {boolean} True if the instance was created, false otherwise.
       */}, {
            key: "__ensureInstance", value: function __ensureInstance() {
              var parentNode = wrap(this).parentNode; if (!this.__hasInstance()) {// Guard against element being detached while render was queued
                if (!parentNode) { return false; }// Find the template (when false, there was no template yet)
                if (!this.__ensureTemplate()) { return false; } this.__createAndInsertInstance(parentNode);
              } else {// Move instance children if necessary
                var _children = this.__getInstanceNodes(); if (_children && _children.length) {// Detect case where dom-if was re-attached in new position
                  var lastChild = wrap(this).previousSibling; if (lastChild !== _children[_children.length - 1]) { for (var _i90 = 0, n; _i90 < _children.length && (n = _children[_i90]); _i90++) { wrap(parentNode).insertBefore(n, this); } }
                }
              } return true;
            }/**
       * Forces the element to render its content. Normally rendering is
       * asynchronous to a provoking change. This is done for efficiency so
       * that multiple changes trigger only a single render. The render method
       * should be called if, for example, template rendering is required to
       * validate application state.
       *
       * @return {void}
       */}, {
            key: "render", value: function render() { flush$1(); }/**
       * Performs the key rendering steps:
       * 1. Ensure a template instance has been stamped (when true)
       * 2. Remove the template instance (when false and restamp:true)
       * 3. Sync the hidden state of the instance nodes with the if/restamp state
       * 4. Fires the `dom-change` event when necessary
       *
       * @return {void}
       */}, {
            key: "__render", value: function __render() {
              if (this.if) {
                if (!this.__ensureInstance()) {// No template found yet
                  return;
                }
              } else if (this.restamp) { this.__teardownInstance(); } this._showHideChildren(); if ((!suppressTemplateNotifications || this.notifyDomChange) && this.if != this._lastIf) { this.dispatchEvent(new CustomEvent('dom-change', { bubbles: true, composed: true })); this._lastIf = this.if; }
            }// Ideally these would be annotated as abstract methods in an abstract class,
  // but closure compiler is finnicky
  /* eslint-disable valid-jsdoc */ /**
                                      * Abstract API to be implemented by subclass: Returns true if a template
                                      * instance has been created and inserted.
                                      *
                                      * @protected
                                      * @return {boolean} True when an instance has been created.
                                      */}, {
            key: "__hasInstance", value: function __hasInstance() { }/**
                        * Abstract API to be implemented by subclass: Returns the child nodes stamped
                        * from a template instance.
                        *
                        * @protected
                        * @return {Array<Node>} Array of child nodes stamped from the template
                        * instance.
                        */}, {
            key: "__getInstanceNodes", value: function __getInstanceNodes() { }/**
                             * Abstract API to be implemented by subclass: Creates an instance of the
                             * template and inserts it into the given parent node.
                             *
                             * @protected
                             * @param {Node} parentNode The parent node to insert the instance into
                             * @return {void}
                             */}, {
            key: "__createAndInsertInstance", value: function __createAndInsertInstance(parentNode) { }// eslint-disable-line no-unused-vars
  /**
     * Abstract API to be implemented by subclass: Removes nodes created by an
     * instance of a template and any associated cleanup.
     *
     * @protected
     * @return {void}
     */}, {
            key: "__teardownInstance", value: function __teardownInstance() { }/**
                             * Abstract API to be implemented by subclass: Shows or hides any template
                             * instance childNodes based on the `if` state of the element and its
                             * `__hideTemplateChildren__` property.
                             *
                             * @protected
                             * @return {void}
                             */}, { key: "_showHideChildren", value: function _showHideChildren() { }/* eslint-enable valid-jsdoc */ }]); return DomIfBase;
        }(PolymerElement);/**
     * The version of DomIf used when `fastDomIf` setting is in use, which is
     * optimized for first-render (but adds a tax to all subsequent property updates
     * on the host, whether they were used in a given `dom-if` or not).
     *
     * This implementation avoids use of `Templatizer`, which introduces a new scope
     * (a non-element PropertyEffects instance), which is not strictly necessary
     * since `dom-if` never introduces new properties to its scope (unlike
     * `dom-repeat`). Taking advantage of this fact, the `dom-if` reaches up to its
     * `__dataHost` and stamps the template directly from the host using the host's
     * runtime `_stampTemplate` API, which binds the property effects of the
     * template directly to the host. This both avoids the intermediary
     * `Templatizer` instance, but also avoids the need to bind host properties to
     * the `<template>` element and forward those into the template instance.
     *
     * In this version of `dom-if`, the `this.__instance` method is the
     * `DocumentFragment` returned from `_stampTemplate`, which also serves as the
     * handle for later removing it using the `_removeBoundDom` method.
     */var DomIfFast =/*#__PURE__*/function (_DomIfBase) {
          babelHelpers.inherits(DomIfFast, _DomIfBase); function DomIfFast() { var _this31; babelHelpers.classCallCheck(this, DomIfFast); _this31 = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(DomIfFast).call(this)); _this31.__instance = null; _this31.__syncInfo = null; return _this31; }/**
       * Implementation of abstract API needed by DomIfBase.
       *
       * @override
       * @return {boolean} True when an instance has been created.
       */babelHelpers.createClass(DomIfFast, [{
            key: "__hasInstance", value: function __hasInstance() { return Boolean(this.__instance); }/**
       * Implementation of abstract API needed by DomIfBase.
       *
       * @override
       * @return {Array<Node>} Array of child nodes stamped from the template
       * instance.
       */}, {
            key: "__getInstanceNodes", value: function __getInstanceNodes() { return this.__instance.templateInfo.childNodes; }/**
       * Implementation of abstract API needed by DomIfBase.
       *
       * Stamps the template by calling `_stampTemplate` on the `__dataHost` of this
       * element and then inserts the resulting nodes into the given `parentNode`.
       *
       * @override
       * @param {Node} parentNode The parent node to insert the instance into
       * @return {void}
       */}, {
            key: "__createAndInsertInstance", value: function __createAndInsertInstance(parentNode) {
              var _this32 = this; var host = this.__dataHost || this; if (strictTemplatePolicy) { if (!this.__dataHost) { throw new Error('strictTemplatePolicy: template owner not trusted'); } }// Pre-bind and link the template into the effects system
              var templateInfo = host._bindTemplate(/** @type {!HTMLTemplateElement} */this.__template, true);// Install runEffects hook that prevents running property effects
              // (and any nested template effects) when the `if` is false
              templateInfo.runEffects = function (runEffects, changedProps, hasPaths) {
                var syncInfo = _this32.__syncInfo; if (_this32.if) {// Mix any props that changed while the `if` was false into `changedProps`
                  if (syncInfo) {// If there were properties received while the `if` was false, it is
                    // important to sync the hidden state with the element _first_, so that
                    // new bindings to e.g. `textContent` do not get stomped on by
                    // pre-hidden values if `_showHideChildren` were to be called later at
                    // the next render. Clearing `__invalidProps` here ensures
                    // `_showHideChildren`'s call to `__syncHostProperties` no-ops, so
                    // that we don't call `runEffects` more often than necessary.
                    _this32.__syncInfo = null; _this32._showHideChildren(); changedProps = Object.assign(syncInfo.changedProps, changedProps);
                  } runEffects(changedProps, hasPaths);
                } else {// Accumulate any values changed while `if` was false, along with the
                  // runEffects method to sync them, so that we can replay them once `if`
                  // becomes true
                  if (_this32.__instance) {
                    if (!syncInfo) { syncInfo = _this32.__syncInfo = { runEffects: runEffects, changedProps: {} }; } if (hasPaths) {// Store root object of any paths; this will ensure direct bindings
                      // like [[obj.foo]] bindings run after a `set('obj.foo', v)`, but
                      // note that path notifications like `set('obj.foo.bar', v)` will
                      // not propagate. Since batched path notifications are not
                      // supported, we cannot simply accumulate path notifications. This
                      // is equivalent to the non-fastDomIf case, which stores root(p) in
                      // __invalidProps.
                      for (var _p19 in changedProps) { var rootProp = root(_p19); syncInfo.changedProps[rootProp] = _this32.__dataHost[rootProp]; }
                    } else { Object.assign(syncInfo.changedProps, changedProps); }
                  }
                }
              };// Stamp the template, and set its DocumentFragment to the "instance"
              this.__instance = host._stampTemplate(/** @type {!HTMLTemplateElement} */this.__template, templateInfo); wrap(parentNode).insertBefore(this.__instance, this);
            }/**
       * Run effects for any properties that changed while the `if` was false.
       *
       * @return {void}
       */}, {
            key: "__syncHostProperties", value: function __syncHostProperties() { var syncInfo = this.__syncInfo; if (syncInfo) { this.__syncInfo = null; syncInfo.runEffects(syncInfo.changedProps, false); } }/**
       * Implementation of abstract API needed by DomIfBase.
       *
       * Remove the instance and any nodes it created.  Uses the `__dataHost`'s
       * runtime `_removeBoundDom` method.
       *
       * @override
       * @return {void}
       */}, {
            key: "__teardownInstance", value: function __teardownInstance() { var host = this.__dataHost || this; if (this.__instance) { host._removeBoundDom(this.__instance); this.__instance = null; this.__syncInfo = null; } }/**
       * Implementation of abstract API needed by DomIfBase.
       *
       * Shows or hides the template instance top level child nodes. For
       * text nodes, `textContent` is removed while "hidden" and replaced when
       * "shown."
       *
       * @override
       * @return {void}
       * @protected
       * @suppress {visibility}
       */}, { key: "_showHideChildren", value: function _showHideChildren() { var hidden = this.__hideTemplateChildren__ || !this.if; if (this.__instance && Boolean(this.__instance.__hidden) !== hidden) { this.__instance.__hidden = hidden; showHideChildren(hidden, this.__instance.templateInfo.childNodes); } if (!hidden) { this.__syncHostProperties(); } } }]); return DomIfFast;
        }(DomIfBase);/**
     * The "legacy" implementation of `dom-if`, implemented using `Templatizer`.
     *
     * In this version, `this.__instance` is the `TemplateInstance` returned
     * from the templatized constructor.
     */var DomIfLegacy =/*#__PURE__*/function (_DomIfBase2) {
          babelHelpers.inherits(DomIfLegacy, _DomIfBase2); function DomIfLegacy() { var _this33; babelHelpers.classCallCheck(this, DomIfLegacy); _this33 = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(DomIfLegacy).call(this)); _this33.__ctor = null; _this33.__instance = null; _this33.__invalidProps = null; return _this33; }/**
       * Implementation of abstract API needed by DomIfBase.
       *
       * @override
       * @return {boolean} True when an instance has been created.
       */babelHelpers.createClass(DomIfLegacy, [{
            key: "__hasInstance", value: function __hasInstance() { return Boolean(this.__instance); }/**
       * Implementation of abstract API needed by DomIfBase.
       *
       * @override
       * @return {Array<Node>} Array of child nodes stamped from the template
       * instance.
       */}, {
            key: "__getInstanceNodes", value: function __getInstanceNodes() { return this.__instance.children; }/**
       * Implementation of abstract API needed by DomIfBase.
       *
       * Stamps the template by creating a new instance of the templatized
       * constructor (which is created lazily if it does not yet exist), and then
       * inserts its resulting `root` doc fragment into the given `parentNode`.
       *
       * @override
       * @param {Node} parentNode The parent node to insert the instance into
       * @return {void}
       */}, {
            key: "__createAndInsertInstance", value: function __createAndInsertInstance(parentNode) {// Ensure we have an instance constructor
              if (!this.__ctor) {
                this.__ctor = _templatize(/** @type {!HTMLTemplateElement} */this.__template, this, {// dom-if templatizer instances require `mutable: true`, as
                  // `__syncHostProperties` relies on that behavior to sync objects
                  mutableData: true,/**
           * @param {string} prop Property to forward
           * @param {*} value Value of property
           * @this {DomIfLegacy}
           */forwardHostProp: function forwardHostProp(prop, value) {
                    if (this.__instance) {
                      if (this.if) { this.__instance.forwardHostProp(prop, value); } else {// If we have an instance but are squelching host property
                        // forwarding due to if being false, note the invalidated
                        // properties so `__syncHostProperties` can sync them the next
                        // time `if` becomes true
                        this.__invalidProps = this.__invalidProps || Object.create(null); this.__invalidProps[root(prop)] = true;
                      }
                    }
                  }
                });
              }// Create and insert the instance
              this.__instance = new this.__ctor(); wrap(parentNode).insertBefore(this.__instance.root, this);
            }/**
       * Implementation of abstract API needed by DomIfBase.
       *
       * Removes the instance and any nodes it created.
       *
       * @override
       * @return {void}
       */}, {
            key: "__teardownInstance", value: function __teardownInstance() {
              if (this.__instance) {
                var c$ = this.__instance.children; if (c$ && c$.length) {// use first child parent, for case when dom-if may have been detached
                  var parent = wrap(c$[0]).parentNode;// Instance children may be disconnected from parents when dom-if
                  // detaches if a tree was innerHTML'ed
                  if (parent) { parent = wrap(parent); for (var _i91 = 0, n; _i91 < c$.length && (n = c$[_i91]); _i91++) { parent.removeChild(n); } }
                } this.__invalidProps = null; this.__instance = null;
              }
            }/**
       * Forwards any properties that changed while the `if` was false into the
       * template instance and flushes it.
       *
       * @return {void}
       */}, {
            key: "__syncHostProperties", value: function __syncHostProperties() { var props = this.__invalidProps; if (props) { this.__invalidProps = null; for (var prop in props) { this.__instance._setPendingProperty(prop, this.__dataHost[prop]); } this.__instance._flushProperties(); } }/**
       * Implementation of abstract API needed by DomIfBase.
       *
       * Shows or hides the template instance top level child elements. For
       * text nodes, `textContent` is removed while "hidden" and replaced when
       * "shown."
       *
       * @override
       * @protected
       * @return {void}
       * @suppress {visibility}
       */}, { key: "_showHideChildren", value: function _showHideChildren() { var hidden = this.__hideTemplateChildren__ || !this.if; if (this.__instance && Boolean(this.__instance.__hidden) !== hidden) { this.__instance.__hidden = hidden; this.__instance._showHideChildren(hidden); } if (!hidden) { this.__syncHostProperties(); } } }]); return DomIfLegacy;
        }(DomIfBase);/**
     * The `<dom-if>` element will stamp a light-dom `<template>` child when
     * the `if` property becomes truthy, and the template can use Polymer
     * data-binding and declarative event features when used in the context of
     * a Polymer element's template.
     *
     * When `if` becomes falsy, the stamped content is hidden but not
     * removed from dom. When `if` subsequently becomes truthy again, the content
     * is simply re-shown. This approach is used due to its favorable performance
     * characteristics: the expense of creating template content is paid only
     * once and lazily.
     *
     * Set the `restamp` property to true to force the stamped content to be
     * created / destroyed when the `if` condition changes.
     *
     * @customElement
     * @polymer
     * @extends DomIfBase
     * @constructor
     * @summary Custom element that conditionally stamps and hides or removes
     *   template content based on a boolean flag.
     */var DomIf = fastDomIf ? DomIfFast : DomIfLegacy; customElements.define(DomIf.is, DomIf); var ArraySelectorMixin = dedupingMixin(function (superClass) {/**
     * @constructor
     * @implements {Polymer_ElementMixin}
     * @private
     */var elementBase = ElementMixin(superClass);/**
                                                    * @polymer
                                                    * @mixinClass
                                                    * @implements {Polymer_ArraySelectorMixin}
                                                    * @unrestricted
                                                    */var ArraySelectorMixin =/*#__PURE__*/function (_elementBase2) {
            babelHelpers.inherits(ArraySelectorMixin, _elementBase2); babelHelpers.createClass(ArraySelectorMixin, null, [{
              key: "properties", get: function get() {
                return {/**
           * An array containing items from which selection will be made.
           */items: { type: Array },/**
           * When `true`, multiple items may be selected at once (in this case,
           * `selected` is an array of currently selected items).  When `false`,
           * only one item may be selected at a time.
           */multi: { type: Boolean, value: false },/**
           * When `multi` is true, this is an array that contains any selected.
           * When `multi` is false, this is the currently selected item, or `null`
           * if no item is selected.
           * @type {?Object|?Array<!Object>}
           */selected: { type: Object, notify: true },/**
           * When `multi` is false, this is the currently selected item, or `null`
           * if no item is selected.
           * @type {?Object}
           */selectedItem: { type: Object, notify: true },/**
           * When `true`, calling `select` on an item that is already selected
           * will deselect the item.
           */toggle: { type: Boolean, value: false }
                };
              }
            }, { key: "observers", get: function get() { return ['__updateSelection(multi, items.*)']; } }]); function ArraySelectorMixin() { var _this34; babelHelpers.classCallCheck(this, ArraySelectorMixin); _this34 = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(ArraySelectorMixin).call(this)); _this34.__lastItems = null; _this34.__lastMulti = null; _this34.__selectedMap = null; return _this34; } babelHelpers.createClass(ArraySelectorMixin, [{
              key: "__updateSelection", value: function __updateSelection(multi, itemsInfo) {
                var path = itemsInfo.path; if (path == JSCompiler_renameProperty('items', this)) {// Case 1 - items array changed, so diff against previous array and
                  // deselect any removed items and adjust selected indices
                  var newItems = itemsInfo.base || []; var lastItems = this.__lastItems; var lastMulti = this.__lastMulti; if (multi !== lastMulti) { this.clearSelection(); } if (lastItems) { var splices = calculateSplices(newItems, lastItems); this.__applySplices(splices); } this.__lastItems = newItems; this.__lastMulti = multi;
                } else if (itemsInfo.path == "".concat(JSCompiler_renameProperty('items', this), ".splices")) {// Case 2 - got specific splice information describing the array mutation:
                  // deselect any removed items and adjust selected indices
                  this.__applySplices(itemsInfo.value.indexSplices);
                } else {// Case 3 - an array element was changed, so deselect the previous
                  // item for that index if it was previously selected
                  var part = path.slice("".concat(JSCompiler_renameProperty('items', this), ".").length); var idx = parseInt(part, 10); if (part.indexOf('.') < 0 && part == idx) { this.__deselectChangedIdx(idx); }
                }
              }
            }, {
              key: "__applySplices", value: function __applySplices(splices) {
                var _this35 = this; var selected = this.__selectedMap;// Adjust selected indices and mark removals
                var _loop4 = function _loop4(_i92) {
                  var s = splices[_i92]; selected.forEach(function (idx, item) {
                    if (idx < s.index) {// no change
                    } else if (idx >= s.index + s.removed.length) {// adjust index
                      selected.set(item, idx + s.addedCount - s.removed.length);
                    } else {// remove index
                      selected.set(item, -1);
                    }
                  }); for (var j = 0; j < s.addedCount; j++) { var idx = s.index + j; if (selected.has(_this35.items[idx])) { selected.set(_this35.items[idx], idx); } }
                }; for (var _i92 = 0; _i92 < splices.length; _i92++) { _loop4(_i92); }// Update linked paths
                this.__updateLinks();// Remove selected items that were removed from the items array
                var sidx = 0; selected.forEach(function (idx, item) { if (idx < 0) { if (_this35.multi) { _this35.splice(JSCompiler_renameProperty('selected', _this35), sidx, 1); } else { _this35.selected = _this35.selectedItem = null; } selected.delete(item); } else { sidx++; } });
              }
            }, {
              key: "__updateLinks", value: function __updateLinks() { var _this36 = this; this.__dataLinkedPaths = {}; if (this.multi) { var sidx = 0; this.__selectedMap.forEach(function (idx) { if (idx >= 0) { _this36.linkPaths("".concat(JSCompiler_renameProperty('items', _this36), ".").concat(idx), "".concat(JSCompiler_renameProperty('selected', _this36), ".").concat(sidx++)); } }); } else { this.__selectedMap.forEach(function (idx) { _this36.linkPaths(JSCompiler_renameProperty('selected', _this36), "".concat(JSCompiler_renameProperty('items', _this36), ".").concat(idx)); _this36.linkPaths(JSCompiler_renameProperty('selectedItem', _this36), "".concat(JSCompiler_renameProperty('items', _this36), ".").concat(idx)); }); } }/**
         * Clears the selection state.
         * @override
         * @return {void}
         */}, {
              key: "clearSelection", value: function clearSelection() {// Unbind previous selection
                this.__dataLinkedPaths = {};// The selected map stores 3 pieces of information:
                // key: items array object
                // value: items array index
                // order: selected array index
                this.__selectedMap = new Map();// Initialize selection
                this.selected = this.multi ? [] : null; this.selectedItem = null;
              }/**
         * Returns whether the item is currently selected.
         *
         * @override
         * @param {*} item Item from `items` array to test
         * @return {boolean} Whether the item is selected
         */}, {
              key: "isSelected", value: function isSelected(item) { return this.__selectedMap.has(item); }/**
         * Returns whether the item is currently selected.
         *
         * @override
         * @param {number} idx Index from `items` array to test
         * @return {boolean} Whether the item is selected
         */}, { key: "isIndexSelected", value: function isIndexSelected(idx) { return this.isSelected(this.items[idx]); } }, { key: "__deselectChangedIdx", value: function __deselectChangedIdx(idx) { var _this37 = this; var sidx = this.__selectedIndexForItemIndex(idx); if (sidx >= 0) { var _i93 = 0; this.__selectedMap.forEach(function (idx, item) { if (sidx == _i93++) { _this37.deselect(item); } }); } } }, {
              key: "__selectedIndexForItemIndex", value: function __selectedIndexForItemIndex(idx) { var selected = this.__dataLinkedPaths["".concat(JSCompiler_renameProperty('items', this), ".").concat(idx)]; if (selected) { return parseInt(selected.slice("".concat(JSCompiler_renameProperty('selected', this), ".").length), 10); } }/**
         * Deselects the given item if it is already selected.
         *
         * @override
         * @param {*} item Item from `items` array to deselect
         * @return {void}
         */}, {
              key: "deselect", value: function deselect(item) { var idx = this.__selectedMap.get(item); if (idx >= 0) { this.__selectedMap.delete(item); var sidx; if (this.multi) { sidx = this.__selectedIndexForItemIndex(idx); } this.__updateLinks(); if (this.multi) { this.splice(JSCompiler_renameProperty('selected', this), sidx, 1); } else { this.selected = this.selectedItem = null; } } }/**
         * Deselects the given index if it is already selected.
         *
         * @override
         * @param {number} idx Index from `items` array to deselect
         * @return {void}
         */}, {
              key: "deselectIndex", value: function deselectIndex(idx) { this.deselect(this.items[idx]); }/**
         * Selects the given item.  When `toggle` is true, this will automatically
         * deselect the item if already selected.
         *
         * @override
         * @param {*} item Item from `items` array to select
         * @return {void}
         */}, {
              key: "select", value: function select(item) { this.selectIndex(this.items.indexOf(item)); }/**
         * Selects the given index.  When `toggle` is true, this will automatically
         * deselect the item if already selected.
         *
         * @override
         * @param {number} idx Index from `items` array to select
         * @return {void}
         */}, { key: "selectIndex", value: function selectIndex(idx) { var item = this.items[idx]; if (!this.isSelected(item)) { if (!this.multi) { this.__selectedMap.clear(); } this.__selectedMap.set(item, idx); this.__updateLinks(); if (this.multi) { this.push(JSCompiler_renameProperty('selected', this), item); } else { this.selected = this.selectedItem = item; } } else if (this.toggle) { this.deselectIndex(idx); } } }]); return ArraySelectorMixin;
          }(elementBase); return ArraySelectorMixin;
        });// export mixin
        var baseArraySelector = ArraySelectorMixin(PolymerElement);/**
                                                               * Element implementing the `ArraySelector` mixin, which records
                                                               * dynamic associations between item paths in a master `items` array and a
                                                               * `selected` array such that path changes to the master array (at the host)
                                                               * element or elsewhere via data-binding) are correctly propagated to items
                                                               * in the selected array and vice-versa.
                                                               *
                                                               * The `items` property accepts an array of user data, and via the
                                                               * `select(item)` and `deselect(item)` API, updates the `selected` property
                                                               * which may be bound to other parts of the application, and any changes to
                                                               * sub-fields of `selected` item(s) will be kept in sync with items in the
                                                               * `items` array.  When `multi` is false, `selected` is a property
                                                               * representing the last selected item.  When `multi` is true, `selected`
                                                               * is an array of multiply selected items.
                                                               *
                                                               * Example:
                                                               *
                                                               * ```js
                                                               * import {PolymerElement} from '@polymer/polymer';
                                                               * import '@polymer/polymer/lib/elements/array-selector.js';
                                                               *
                                                               * class EmployeeList extends PolymerElement {
                                                               *   static get _template() {
                                                               *     return html`
                                                               *         <div> Employee list: </div>
                                                               *         <dom-repeat id="employeeList" items="{{employees}}">
                                                               *           <template>
                                                               *             <div>First name: <span>{{item.first}}</span></div>
                                                               *               <div>Last name: <span>{{item.last}}</span></div>
                                                               *               <button on-click="toggleSelection">Select</button>
                                                               *           </template>
                                                               *         </dom-repeat>
                                                               *
                                                               *         <array-selector id="selector"
                                                               *                         items="{{employees}}"
                                                               *                         selected="{{selected}}"
                                                               *                         multi toggle></array-selector>
                                                               *
                                                               *         <div> Selected employees: </div>
                                                               *         <dom-repeat items="{{selected}}">
                                                               *           <template>
                                                               *             <div>First name: <span>{{item.first}}</span></div>
                                                               *             <div>Last name: <span>{{item.last}}</span></div>
                                                               *           </template>
                                                               *         </dom-repeat>`;
                                                               *   }
                                                               *   static get is() { return 'employee-list'; }
                                                               *   static get properties() {
                                                               *     return {
                                                               *       employees: {
                                                               *         value() {
                                                               *           return [
                                                               *             {first: 'Bob', last: 'Smith'},
                                                               *             {first: 'Sally', last: 'Johnson'},
                                                               *             ...
                                                               *           ];
                                                               *         }
                                                               *       }
                                                               *     };
                                                               *   }
                                                               *   toggleSelection(e) {
                                                               *     const item = this.$.employeeList.itemForElement(e.target);
                                                               *     this.$.selector.select(item);
                                                               *   }
                                                               * }
                                                               * ```
                                                               *
                                                               * @polymer
                                                               * @customElement
                                                               * @extends {baseArraySelector}
                                                               * @appliesMixin ArraySelectorMixin
                                                               * @summary Custom element that links paths between an input `items` array and
                                                               *   an output `selected` item or array based on calls to its selection API.
                                                               */var ArraySelector =/*#__PURE__*/function (_baseArraySelector) {
          babelHelpers.inherits(ArraySelector, _baseArraySelector); function ArraySelector() { babelHelpers.classCallCheck(this, ArraySelector); return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(ArraySelector).apply(this, arguments)); } babelHelpers.createClass(ArraySelector, null, [{
            key: "is",// Not needed to find template; can be removed once the analyzer
            // can find the tag name from customElements.define call
            get: function get() { return 'array-selector'; }
          }, { key: "template", get: function get() { return null; } }]); return ArraySelector;
        }(baseArraySelector); customElements.define(ArraySelector.is, ArraySelector);/**
                                                          @license
                                                          Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
                                                          This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
                                                          The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
                                                          The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
                                                          Code distributed by Google as part of the polymer project is also
                                                          subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
                                                          */'use strict'; var customStyleInterface = new CustomStyleInterface(); if (!window.ShadyCSS) {
          window.ShadyCSS = {/**
       * @param {!HTMLTemplateElement} template
       * @param {string} elementName
       * @param {string=} elementExtends
       */prepareTemplate: function prepareTemplate(template, elementName, elementExtends) { },// eslint-disable-line no-unused-vars
  /**
       * @param {!HTMLTemplateElement} template
       * @param {string} elementName
       */prepareTemplateDom: function prepareTemplateDom(template, elementName) { },// eslint-disable-line no-unused-vars
  /**
       * @param {!HTMLTemplateElement} template
       * @param {string} elementName
       * @param {string=} elementExtends
       */prepareTemplateStyles: function prepareTemplateStyles(template, elementName, elementExtends) { },// eslint-disable-line no-unused-vars
  /**
       * @param {Element} element
       * @param {Object=} properties
       */styleSubtree: function styleSubtree(element, properties) { customStyleInterface.processStyles(); updateNativeProperties(element, properties); },/**
       * @param {Element} element
       */styleElement: function styleElement(element) {// eslint-disable-line no-unused-vars
              customStyleInterface.processStyles();
            },/**
       * @param {Object=} properties
       */styleDocument: function styleDocument(properties) { customStyleInterface.processStyles(); updateNativeProperties(document.body, properties); },/**
       * @param {Element} element
       * @param {string} property
       * @return {string}
       */getComputedStyleValue: function getComputedStyleValue(element, property) { return _getComputedStyleValue(element, property); }, flushCustomStyles: function flushCustomStyles() { }, nativeCss: nativeCssVariables, nativeShadow: nativeShadow, cssBuild: cssBuild, disableRuntime: disableRuntime
          };
        } window.ShadyCSS.CustomStyleInterface = customStyleInterface; var attr = 'include'; var CustomStyleInterface$1 = window.ShadyCSS.CustomStyleInterface;/**
                                                                       * Custom element for defining styles in the main document that can take
                                                                       * advantage of [shady DOM](https://github.com/webcomponents/shadycss) shims
                                                                       * for style encapsulation, custom properties, and custom mixins.
                                                                       *
                                                                       * - Document styles defined in a `<custom-style>` are shimmed to ensure they
                                                                       *   do not leak into local DOM when running on browsers without native
                                                                       *   Shadow DOM.
                                                                       * - Custom properties can be defined in a `<custom-style>`. Use the `html` selector
                                                                       *   to define custom properties that apply to all custom elements.
                                                                       * - Custom mixins can be defined in a `<custom-style>`, if you import the optional
                                                                       *   [apply shim](https://github.com/webcomponents/shadycss#about-applyshim)
                                                                       *   (`shadycss/apply-shim.html`).
                                                                       *
                                                                       * To use:
                                                                       *
                                                                       * - Import `custom-style.html`.
                                                                       * - Place a `<custom-style>` element in the main document, wrapping an inline `<style>` tag that
                                                                       *   contains the CSS rules you want to shim.
                                                                       *
                                                                       * For example:
                                                                       *
                                                                       * ```html
                                                                       * \x3c!-- import apply shim--only required if using mixins --\x3e
                                                                       * <link rel="import" href="bower_components/shadycss/apply-shim.html">
                                                                       * \x3c!-- import custom-style element --\x3e
                                                                       * <link rel="import" href="bower_components/polymer/lib/elements/custom-style.html">
                                                                       *
                                                                       * <custom-style>
                                                                       *   <style>
                                                                       *     html {
                                                                       *       --custom-color: blue;
                                                                       *       --custom-mixin: {
                                                                       *         font-weight: bold;
                                                                       *         color: red;
                                                                       *       };
                                                                       *     }
                                                                       *   </style>
                                                                       * </custom-style>
                                                                       * ```
                                                                       *
                                                                       * @customElement
                                                                       * @extends HTMLElement
                                                                       * @summary Custom element for defining styles in the main document that can
                                                                       *   take advantage of Polymer's style scoping and custom properties shims.
                                                                       */var CustomStyle =/*#__PURE__*/function (_HTMLElement2) {
          babelHelpers.inherits(CustomStyle, _HTMLElement2); function CustomStyle() { var _this38; babelHelpers.classCallCheck(this, CustomStyle); _this38 = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(CustomStyle).call(this)); _this38._style = null; CustomStyleInterface$1.addCustomStyle(babelHelpers.assertThisInitialized(_this38)); return _this38; }/**
       * Returns the light-DOM `<style>` child this element wraps.  Upon first
       * call any style modules referenced via the `include` attribute will be
       * concatenated to this element's `<style>`.
       *
       * @export
       * @return {HTMLStyleElement} This element's light-DOM `<style>`
       */babelHelpers.createClass(CustomStyle, [{
            key: "getStyle", value: function getStyle() {
              if (this._style) { return this._style; } var style =/** @type {HTMLStyleElement} */this.querySelector('style'); if (!style) { return null; } this._style = style; var include = style.getAttribute(attr); if (include) { style.removeAttribute(attr);/** @suppress {deprecated} */style.textContent = cssFromModules(include) + style.textContent; }/*
        HTML Imports styling the main document are deprecated in Chrome
        https://crbug.com/523952
         If this element is not in the main document, then it must be in an HTML Import document.
        In that case, move the custom style to the main document.
         The ordering of `<custom-style>` should stay the same as when loaded by HTML Imports, but there may be odd
        cases of ordering w.r.t the main document styles.
        */if (this.ownerDocument !== window.document) { window.document.head.appendChild(this); } return this._style;
            }
          }]); return CustomStyle;
        }(babelHelpers.wrapNativeSuper(HTMLElement)); window.customElements.define('custom-style', CustomStyle); var mutablePropertyChange$1;/** @suppress {missingProperties} */(function () { mutablePropertyChange$1 = MutableData._mutablePropertyChange; })();/**
         * Legacy element behavior to skip strict dirty-checking for objects and arrays,
         * (always consider them to be "dirty") for use on legacy API Polymer elements.
         *
         * By default, `Polymer.PropertyEffects` performs strict dirty checking on
         * objects, which means that any deep modifications to an object or array will
         * not be propagated unless "immutable" data patterns are used (i.e. all object
         * references from the root to the mutation were changed).
         *
         * Polymer also provides a proprietary data mutation and path notification API
         * (e.g. `notifyPath`, `set`, and array mutation API's) that allow efficient
         * mutation and notification of deep changes in an object graph to all elements
         * bound to the same object graph.
         *
         * In cases where neither immutable patterns nor the data mutation API can be
         * used, applying this mixin will cause Polymer to skip dirty checking for
         * objects and arrays (always consider them to be "dirty").  This allows a
         * user to make a deep modification to a bound object graph, and then either
         * simply re-set the object (e.g. `this.items = this.items`) or call `notifyPath`
         * (e.g. `this.notifyPath('items')`) to update the tree.  Note that all
         * elements that wish to be updated based on deep mutations must apply this
         * mixin or otherwise skip strict dirty checking for objects/arrays.
         * Specifically, any elements in the binding tree between the source of a
         * mutation and the consumption of it must apply this behavior or enable the
         * `Polymer.OptionalMutableDataBehavior`.
         *
         * In order to make the dirty check strategy configurable, see
         * `Polymer.OptionalMutableDataBehavior`.
         *
         * Note, the performance characteristics of propagating large object graphs
         * will be worse as opposed to using strict dirty checking with immutable
         * patterns or Polymer's path notification API.
         *
         * @polymerBehavior
         * @summary Behavior to skip strict dirty-checking for objects and
         *   arrays
         */var MutableDataBehavior = {/**
     * Overrides `Polymer.PropertyEffects` to provide option for skipping
     * strict equality checking for Objects and Arrays.
     *
     * This method pulls the value to dirty check against from the `__dataTemp`
     * cache (rather than the normal `__data` cache) for Objects.  Since the temp
     * cache is cleared at the end of a turn, this implementation allows
     * side-effects of deep object changes to be processed by re-setting the
     * same object (using the temp cache as an in-turn backstop to prevent
     * cycles due to 2-way notification).
     *
     * @param {string} property Property name
     * @param {*} value New property value
     * @param {*} old Previous property value
     * @return {boolean} Whether the property should be considered a change
     * @protected
     * @override
     */_shouldPropertyChange: function _shouldPropertyChange(property, value, old) { return mutablePropertyChange$1(this, property, value, old, true); }
        };/**
      * Legacy element behavior to add the optional ability to skip strict
      * dirty-checking for objects and arrays (always consider them to be
      * "dirty") by setting a `mutable-data` attribute on an element instance.
      *
      * By default, `Polymer.PropertyEffects` performs strict dirty checking on
      * objects, which means that any deep modifications to an object or array will
      * not be propagated unless "immutable" data patterns are used (i.e. all object
      * references from the root to the mutation were changed).
      *
      * Polymer also provides a proprietary data mutation and path notification API
      * (e.g. `notifyPath`, `set`, and array mutation API's) that allow efficient
      * mutation and notification of deep changes in an object graph to all elements
      * bound to the same object graph.
      *
      * In cases where neither immutable patterns nor the data mutation API can be
      * used, applying this mixin will allow Polymer to skip dirty checking for
      * objects and arrays (always consider them to be "dirty").  This allows a
      * user to make a deep modification to a bound object graph, and then either
      * simply re-set the object (e.g. `this.items = this.items`) or call `notifyPath`
      * (e.g. `this.notifyPath('items')`) to update the tree.  Note that all
      * elements that wish to be updated based on deep mutations must apply this
      * mixin or otherwise skip strict dirty checking for objects/arrays.
      * Specifically, any elements in the binding tree between the source of a
      * mutation and the consumption of it must enable this behavior or apply the
      * `Polymer.OptionalMutableDataBehavior`.
      *
      * While this behavior adds the ability to forgo Object/Array dirty checking,
      * the `mutableData` flag defaults to false and must be set on the instance.
      *
      * Note, the performance characteristics of propagating large object graphs
      * will be worse by relying on `mutableData: true` as opposed to using
      * strict dirty checking with immutable patterns or Polymer's path notification
      * API.
      *
      * @polymerBehavior
      * @summary Behavior to optionally skip strict dirty-checking for objects and
      *   arrays
      */var OptionalMutableDataBehavior = {
          properties: {/**
       * Instance-level flag for configuring the dirty-checking strategy
       * for this element.  When true, Objects and Arrays will skip dirty
       * checking, otherwise strict equality checking will be used.
       */mutableData: Boolean
          },/**
     * Overrides `Polymer.PropertyEffects` to skip strict equality checking
     * for Objects and Arrays.
     *
     * Pulls the value to dirty check against from the `__dataTemp` cache
     * (rather than the normal `__data` cache) for Objects.  Since the temp
     * cache is cleared at the end of a turn, this implementation allows
     * side-effects of deep object changes to be processed by re-setting the
     * same object (using the temp cache as an in-turn backstop to prevent
     * cycles due to 2-way notification).
     *
     * @param {string} property Property name
     * @param {*} value New property value
     * @param {*} old Previous property value
     * @return {boolean} Whether the property should be considered a change
     * @protected
     * @override
     */_shouldPropertyChange: function _shouldPropertyChange(property, value, old) { return mutablePropertyChange$1(this, property, value, old, this.mutableData); }
        }; var Base = LegacyElementMixin(HTMLElement).prototype; Polymer({
          is: 'iron-request', hostAttributes: { hidden: true }, properties: {/**
       * A reference to the XMLHttpRequest instance used to generate the
       * network request.
       *
       * @type {XMLHttpRequest}
       */xhr: { type: Object, notify: true, readOnly: true, value: function value() { return new XMLHttpRequest(); } },/**
       * A reference to the parsed response body, if the `xhr` has completely
       * resolved.
       *
       * @type {*}
       * @default null
       */response: { type: Object, notify: true, readOnly: true, value: function value() { return null; } },/**
       * A reference to the status code, if the `xhr` has completely resolved.
       */status: { type: Number, notify: true, readOnly: true, value: 0 },/**
       * A reference to the status text, if the `xhr` has completely resolved.
       */statusText: { type: String, notify: true, readOnly: true, value: '' },/**
       * A promise that resolves when the `xhr` response comes back, or rejects
       * if there is an error before the `xhr` completes.
       * The resolve callback is called with the original request as an argument.
       * By default, the reject callback is called with an `Error` as an argument.
       * If `rejectWithRequest` is true, the reject callback is called with an
       * object with two keys: `request`, the original request, and `error`, the
       * error object.
       *
       * @type {Promise}
       */completes: { type: Object, readOnly: true, notify: true, value: function value() { return new Promise(function (resolve, reject) { this.resolveCompletes = resolve; this.rejectCompletes = reject; }.bind(this)); } },/**
       * An object that contains progress information emitted by the XHR if
       * available.
       *
       * @default {}
       */progress: { type: Object, notify: true, readOnly: true, value: function value() { return {}; } },/**
       * Aborted will be true if an abort of the request is attempted.
       */aborted: { type: Boolean, notify: true, readOnly: true, value: false },/**
       * Errored will be true if the browser fired an error event from the
       * XHR object (mainly network errors).
       */errored: { type: Boolean, notify: true, readOnly: true, value: false },/**
       * TimedOut will be true if the XHR threw a timeout event.
       */timedOut: { type: Boolean, notify: true, readOnly: true, value: false }
          },/**
     * Succeeded is true if the request succeeded. The request succeeded if it
     * loaded without error, wasn't aborted, and the status code is ≥ 200, and
     * < 300, or if the status code is 0.
     *
     * The status code 0 is accepted as a success because some schemes - e.g.
     * file:// - don't provide status codes.
     *
     * @return {boolean}
     */get succeeded() {
            if (this.errored || this.aborted || this.timedOut) { return false; } var status = this.xhr.status || 0;// Note: if we are using the file:// protocol, the status code will be 0
            // for all outcomes (successful or otherwise).
            return status === 0 || status >= 200 && status < 300;
          },/**
     * Sends an HTTP request to the server and returns a promise (see the
     * `completes` property for details).
     *
     * The handling of the `body` parameter will vary based on the Content-Type
     * header. See the docs for iron-ajax's `body` property for details.
     *
     * @param {{
     *   url: string,
     *   method: (string|undefined),
     *   async: (boolean|undefined),
     *   body:
     * (ArrayBuffer|ArrayBufferView|Blob|Document|FormData|null|string|undefined|Object),
     *   headers: (Object|undefined),
     *   handleAs: (string|undefined),
     *   jsonPrefix: (string|undefined),
     *   withCredentials: (boolean|undefined),
     *   timeout: (number|undefined),
     *   rejectWithRequest: (boolean|undefined)}} options -
     *   - url The url to which the request is sent.
     *   - method The HTTP method to use, default is GET.
     *   - async By default, all requests are sent asynchronously. To send
     * synchronous requests, set to false.
     *   -  body The content for the request body for POST method.
     *   -  headers HTTP request headers.
     *   -  handleAs The response type. Default is 'text'.
     *   -  withCredentials Whether or not to send credentials on the request.
     * Default is false.
     *   -  timeout - Timeout for request, in milliseconds.
     *   -  rejectWithRequest Set to true to include the request object with
     * promise rejections.
     * @return {Promise}
     */send: function send(options) {
            var xhr = this.xhr; if (xhr.readyState > 0) { return null; } xhr.addEventListener('progress', function (progress) {
              this._setProgress({ lengthComputable: progress.lengthComputable, loaded: progress.loaded, total: progress.total });// Webcomponents v1 spec does not fire *-changed events when not connected
              this.fire('iron-request-progress-changed', { value: this.progress });
            }.bind(this)); xhr.addEventListener('error', function (error) { this._setErrored(true); this._updateStatus(); var response = options.rejectWithRequest ? { error: error, request: this } : error; this.rejectCompletes(response); }.bind(this)); xhr.addEventListener('timeout', function (error) { this._setTimedOut(true); this._updateStatus(); var response = options.rejectWithRequest ? { error: error, request: this } : error; this.rejectCompletes(response); }.bind(this)); xhr.addEventListener('abort', function () { this._setAborted(true); this._updateStatus(); var error = new Error('Request aborted.'); var response = options.rejectWithRequest ? { error: error, request: this } : error; this.rejectCompletes(response); }.bind(this));// Called after all of the above.
            xhr.addEventListener('loadend', function () { this._updateStatus(); this._setResponse(this.parseResponse()); if (!this.succeeded) { var error = new Error('The request failed with status code: ' + this.xhr.status); var response = options.rejectWithRequest ? { error: error, request: this } : error; this.rejectCompletes(response); return; } this.resolveCompletes(this); }.bind(this)); this.url = options.url; var isXHRAsync = options.async !== false; xhr.open(options.method || 'GET', options.url, isXHRAsync); var acceptType = { 'json': 'application/json', 'text': 'text/plain', 'html': 'text/html', 'xml': 'application/xml', 'arraybuffer': 'application/octet-stream' }[options.handleAs]; var headers = options.headers || Object.create(null); var newHeaders = Object.create(null); for (var key in headers) { newHeaders[key.toLowerCase()] = headers[key]; } headers = newHeaders; if (acceptType && !headers['accept']) { headers['accept'] = acceptType; } Object.keys(headers).forEach(function (requestHeader) { if (/[A-Z]/.test(requestHeader)) { Base._error('Headers must be lower case, got', requestHeader); } xhr.setRequestHeader(requestHeader, headers[requestHeader]); }, this); if (isXHRAsync) {
              xhr.timeout = options.timeout; var handleAs = options.handleAs;// If a JSON prefix is present, the responseType must be 'text' or the
              // browser won’t be able to parse the response.
              if (!!options.jsonPrefix || !handleAs) { handleAs = 'text'; }// In IE, `xhr.responseType` is an empty string when the response
              // returns. Hence, caching it as `xhr._responseType`.
              xhr.responseType = xhr._responseType = handleAs;// Cache the JSON prefix, if it exists.
              if (!!options.jsonPrefix) { xhr._jsonPrefix = options.jsonPrefix; }
            } xhr.withCredentials = !!options.withCredentials; var body = this._encodeBodyObject(options.body, headers['content-type']); xhr.send(/**
                   @type {ArrayBuffer|ArrayBufferView|Blob|Document|FormData|
                           null|string|undefined}
                 */body); return this.completes;
          },/**
     * Attempts to parse the response body of the XHR. If parsing succeeds,
     * the value returned will be deserialized based on the `responseType`
     * set on the XHR.
     *
     * @return {*} The parsed response,
     * or undefined if there was an empty response or parsing failed.
     */parseResponse: function parseResponse() {
            var xhr = this.xhr; var responseType = xhr.responseType || xhr._responseType; var preferResponseText = !this.xhr.responseType; var prefixLen = xhr._jsonPrefix && xhr._jsonPrefix.length || 0; try {
              switch (responseType) {
                case 'json':// If the xhr object doesn't have a natural `xhr.responseType`,
                  // we can assume that the browser hasn't parsed the response for us,
                  // and so parsing is our responsibility. Likewise if response is
                  // undefined, as there's no way to encode undefined in JSON.
                  if (preferResponseText || xhr.response === undefined) {// Try to emulate the JSON section of the response body section of
                    // the spec: https://xhr.spec.whatwg.org/#response-body
                    // That is to say, we try to parse as JSON, but if anything goes
                    // wrong return null.
                    try { return JSON.parse(xhr.responseText); } catch (_) { console.warn('Failed to parse JSON sent from ' + xhr.responseURL); return null; }
                  } return xhr.response; case 'xml': return xhr.responseXML; case 'blob': case 'document': case 'arraybuffer': return xhr.response; case 'text': default: {// If `prefixLen` is set, it implies the response should be parsed
                    // as JSON once the prefix of length `prefixLen` is stripped from
                    // it. Emulate the behavior above where null is returned on failure
                    // to parse.
                    if (prefixLen) { try { return JSON.parse(xhr.responseText.substring(prefixLen)); } catch (_) { console.warn('Failed to parse JSON sent from ' + xhr.responseURL); return null; } } return xhr.responseText;
                  }
              }
            } catch (e) { this.rejectCompletes(new Error('Could not parse response. ' + e.message)); }
          },/**
     * Aborts the request.
     */abort: function abort() { this._setAborted(true); this.xhr.abort(); },/**
     * @param {*} body The given body of the request to try and encode.
     * @param {?string} contentType The given content type, to infer an encoding
     *     from.
     * @return {*} Either the encoded body as a string, if successful,
     *     or the unaltered body object if no encoding could be inferred.
     */_encodeBodyObject: function _encodeBodyObject(body, contentType) {
            if (typeof body == 'string') {
              return body;// Already encoded.
            } var bodyObj =/** @type {Object} */body; switch (contentType) { case 'application/json': return JSON.stringify(bodyObj); case 'application/x-www-form-urlencoded': return this._wwwFormUrlEncode(bodyObj); }return body;
          },/**
     * @param {Object} object The object to encode as x-www-form-urlencoded.
     * @return {string} .
     */_wwwFormUrlEncode: function _wwwFormUrlEncode(object) {
            if (!object) { return ''; } var pieces = []; Object.keys(object).forEach(function (key) {// TODO(rictic): handle array values here, in a consistent way with
              //   iron-ajax params.
              pieces.push(this._wwwFormUrlEncodePiece(key) + '=' + this._wwwFormUrlEncodePiece(object[key]));
            }, this); return pieces.join('&');
          },/**
     * @param {*} str A key or value to encode as x-www-form-urlencoded.
     * @return {string} .
     */_wwwFormUrlEncodePiece: function _wwwFormUrlEncodePiece(str) {// Spec says to normalize newlines to \r\n and replace %20 spaces with +.
            // jQuery does this as well, so this is likely to be widely compatible.
            if (str === null || str === undefined || !str.toString) { return ''; } return encodeURIComponent(str.toString().replace(/\r?\n/g, '\r\n')).replace(/%20/g, '+');
          },/**
     * Updates the status code and status text.
     */_updateStatus: function _updateStatus() { this._setStatus(this.xhr.status); this._setStatusText(this.xhr.statusText === undefined ? '' : this.xhr.statusText); }
        }); Polymer({
          is: 'iron-ajax',/**
     * Fired before a request is sent.
     *
     * @event iron-ajax-presend
     */ /**
         * Fired when a request is sent.
         *
         * @event request
         */ /**
             * Fired when a request is sent.
             *
             * @event iron-ajax-request
             */ /**
                 * Fired when a response is received.
                 *
                 * @event response
                 */ /**
                     * Fired when a response is received.
                     *
                     * @event iron-ajax-response
                     */ /**
                         * Fired when an error is received.
                         *
                         * @event error
                         */ /**
                             * Fired when an error is received.
                             *
                             * @event iron-ajax-error
                             */hostAttributes: { hidden: true }, properties: {/**
       * The URL target of the request.
       */url: { type: String },/**
       * An object that contains query parameters to be appended to the
       * specified `url` when generating a request. If you wish to set the body
       * content when making a POST request, you should use the `body` property
       * instead.
       */params: { type: Object, value: function value() { return {}; } },/**
       * The HTTP method to use such as 'GET', 'POST', 'PUT', or 'DELETE'.
       * Default is 'GET'.
       */method: { type: String, value: 'GET' },/**
       * HTTP request headers to send.
       *
       * Example:
       *
       *     <iron-ajax
       *         auto
       *         url="http://somesite.com"
       *         headers='{"X-Requested-With": "XMLHttpRequest"}'
       *         handle-as="json"></iron-ajax>
       *
       * Note: setting a `Content-Type` header here will override the value
       * specified by the `contentType` property of this element.
       */headers: { type: Object, value: function value() { return {}; } },/**
       * Content type to use when sending data. If the `contentType` property
       * is set and a `Content-Type` header is specified in the `headers`
       * property, the `headers` property value will take precedence.
       *
       * Varies the handling of the `body` param.
       */contentType: { type: String, value: null },/**
       * Body content to send with the request, typically used with "POST"
       * requests.
       *
       * If body is a string it will be sent unmodified.
       *
       * If Content-Type is set to a value listed below, then
       * the body will be encoded accordingly.
       *
       *    * `content-type="application/json"`
       *      * body is encoded like `{"foo":"bar baz","x":1}`
       *    * `content-type="application/x-www-form-urlencoded"`
       *      * body is encoded like `foo=bar+baz&x=1`
       *
       * Otherwise the body will be passed to the browser unmodified, and it
       * will handle any encoding (e.g. for FormData, Blob, ArrayBuffer).
       *
       * @type
       * (ArrayBuffer|ArrayBufferView|Blob|Document|FormData|null|string|undefined|Object)
       */body: { type: Object, value: null },/**
       * Toggle whether XHR is synchronous or asynchronous. Don't change this
       * to true unless You Know What You Are Doing™.
       */sync: { type: Boolean, value: false },/**
       * Specifies what data to store in the `response` property, and
       * to deliver as `event.detail.response` in `response` events.
       *
       * One of:
       *
       *    `text`: uses `XHR.responseText`.
       *
       *    `xml`: uses `XHR.responseXML`.
       *
       *    `json`: uses `XHR.responseText` parsed as JSON.
       *
       *    `arraybuffer`: uses `XHR.response`.
       *
       *    `blob`: uses `XHR.response`.
       *
       *    `document`: uses `XHR.response`.
       */handleAs: { type: String, value: 'json' },/**
       * Set the withCredentials flag on the request.
       */withCredentials: { type: Boolean, value: false },/**
       * Set the timeout flag on the request.
       */timeout: { type: Number, value: 0 },/**
       * If true, automatically performs an Ajax request when either `url` or
       * `params` changes.
       */auto: { type: Boolean, value: false },/**
       * If true, error messages will automatically be logged to the console.
       */verbose: { type: Boolean, value: false },/**
       * The most recent request made by this iron-ajax element.
       *
       * @type {Object|undefined}
       */lastRequest: { type: Object, notify: true, readOnly: true },/**
       * The `progress` property of this element's `lastRequest`.
       *
       * @type {Object|undefined}
       */lastProgress: { type: Object, notify: true, readOnly: true },/**
       * True while lastRequest is in flight.
       */loading: { type: Boolean, notify: true, readOnly: true },/**
       * lastRequest's response.
       *
       * Note that lastResponse and lastError are set when lastRequest finishes,
       * so if loading is true, then lastResponse and lastError will correspond
       * to the result of the previous request.
       *
       * The type of the response is determined by the value of `handleAs` at
       * the time that the request was generated.
       *
       * @type {Object}
       */lastResponse: { type: Object, notify: true, readOnly: true },/**
       * lastRequest's error, if any.
       *
       * @type {Object}
       */lastError: { type: Object, notify: true, readOnly: true },/**
       * An Array of all in-flight requests originating from this iron-ajax
       * element.
       */activeRequests: { type: Array, notify: true, readOnly: true, value: function value() { return []; } },/**
       * Length of time in milliseconds to debounce multiple automatically
       * generated requests.
       */debounceDuration: { type: Number, value: 0, notify: true },/**
       * Prefix to be stripped from a JSON response before parsing it.
       *
       * In order to prevent an attack using CSRF with Array responses
       * (http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx/)
       * many backends will mitigate this by prefixing all JSON response bodies
       * with a string that would be nonsensical to a JavaScript parser.
       *
       */jsonPrefix: { type: String, value: '' },/**
       * By default, iron-ajax's events do not bubble. Setting this attribute will
       * cause its request and response events as well as its iron-ajax-request,
       * -response,  and -error events to bubble to the window object. The vanilla
       * error event never bubbles when using shadow dom even if this.bubbles is
       * true because a scoped flag is not passed with it (first link) and because
       * the shadow dom spec did not used to allow certain events, including
       * events named error, to leak outside of shadow trees (second link).
       * https://www.w3.org/TR/shadow-dom/#scoped-flag
       * https://www.w3.org/TR/2015/WD-shadow-dom-20151215/#events-that-are-not-leaked-into-ancestor-trees
       */bubbles: { type: Boolean, value: false },/**
       * Changes the [`completes`](iron-request#property-completes) promise chain
       * from `generateRequest` to reject with an object
       * containing the original request, as well an error message.
       * If false (default), the promise rejects with an error message only.
       */rejectWithRequest: { type: Boolean, value: false }, _boundHandleResponse: { type: Function, value: function value() { return this._handleResponse.bind(this); } }
          }, observers: ['_requestOptionsChanged(url, method, params.*, headers, contentType, ' + 'body, sync, handleAs, jsonPrefix, withCredentials, timeout, auto)'], created: function created() { this._boundOnProgressChanged = this._onProgressChanged.bind(this); },/**
     * The query string that should be appended to the `url`, serialized from
     * the current value of `params`.
     *
     * @return {string}
     */get queryString() { var queryParts = []; var param; var value; for (param in this.params) { value = this.params[param]; param = window.encodeURIComponent(param); if (Array.isArray(value)) { for (var i = 0; i < value.length; i++) { queryParts.push(param + '=' + window.encodeURIComponent(value[i])); } } else if (value !== null) { queryParts.push(param + '=' + window.encodeURIComponent(value)); } else { queryParts.push(param); } } return queryParts.join('&'); },/**
     * The `url` with query string (if `params` are specified), suitable for
     * providing to an `iron-request` instance.
     *
     * @return {string}
     */get requestUrl() { var queryString = this.queryString; var url = this.url || ''; if (queryString) { var bindingChar = url.indexOf('?') >= 0 ? '&' : '?'; return url + bindingChar + queryString; } return url; },/**
     * An object that maps header names to header values, first applying the
     * the value of `Content-Type` and then overlaying the headers specified
     * in the `headers` property.
     *
     * @return {Object}
     */get requestHeaders() { var headers = {}; var contentType = this.contentType; if (contentType == null && typeof this.body === 'string') { contentType = 'application/x-www-form-urlencoded'; } if (contentType) { headers['content-type'] = contentType; } var header; if (babelHelpers.typeof(this.headers) === 'object') { for (header in this.headers) { headers[header] = this.headers[header].toString(); } } return headers; }, _onProgressChanged: function _onProgressChanged(event) { this._setLastProgress(event.detail.value); },/**
     * Request options suitable for generating an `iron-request` instance based
     * on the current state of the `iron-ajax` instance's properties.
     *
     * @return {{
     *   url: string,
     *   method: (string|undefined),
     *   async: (boolean|undefined),
     *   body:
     * (ArrayBuffer|ArrayBufferView|Blob|Document|FormData|null|string|undefined|Object),
     *   headers: (Object|undefined),
     *   handleAs: (string|undefined),
     *   jsonPrefix: (string|undefined),
     *   withCredentials: (boolean|undefined)}}
     */toRequestOptions: function toRequestOptions() { return { url: this.requestUrl || '', method: this.method, headers: this.requestHeaders, body: this.body, async: !this.sync, handleAs: this.handleAs, jsonPrefix: this.jsonPrefix, withCredentials: this.withCredentials, timeout: this.timeout, rejectWithRequest: this.rejectWithRequest }; },/**
     * Performs an AJAX request to the specified URL.
     *
     * @return {!IronRequestElement}
     */generateRequest: function generateRequest() { var request =/** @type {!IronRequestElement} */document.createElement('iron-request'); var requestOptions = this.toRequestOptions(); this.push('activeRequests', request); request.completes.then(this._boundHandleResponse).catch(this._handleError.bind(this, request)).then(this._discardRequest.bind(this, request)); var evt = this.fire('iron-ajax-presend', { request: request, options: requestOptions }, { bubbles: this.bubbles, cancelable: true }); if (evt.defaultPrevented) { request.abort(); request.rejectCompletes(request); return request; } if (this.lastRequest) { this.lastRequest.removeEventListener('iron-request-progress-changed', this._boundOnProgressChanged); } request.addEventListener('iron-request-progress-changed', this._boundOnProgressChanged); request.send(requestOptions); this._setLastProgress(null); this._setLastRequest(request); this._setLoading(true); this.fire('request', { request: request, options: requestOptions }, { bubbles: this.bubbles, composed: true }); this.fire('iron-ajax-request', { request: request, options: requestOptions }, { bubbles: this.bubbles, composed: true }); return request; }, _handleResponse: function _handleResponse(request) { if (request === this.lastRequest) { this._setLastResponse(request.response); this._setLastError(null); this._setLoading(false); } this.fire('response', request, { bubbles: this.bubbles, composed: true }); this.fire('iron-ajax-response', request, { bubbles: this.bubbles, composed: true }); }, _handleError: function _handleError(request, error) {
            if (this.verbose) { Base._error(error); } if (request === this.lastRequest) { this._setLastError({ request: request, error: error, status: request.xhr.status, statusText: request.xhr.statusText, response: request.xhr.response }); this._setLastResponse(null); this._setLoading(false); }// Tests fail if this goes after the normal this.fire('error', ...)
            this.fire('iron-ajax-error', { request: request, error: error }, { bubbles: this.bubbles, composed: true }); this.fire('error', { request: request, error: error }, { bubbles: this.bubbles, composed: true });
          }, _discardRequest: function _discardRequest(request) { var requestIndex = this.activeRequests.indexOf(request); if (requestIndex > -1) { this.splice('activeRequests', requestIndex, 1); } }, _requestOptionsChanged: function _requestOptionsChanged() { this.debounce('generate-request', function () { if (this.url == null) { return; } if (this.auto) { this.generateRequest(); } }, this.debounceDuration); }
        });/*
      Copyright (c) 2014, Yahoo! Inc. All rights reserved.
      Copyrights licensed under the New BSD License.
      See the accompanying LICENSE file for terms.
      */ /* jslint esnext: true */var hop = Object.prototype.hasOwnProperty; function extend(obj) { var sources = Array.prototype.slice.call(arguments, 1), i, len, source, key; for (i = 0, len = sources.length; i < len; i += 1) { source = sources[i]; if (!source) { continue; } for (key in source) { if (hop.call(source, key)) { obj[key] = source[key]; } } } return obj; }// Copyright 2013 Andy Earnshaw, MIT License
        var realDefineProp = function () { try { return !!Object.defineProperty({}, 'a', {}); } catch (e) { return false; } }(); var es3 = !realDefineProp && !Object.prototype.__defineGetter__; var defineProperty = realDefineProp ? Object.defineProperty : function (obj, name, desc) { if ('get' in desc && obj.__defineGetter__) { obj.__defineGetter__(name, desc.get); } else if (!hop.call(obj, name) || 'value' in desc) { obj[name] = desc.value; } }; var objCreate = Object.create || function (proto, props) { var obj, k; function F() { } F.prototype = proto; obj = new F(); for (k in props) { if (hop.call(props, k)) { defineProperty(obj, k, props[k]); } } return obj; }; function Compiler(locales, formats, pluralFn) { this.locales = locales; this.formats = formats; this.pluralFn = pluralFn; } Compiler.prototype.compile = function (ast) { this.pluralStack = []; this.currentPlural = null; this.pluralNumberFormat = null; return this.compileMessage(ast); }; Compiler.prototype.compileMessage = function (ast) { if (!(ast && ast.type === 'messageFormatPattern')) { throw new Error('Message AST is not of type: "messageFormatPattern"'); } var elements = ast.elements, pattern = []; var i, len, element; for (i = 0, len = elements.length; i < len; i += 1) { element = elements[i]; switch (element.type) { case 'messageTextElement': pattern.push(this.compileMessageText(element)); break; case 'argumentElement': pattern.push(this.compileArgument(element)); break; default: throw new Error('Message element does not have a valid type'); } } return pattern; }; Compiler.prototype.compileMessageText = function (element) {// When this `element` is part of plural sub-pattern and its value contains
          // an unescaped '#', use a `PluralOffsetString` helper to properly output
          // the number with the correct offset in the string.
          if (this.currentPlural && /(^|[^\\])#/g.test(element.value)) {// Create a cache a NumberFormat instance that can be reused for any
            // PluralOffsetString instance in this message.
            if (!this.pluralNumberFormat) { this.pluralNumberFormat = new Intl.NumberFormat(this.locales); } return new PluralOffsetString(this.currentPlural.id, this.currentPlural.format.offset, this.pluralNumberFormat, element.value);
          }// Unescape the escaped '#'s in the message text.
          return element.value.replace(/\\#/g, '#');
        }; Compiler.prototype.compileArgument = function (element) { var format = element.format; if (!format) { return new StringFormat(element.id); } var formats = this.formats, locales = this.locales, pluralFn = this.pluralFn, options; switch (format.type) { case 'numberFormat': options = formats.number[format.style]; return { id: element.id, format: new Intl.NumberFormat(locales, options).format }; case 'dateFormat': options = formats.date[format.style]; return { id: element.id, format: new Intl.DateTimeFormat(locales, options).format }; case 'timeFormat': options = formats.time[format.style]; return { id: element.id, format: new Intl.DateTimeFormat(locales, options).format }; case 'pluralFormat': options = this.compileOptions(element); return new PluralFormat(element.id, format.ordinal, format.offset, options, pluralFn); case 'selectFormat': options = this.compileOptions(element); return new SelectFormat(element.id, options); default: throw new Error('Message element does not have a valid format type'); } }; Compiler.prototype.compileOptions = function (element) {
          var format = element.format, options = format.options, optionsHash = {};// Save the current plural element, if any, then set it to a new value when
          // compiling the options sub-patterns. This conforms the spec's algorithm
          // for handling `"#"` syntax in message text.
          this.pluralStack.push(this.currentPlural); this.currentPlural = format.type === 'pluralFormat' ? element : null; var i, len, option; for (i = 0, len = options.length; i < len; i += 1) {
            option = options[i];// Compile the sub-pattern and save it under the options's selector.
            optionsHash[option.selector] = this.compileMessage(option.value);
          }// Pop the plural stack to put back the original current plural value.
          this.currentPlural = this.pluralStack.pop(); return optionsHash;
        };// -- Compiler Helper Classes --------------------------------------------------
        function StringFormat(id) { this.id = id; } StringFormat.prototype.format = function (value) { if (!value && typeof value !== 'number') { return ''; } return typeof value === 'string' ? value : String(value); }; function PluralFormat(id, useOrdinal, offset, options, pluralFn) { this.id = id; this.useOrdinal = useOrdinal; this.offset = offset; this.options = options; this.pluralFn = pluralFn; } PluralFormat.prototype.getOption = function (value) { var options = this.options; var option = options['=' + value] || options[this.pluralFn(value - this.offset, this.useOrdinal)]; return option || options.other; }; function PluralOffsetString(id, offset, numberFormat, string) { this.id = id; this.offset = offset; this.numberFormat = numberFormat; this.string = string; } PluralOffsetString.prototype.format = function (value) { var number = this.numberFormat.format(value - this.offset); return this.string.replace(/(^|[^\\])#/g, '$1' + number).replace(/\\#/g, '#'); }; function SelectFormat(id, options) { this.id = id; this.options = options; } SelectFormat.prototype.getOption = function (value) { var options = this.options; return options[value] || options.other; }; var parser = function () {
          "use strict";/*
                   * Generated by PEG.js 0.9.0.
                   *
                   * http://pegjs.org/
                   */function peg$subclass(child, parent) { function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); } function peg$SyntaxError(message, expected, found, location) { this.message = message; this.expected = expected; this.found = found; this.location = location; this.name = "SyntaxError"; if (typeof Error.captureStackTrace === "function") { Error.captureStackTrace(this, peg$SyntaxError); } } peg$subclass(peg$SyntaxError, Error); function peg$parse(input) { var options = arguments.length > 1 ? arguments[1] : {}, parser = this, peg$FAILED = {}, peg$startRuleFunctions = { start: peg$parsestart }, peg$startRuleFunction = peg$parsestart, peg$c0 = function peg$c0(elements) { return { type: 'messageFormatPattern', elements: elements, location: location() }; }, peg$c1 = function peg$c1(text) { var string = '', i, j, outerLen, inner, innerLen; for (i = 0, outerLen = text.length; i < outerLen; i += 1) { inner = text[i]; for (j = 0, innerLen = inner.length; j < innerLen; j += 1) { string += inner[j]; } } return string; }, peg$c2 = function peg$c2(messageText) { return { type: 'messageTextElement', value: messageText, location: location() }; }, peg$c3 = /^[^ \t\n\r,.+={}#]/, peg$c4 = { type: "class", value: "[^ \\t\\n\\r,.+={}#]", description: "[^ \\t\\n\\r,.+={}#]" }, peg$c5 = "{", peg$c6 = { type: "literal", value: "{", description: "\"{\"" }, peg$c7 = ",", peg$c8 = { type: "literal", value: ",", description: "\",\"" }, peg$c9 = "}", peg$c10 = { type: "literal", value: "}", description: "\"}\"" }, peg$c11 = function peg$c11(id, format) { return { type: 'argumentElement', id: id, format: format && format[2], location: location() }; }, peg$c12 = "number", peg$c13 = { type: "literal", value: "number", description: "\"number\"" }, peg$c14 = "date", peg$c15 = { type: "literal", value: "date", description: "\"date\"" }, peg$c16 = "time", peg$c17 = { type: "literal", value: "time", description: "\"time\"" }, peg$c18 = function peg$c18(type, style) { return { type: type + 'Format', style: style && style[2], location: location() }; }, peg$c19 = "plural", peg$c20 = { type: "literal", value: "plural", description: "\"plural\"" }, peg$c21 = function peg$c21(pluralStyle) { return { type: pluralStyle.type, ordinal: false, offset: pluralStyle.offset || 0, options: pluralStyle.options, location: location() }; }, peg$c22 = "selectordinal", peg$c23 = { type: "literal", value: "selectordinal", description: "\"selectordinal\"" }, peg$c24 = function peg$c24(pluralStyle) { return { type: pluralStyle.type, ordinal: true, offset: pluralStyle.offset || 0, options: pluralStyle.options, location: location() }; }, peg$c25 = "select", peg$c26 = { type: "literal", value: "select", description: "\"select\"" }, peg$c27 = function peg$c27(options) { return { type: 'selectFormat', options: options, location: location() }; }, peg$c28 = "=", peg$c29 = { type: "literal", value: "=", description: "\"=\"" }, peg$c30 = function peg$c30(selector, pattern) { return { type: 'optionalFormatPattern', selector: selector, value: pattern, location: location() }; }, peg$c31 = "offset:", peg$c32 = { type: "literal", value: "offset:", description: "\"offset:\"" }, peg$c33 = function peg$c33(number) { return number; }, peg$c34 = function peg$c34(offset, options) { return { type: 'pluralFormat', offset: offset, options: options, location: location() }; }, peg$c35 = { type: "other", description: "whitespace" }, peg$c36 = /^[ \t\n\r]/, peg$c37 = { type: "class", value: "[ \\t\\n\\r]", description: "[ \\t\\n\\r]" }, peg$c38 = { type: "other", description: "optionalWhitespace" }, peg$c39 = /^[0-9]/, peg$c40 = { type: "class", value: "[0-9]", description: "[0-9]" }, peg$c41 = /^[0-9a-f]/i, peg$c42 = { type: "class", value: "[0-9a-f]i", description: "[0-9a-f]i" }, peg$c43 = "0", peg$c44 = { type: "literal", value: "0", description: "\"0\"" }, peg$c45 = /^[1-9]/, peg$c46 = { type: "class", value: "[1-9]", description: "[1-9]" }, peg$c47 = function peg$c47(digits) { return parseInt(digits, 10); }, peg$c48 = /^[^{}\\\0-\x1F \t\n\r]/, peg$c49 = { type: "class", value: "[^{}\\\\\\0-\\x1F\\x7f \\t\\n\\r]", description: "[^{}\\\\\\0-\\x1F\\x7f \\t\\n\\r]" }, peg$c50 = "\\\\", peg$c51 = { type: "literal", value: "\\\\", description: "\"\\\\\\\\\"" }, peg$c52 = function peg$c52() { return '\\'; }, peg$c53 = "\\#", peg$c54 = { type: "literal", value: "\\#", description: "\"\\\\#\"" }, peg$c55 = function peg$c55() { return '\\#'; }, peg$c56 = "\\{", peg$c57 = { type: "literal", value: "\\{", description: "\"\\\\{\"" }, peg$c58 = function peg$c58() { return "{"; }, peg$c59 = "\\}", peg$c60 = { type: "literal", value: "\\}", description: "\"\\\\}\"" }, peg$c61 = function peg$c61() { return "}"; }, peg$c62 = "\\u", peg$c63 = { type: "literal", value: "\\u", description: "\"\\\\u\"" }, peg$c64 = function peg$c64(digits) { return String.fromCharCode(parseInt(digits, 16)); }, peg$c65 = function peg$c65(chars) { return chars.join(''); }, peg$currPos = 0, peg$savedPos = 0, peg$posDetailsCache = [{ line: 1, column: 1, seenCR: false }], peg$maxFailPos = 0, peg$maxFailExpected = [], peg$silentFails = 0, peg$result; if ("startRule" in options) { if (!(options.startRule in peg$startRuleFunctions)) { throw new Error("Can't start parsing from rule \"" + options.startRule + "\"."); } peg$startRuleFunction = peg$startRuleFunctions[options.startRule]; } function text() { return input.substring(peg$savedPos, peg$currPos); } function location() { return peg$computeLocation(peg$savedPos, peg$currPos); } function expected(description) { throw peg$buildException(null, [{ type: "other", description: description }], input.substring(peg$savedPos, peg$currPos), peg$computeLocation(peg$savedPos, peg$currPos)); } function error(message) { throw peg$buildException(message, null, input.substring(peg$savedPos, peg$currPos), peg$computeLocation(peg$savedPos, peg$currPos)); } function peg$computePosDetails(pos) { var details = peg$posDetailsCache[pos], p, ch; if (details) { return details; } else { p = pos - 1; while (!peg$posDetailsCache[p]) { p--; } details = peg$posDetailsCache[p]; details = { line: details.line, column: details.column, seenCR: details.seenCR }; while (p < pos) { ch = input.charAt(p); if (ch === "\n") { if (!details.seenCR) { details.line++; } details.column = 1; details.seenCR = false; } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") { details.line++; details.column = 1; details.seenCR = true; } else { details.column++; details.seenCR = false; } p++; } peg$posDetailsCache[pos] = details; return details; } } function peg$computeLocation(startPos, endPos) { var startPosDetails = peg$computePosDetails(startPos), endPosDetails = peg$computePosDetails(endPos); return { start: { offset: startPos, line: startPosDetails.line, column: startPosDetails.column }, end: { offset: endPos, line: endPosDetails.line, column: endPosDetails.column } }; } function peg$fail(expected) { if (peg$currPos < peg$maxFailPos) { return; } if (peg$currPos > peg$maxFailPos) { peg$maxFailPos = peg$currPos; peg$maxFailExpected = []; } peg$maxFailExpected.push(expected); } function peg$buildException(message, expected, found, location) { function cleanupExpected(expected) { var i = 1; expected.sort(function (a, b) { if (a.description < b.description) { return -1; } else if (a.description > b.description) { return 1; } else { return 0; } }); while (i < expected.length) { if (expected[i - 1] === expected[i]) { expected.splice(i, 1); } else { i++; } } } function buildMessage(expected, found) { function stringEscape(s) { function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); } return s.replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\x08/g, '\\b').replace(/\t/g, '\\t').replace(/\n/g, '\\n').replace(/\f/g, '\\f').replace(/\r/g, '\\r').replace(/[\x00-\x07\x0B\x0E\x0F]/g, function (ch) { return '\\x0' + hex(ch); }).replace(/[\x10-\x1F\x80-\xFF]/g, function (ch) { return '\\x' + hex(ch); }).replace(/[\u0100-\u0FFF]/g, function (ch) { return "\\u0" + hex(ch); }).replace(/[\u1000-\uFFFF]/g, function (ch) { return "\\u" + hex(ch); }); } var expectedDescs = new Array(expected.length), expectedDesc, foundDesc, i; for (i = 0; i < expected.length; i++) { expectedDescs[i] = expected[i].description; } expectedDesc = expected.length > 1 ? expectedDescs.slice(0, -1).join(", ") + " or " + expectedDescs[expected.length - 1] : expectedDescs[0]; foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input"; return "Expected " + expectedDesc + " but " + foundDesc + " found."; } if (expected !== null) { cleanupExpected(expected); } return new peg$SyntaxError(message !== null ? message : buildMessage(expected, found), expected, found, location); } function peg$parsestart() { var s0; s0 = peg$parsemessageFormatPattern(); return s0; } function peg$parsemessageFormatPattern() { var s0, s1, s2; s0 = peg$currPos; s1 = []; s2 = peg$parsemessageFormatElement(); while (s2 !== peg$FAILED) { s1.push(s2); s2 = peg$parsemessageFormatElement(); } if (s1 !== peg$FAILED) { peg$savedPos = s0; s1 = peg$c0(s1); } s0 = s1; return s0; } function peg$parsemessageFormatElement() { var s0; s0 = peg$parsemessageTextElement(); if (s0 === peg$FAILED) { s0 = peg$parseargumentElement(); } return s0; } function peg$parsemessageText() { var s0, s1, s2, s3, s4, s5; s0 = peg$currPos; s1 = []; s2 = peg$currPos; s3 = peg$parse_(); if (s3 !== peg$FAILED) { s4 = peg$parsechars(); if (s4 !== peg$FAILED) { s5 = peg$parse_(); if (s5 !== peg$FAILED) { s3 = [s3, s4, s5]; s2 = s3; } else { peg$currPos = s2; s2 = peg$FAILED; } } else { peg$currPos = s2; s2 = peg$FAILED; } } else { peg$currPos = s2; s2 = peg$FAILED; } if (s2 !== peg$FAILED) { while (s2 !== peg$FAILED) { s1.push(s2); s2 = peg$currPos; s3 = peg$parse_(); if (s3 !== peg$FAILED) { s4 = peg$parsechars(); if (s4 !== peg$FAILED) { s5 = peg$parse_(); if (s5 !== peg$FAILED) { s3 = [s3, s4, s5]; s2 = s3; } else { peg$currPos = s2; s2 = peg$FAILED; } } else { peg$currPos = s2; s2 = peg$FAILED; } } else { peg$currPos = s2; s2 = peg$FAILED; } } } else { s1 = peg$FAILED; } if (s1 !== peg$FAILED) { peg$savedPos = s0; s1 = peg$c1(s1); } s0 = s1; if (s0 === peg$FAILED) { s0 = peg$currPos; s1 = peg$parsews(); if (s1 !== peg$FAILED) { s0 = input.substring(s0, peg$currPos); } else { s0 = s1; } } return s0; } function peg$parsemessageTextElement() { var s0, s1; s0 = peg$currPos; s1 = peg$parsemessageText(); if (s1 !== peg$FAILED) { peg$savedPos = s0; s1 = peg$c2(s1); } s0 = s1; return s0; } function peg$parseargument() { var s0, s1, s2; s0 = peg$parsenumber(); if (s0 === peg$FAILED) { s0 = peg$currPos; s1 = []; if (peg$c3.test(input.charAt(peg$currPos))) { s2 = input.charAt(peg$currPos); peg$currPos++; } else { s2 = peg$FAILED; if (peg$silentFails === 0) { peg$fail(peg$c4); } } if (s2 !== peg$FAILED) { while (s2 !== peg$FAILED) { s1.push(s2); if (peg$c3.test(input.charAt(peg$currPos))) { s2 = input.charAt(peg$currPos); peg$currPos++; } else { s2 = peg$FAILED; if (peg$silentFails === 0) { peg$fail(peg$c4); } } } } else { s1 = peg$FAILED; } if (s1 !== peg$FAILED) { s0 = input.substring(s0, peg$currPos); } else { s0 = s1; } } return s0; } function peg$parseargumentElement() { var s0, s1, s2, s3, s4, s5, s6, s7, s8; s0 = peg$currPos; if (input.charCodeAt(peg$currPos) === 123) { s1 = peg$c5; peg$currPos++; } else { s1 = peg$FAILED; if (peg$silentFails === 0) { peg$fail(peg$c6); } } if (s1 !== peg$FAILED) { s2 = peg$parse_(); if (s2 !== peg$FAILED) { s3 = peg$parseargument(); if (s3 !== peg$FAILED) { s4 = peg$parse_(); if (s4 !== peg$FAILED) { s5 = peg$currPos; if (input.charCodeAt(peg$currPos) === 44) { s6 = peg$c7; peg$currPos++; } else { s6 = peg$FAILED; if (peg$silentFails === 0) { peg$fail(peg$c8); } } if (s6 !== peg$FAILED) { s7 = peg$parse_(); if (s7 !== peg$FAILED) { s8 = peg$parseelementFormat(); if (s8 !== peg$FAILED) { s6 = [s6, s7, s8]; s5 = s6; } else { peg$currPos = s5; s5 = peg$FAILED; } } else { peg$currPos = s5; s5 = peg$FAILED; } } else { peg$currPos = s5; s5 = peg$FAILED; } if (s5 === peg$FAILED) { s5 = null; } if (s5 !== peg$FAILED) { s6 = peg$parse_(); if (s6 !== peg$FAILED) { if (input.charCodeAt(peg$currPos) === 125) { s7 = peg$c9; peg$currPos++; } else { s7 = peg$FAILED; if (peg$silentFails === 0) { peg$fail(peg$c10); } } if (s7 !== peg$FAILED) { peg$savedPos = s0; s1 = peg$c11(s3, s5); s0 = s1; } else { peg$currPos = s0; s0 = peg$FAILED; } } else { peg$currPos = s0; s0 = peg$FAILED; } } else { peg$currPos = s0; s0 = peg$FAILED; } } else { peg$currPos = s0; s0 = peg$FAILED; } } else { peg$currPos = s0; s0 = peg$FAILED; } } else { peg$currPos = s0; s0 = peg$FAILED; } } else { peg$currPos = s0; s0 = peg$FAILED; } return s0; } function peg$parseelementFormat() { var s0; s0 = peg$parsesimpleFormat(); if (s0 === peg$FAILED) { s0 = peg$parsepluralFormat(); if (s0 === peg$FAILED) { s0 = peg$parseselectOrdinalFormat(); if (s0 === peg$FAILED) { s0 = peg$parseselectFormat(); } } } return s0; } function peg$parsesimpleFormat() { var s0, s1, s2, s3, s4, s5, s6; s0 = peg$currPos; if (input.substr(peg$currPos, 6) === peg$c12) { s1 = peg$c12; peg$currPos += 6; } else { s1 = peg$FAILED; if (peg$silentFails === 0) { peg$fail(peg$c13); } } if (s1 === peg$FAILED) { if (input.substr(peg$currPos, 4) === peg$c14) { s1 = peg$c14; peg$currPos += 4; } else { s1 = peg$FAILED; if (peg$silentFails === 0) { peg$fail(peg$c15); } } if (s1 === peg$FAILED) { if (input.substr(peg$currPos, 4) === peg$c16) { s1 = peg$c16; peg$currPos += 4; } else { s1 = peg$FAILED; if (peg$silentFails === 0) { peg$fail(peg$c17); } } } } if (s1 !== peg$FAILED) { s2 = peg$parse_(); if (s2 !== peg$FAILED) { s3 = peg$currPos; if (input.charCodeAt(peg$currPos) === 44) { s4 = peg$c7; peg$currPos++; } else { s4 = peg$FAILED; if (peg$silentFails === 0) { peg$fail(peg$c8); } } if (s4 !== peg$FAILED) { s5 = peg$parse_(); if (s5 !== peg$FAILED) { s6 = peg$parsechars(); if (s6 !== peg$FAILED) { s4 = [s4, s5, s6]; s3 = s4; } else { peg$currPos = s3; s3 = peg$FAILED; } } else { peg$currPos = s3; s3 = peg$FAILED; } } else { peg$currPos = s3; s3 = peg$FAILED; } if (s3 === peg$FAILED) { s3 = null; } if (s3 !== peg$FAILED) { peg$savedPos = s0; s1 = peg$c18(s1, s3); s0 = s1; } else { peg$currPos = s0; s0 = peg$FAILED; } } else { peg$currPos = s0; s0 = peg$FAILED; } } else { peg$currPos = s0; s0 = peg$FAILED; } return s0; } function peg$parsepluralFormat() { var s0, s1, s2, s3, s4, s5; s0 = peg$currPos; if (input.substr(peg$currPos, 6) === peg$c19) { s1 = peg$c19; peg$currPos += 6; } else { s1 = peg$FAILED; if (peg$silentFails === 0) { peg$fail(peg$c20); } } if (s1 !== peg$FAILED) { s2 = peg$parse_(); if (s2 !== peg$FAILED) { if (input.charCodeAt(peg$currPos) === 44) { s3 = peg$c7; peg$currPos++; } else { s3 = peg$FAILED; if (peg$silentFails === 0) { peg$fail(peg$c8); } } if (s3 !== peg$FAILED) { s4 = peg$parse_(); if (s4 !== peg$FAILED) { s5 = peg$parsepluralStyle(); if (s5 !== peg$FAILED) { peg$savedPos = s0; s1 = peg$c21(s5); s0 = s1; } else { peg$currPos = s0; s0 = peg$FAILED; } } else { peg$currPos = s0; s0 = peg$FAILED; } } else { peg$currPos = s0; s0 = peg$FAILED; } } else { peg$currPos = s0; s0 = peg$FAILED; } } else { peg$currPos = s0; s0 = peg$FAILED; } return s0; } function peg$parseselectOrdinalFormat() { var s0, s1, s2, s3, s4, s5; s0 = peg$currPos; if (input.substr(peg$currPos, 13) === peg$c22) { s1 = peg$c22; peg$currPos += 13; } else { s1 = peg$FAILED; if (peg$silentFails === 0) { peg$fail(peg$c23); } } if (s1 !== peg$FAILED) { s2 = peg$parse_(); if (s2 !== peg$FAILED) { if (input.charCodeAt(peg$currPos) === 44) { s3 = peg$c7; peg$currPos++; } else { s3 = peg$FAILED; if (peg$silentFails === 0) { peg$fail(peg$c8); } } if (s3 !== peg$FAILED) { s4 = peg$parse_(); if (s4 !== peg$FAILED) { s5 = peg$parsepluralStyle(); if (s5 !== peg$FAILED) { peg$savedPos = s0; s1 = peg$c24(s5); s0 = s1; } else { peg$currPos = s0; s0 = peg$FAILED; } } else { peg$currPos = s0; s0 = peg$FAILED; } } else { peg$currPos = s0; s0 = peg$FAILED; } } else { peg$currPos = s0; s0 = peg$FAILED; } } else { peg$currPos = s0; s0 = peg$FAILED; } return s0; } function peg$parseselectFormat() { var s0, s1, s2, s3, s4, s5, s6; s0 = peg$currPos; if (input.substr(peg$currPos, 6) === peg$c25) { s1 = peg$c25; peg$currPos += 6; } else { s1 = peg$FAILED; if (peg$silentFails === 0) { peg$fail(peg$c26); } } if (s1 !== peg$FAILED) { s2 = peg$parse_(); if (s2 !== peg$FAILED) { if (input.charCodeAt(peg$currPos) === 44) { s3 = peg$c7; peg$currPos++; } else { s3 = peg$FAILED; if (peg$silentFails === 0) { peg$fail(peg$c8); } } if (s3 !== peg$FAILED) { s4 = peg$parse_(); if (s4 !== peg$FAILED) { s5 = []; s6 = peg$parseoptionalFormatPattern(); if (s6 !== peg$FAILED) { while (s6 !== peg$FAILED) { s5.push(s6); s6 = peg$parseoptionalFormatPattern(); } } else { s5 = peg$FAILED; } if (s5 !== peg$FAILED) { peg$savedPos = s0; s1 = peg$c27(s5); s0 = s1; } else { peg$currPos = s0; s0 = peg$FAILED; } } else { peg$currPos = s0; s0 = peg$FAILED; } } else { peg$currPos = s0; s0 = peg$FAILED; } } else { peg$currPos = s0; s0 = peg$FAILED; } } else { peg$currPos = s0; s0 = peg$FAILED; } return s0; } function peg$parseselector() { var s0, s1, s2, s3; s0 = peg$currPos; s1 = peg$currPos; if (input.charCodeAt(peg$currPos) === 61) { s2 = peg$c28; peg$currPos++; } else { s2 = peg$FAILED; if (peg$silentFails === 0) { peg$fail(peg$c29); } } if (s2 !== peg$FAILED) { s3 = peg$parsenumber(); if (s3 !== peg$FAILED) { s2 = [s2, s3]; s1 = s2; } else { peg$currPos = s1; s1 = peg$FAILED; } } else { peg$currPos = s1; s1 = peg$FAILED; } if (s1 !== peg$FAILED) { s0 = input.substring(s0, peg$currPos); } else { s0 = s1; } if (s0 === peg$FAILED) { s0 = peg$parsechars(); } return s0; } function peg$parseoptionalFormatPattern() { var s0, s1, s2, s3, s4, s5, s6, s7, s8; s0 = peg$currPos; s1 = peg$parse_(); if (s1 !== peg$FAILED) { s2 = peg$parseselector(); if (s2 !== peg$FAILED) { s3 = peg$parse_(); if (s3 !== peg$FAILED) { if (input.charCodeAt(peg$currPos) === 123) { s4 = peg$c5; peg$currPos++; } else { s4 = peg$FAILED; if (peg$silentFails === 0) { peg$fail(peg$c6); } } if (s4 !== peg$FAILED) { s5 = peg$parse_(); if (s5 !== peg$FAILED) { s6 = peg$parsemessageFormatPattern(); if (s6 !== peg$FAILED) { s7 = peg$parse_(); if (s7 !== peg$FAILED) { if (input.charCodeAt(peg$currPos) === 125) { s8 = peg$c9; peg$currPos++; } else { s8 = peg$FAILED; if (peg$silentFails === 0) { peg$fail(peg$c10); } } if (s8 !== peg$FAILED) { peg$savedPos = s0; s1 = peg$c30(s2, s6); s0 = s1; } else { peg$currPos = s0; s0 = peg$FAILED; } } else { peg$currPos = s0; s0 = peg$FAILED; } } else { peg$currPos = s0; s0 = peg$FAILED; } } else { peg$currPos = s0; s0 = peg$FAILED; } } else { peg$currPos = s0; s0 = peg$FAILED; } } else { peg$currPos = s0; s0 = peg$FAILED; } } else { peg$currPos = s0; s0 = peg$FAILED; } } else { peg$currPos = s0; s0 = peg$FAILED; } return s0; } function peg$parseoffset() { var s0, s1, s2, s3; s0 = peg$currPos; if (input.substr(peg$currPos, 7) === peg$c31) { s1 = peg$c31; peg$currPos += 7; } else { s1 = peg$FAILED; if (peg$silentFails === 0) { peg$fail(peg$c32); } } if (s1 !== peg$FAILED) { s2 = peg$parse_(); if (s2 !== peg$FAILED) { s3 = peg$parsenumber(); if (s3 !== peg$FAILED) { peg$savedPos = s0; s1 = peg$c33(s3); s0 = s1; } else { peg$currPos = s0; s0 = peg$FAILED; } } else { peg$currPos = s0; s0 = peg$FAILED; } } else { peg$currPos = s0; s0 = peg$FAILED; } return s0; } function peg$parsepluralStyle() { var s0, s1, s2, s3, s4; s0 = peg$currPos; s1 = peg$parseoffset(); if (s1 === peg$FAILED) { s1 = null; } if (s1 !== peg$FAILED) { s2 = peg$parse_(); if (s2 !== peg$FAILED) { s3 = []; s4 = peg$parseoptionalFormatPattern(); if (s4 !== peg$FAILED) { while (s4 !== peg$FAILED) { s3.push(s4); s4 = peg$parseoptionalFormatPattern(); } } else { s3 = peg$FAILED; } if (s3 !== peg$FAILED) { peg$savedPos = s0; s1 = peg$c34(s1, s3); s0 = s1; } else { peg$currPos = s0; s0 = peg$FAILED; } } else { peg$currPos = s0; s0 = peg$FAILED; } } else { peg$currPos = s0; s0 = peg$FAILED; } return s0; } function peg$parsews() { var s0, s1; peg$silentFails++; s0 = []; if (peg$c36.test(input.charAt(peg$currPos))) { s1 = input.charAt(peg$currPos); peg$currPos++; } else { s1 = peg$FAILED; if (peg$silentFails === 0) { peg$fail(peg$c37); } } if (s1 !== peg$FAILED) { while (s1 !== peg$FAILED) { s0.push(s1); if (peg$c36.test(input.charAt(peg$currPos))) { s1 = input.charAt(peg$currPos); peg$currPos++; } else { s1 = peg$FAILED; if (peg$silentFails === 0) { peg$fail(peg$c37); } } } } else { s0 = peg$FAILED; } peg$silentFails--; if (s0 === peg$FAILED) { s1 = peg$FAILED; if (peg$silentFails === 0) { peg$fail(peg$c35); } } return s0; } function peg$parse_() { var s0, s1, s2; peg$silentFails++; s0 = peg$currPos; s1 = []; s2 = peg$parsews(); while (s2 !== peg$FAILED) { s1.push(s2); s2 = peg$parsews(); } if (s1 !== peg$FAILED) { s0 = input.substring(s0, peg$currPos); } else { s0 = s1; } peg$silentFails--; if (s0 === peg$FAILED) { s1 = peg$FAILED; if (peg$silentFails === 0) { peg$fail(peg$c38); } } return s0; } function peg$parsedigit() { var s0; if (peg$c39.test(input.charAt(peg$currPos))) { s0 = input.charAt(peg$currPos); peg$currPos++; } else { s0 = peg$FAILED; if (peg$silentFails === 0) { peg$fail(peg$c40); } } return s0; } function peg$parsehexDigit() { var s0; if (peg$c41.test(input.charAt(peg$currPos))) { s0 = input.charAt(peg$currPos); peg$currPos++; } else { s0 = peg$FAILED; if (peg$silentFails === 0) { peg$fail(peg$c42); } } return s0; } function peg$parsenumber() { var s0, s1, s2, s3, s4, s5; s0 = peg$currPos; if (input.charCodeAt(peg$currPos) === 48) { s1 = peg$c43; peg$currPos++; } else { s1 = peg$FAILED; if (peg$silentFails === 0) { peg$fail(peg$c44); } } if (s1 === peg$FAILED) { s1 = peg$currPos; s2 = peg$currPos; if (peg$c45.test(input.charAt(peg$currPos))) { s3 = input.charAt(peg$currPos); peg$currPos++; } else { s3 = peg$FAILED; if (peg$silentFails === 0) { peg$fail(peg$c46); } } if (s3 !== peg$FAILED) { s4 = []; s5 = peg$parsedigit(); while (s5 !== peg$FAILED) { s4.push(s5); s5 = peg$parsedigit(); } if (s4 !== peg$FAILED) { s3 = [s3, s4]; s2 = s3; } else { peg$currPos = s2; s2 = peg$FAILED; } } else { peg$currPos = s2; s2 = peg$FAILED; } if (s2 !== peg$FAILED) { s1 = input.substring(s1, peg$currPos); } else { s1 = s2; } } if (s1 !== peg$FAILED) { peg$savedPos = s0; s1 = peg$c47(s1); } s0 = s1; return s0; } function peg$parsechar() { var s0, s1, s2, s3, s4, s5, s6, s7; if (peg$c48.test(input.charAt(peg$currPos))) { s0 = input.charAt(peg$currPos); peg$currPos++; } else { s0 = peg$FAILED; if (peg$silentFails === 0) { peg$fail(peg$c49); } } if (s0 === peg$FAILED) { s0 = peg$currPos; if (input.substr(peg$currPos, 2) === peg$c50) { s1 = peg$c50; peg$currPos += 2; } else { s1 = peg$FAILED; if (peg$silentFails === 0) { peg$fail(peg$c51); } } if (s1 !== peg$FAILED) { peg$savedPos = s0; s1 = peg$c52(); } s0 = s1; if (s0 === peg$FAILED) { s0 = peg$currPos; if (input.substr(peg$currPos, 2) === peg$c53) { s1 = peg$c53; peg$currPos += 2; } else { s1 = peg$FAILED; if (peg$silentFails === 0) { peg$fail(peg$c54); } } if (s1 !== peg$FAILED) { peg$savedPos = s0; s1 = peg$c55(); } s0 = s1; if (s0 === peg$FAILED) { s0 = peg$currPos; if (input.substr(peg$currPos, 2) === peg$c56) { s1 = peg$c56; peg$currPos += 2; } else { s1 = peg$FAILED; if (peg$silentFails === 0) { peg$fail(peg$c57); } } if (s1 !== peg$FAILED) { peg$savedPos = s0; s1 = peg$c58(); } s0 = s1; if (s0 === peg$FAILED) { s0 = peg$currPos; if (input.substr(peg$currPos, 2) === peg$c59) { s1 = peg$c59; peg$currPos += 2; } else { s1 = peg$FAILED; if (peg$silentFails === 0) { peg$fail(peg$c60); } } if (s1 !== peg$FAILED) { peg$savedPos = s0; s1 = peg$c61(); } s0 = s1; if (s0 === peg$FAILED) { s0 = peg$currPos; if (input.substr(peg$currPos, 2) === peg$c62) { s1 = peg$c62; peg$currPos += 2; } else { s1 = peg$FAILED; if (peg$silentFails === 0) { peg$fail(peg$c63); } } if (s1 !== peg$FAILED) { s2 = peg$currPos; s3 = peg$currPos; s4 = peg$parsehexDigit(); if (s4 !== peg$FAILED) { s5 = peg$parsehexDigit(); if (s5 !== peg$FAILED) { s6 = peg$parsehexDigit(); if (s6 !== peg$FAILED) { s7 = peg$parsehexDigit(); if (s7 !== peg$FAILED) { s4 = [s4, s5, s6, s7]; s3 = s4; } else { peg$currPos = s3; s3 = peg$FAILED; } } else { peg$currPos = s3; s3 = peg$FAILED; } } else { peg$currPos = s3; s3 = peg$FAILED; } } else { peg$currPos = s3; s3 = peg$FAILED; } if (s3 !== peg$FAILED) { s2 = input.substring(s2, peg$currPos); } else { s2 = s3; } if (s2 !== peg$FAILED) { peg$savedPos = s0; s1 = peg$c64(s2); s0 = s1; } else { peg$currPos = s0; s0 = peg$FAILED; } } else { peg$currPos = s0; s0 = peg$FAILED; } } } } } } return s0; } function peg$parsechars() { var s0, s1, s2; s0 = peg$currPos; s1 = []; s2 = peg$parsechar(); if (s2 !== peg$FAILED) { while (s2 !== peg$FAILED) { s1.push(s2); s2 = peg$parsechar(); } } else { s1 = peg$FAILED; } if (s1 !== peg$FAILED) { peg$savedPos = s0; s1 = peg$c65(s1); } s0 = s1; return s0; } peg$result = peg$startRuleFunction(); if (peg$result !== peg$FAILED && peg$currPos === input.length) { return peg$result; } else { if (peg$result !== peg$FAILED && peg$currPos < input.length) { peg$fail({ type: "end", description: "end of input" }); } throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)); } } return { SyntaxError: peg$SyntaxError, parse: peg$parse };
        }(); function MessageFormat(message, locales, formats) {// Parse string messages into an AST.
          var ast = typeof message === 'string' ? MessageFormat.__parse(message) : message; if (!(ast && ast.type === 'messageFormatPattern')) { throw new TypeError('A message must be provided as a String or AST.'); }// Creates a new object with the specified `formats` merged with the default
          // formats.
          formats = this._mergeFormats(MessageFormat.formats, formats);// Defined first because it's used to build the format pattern.
          defineProperty(this, '_locale', { value: this._resolveLocale(locales) });// Compile the `ast` to a pattern that is highly optimized for repeated
          // `format()` invocations. **Note:** This passes the `locales` set provided
          // to the constructor instead of just the resolved locale.
          var pluralFn = this._findPluralRuleFunction(this._locale); var pattern = this._compilePattern(ast, locales, formats, pluralFn);// "Bind" `format()` method to `this` so it can be passed by reference like
          // the other `Intl` APIs.
          var messageFormat = this; this.format = function (values) { try { return messageFormat._format(pattern, values); } catch (e) { if (e.variableId) { throw new Error('The intl string context variable \'' + e.variableId + '\'' + ' was not provided to the string \'' + message + '\''); } else { throw e; } } };
        }// Default format options used as the prototype of the `formats` provided to the
        // constructor. These are used when constructing the internal Intl.NumberFormat
        // and Intl.DateTimeFormat instances.
        defineProperty(MessageFormat, 'formats', { enumerable: true, value: { number: { 'currency': { style: 'currency' }, 'percent': { style: 'percent' } }, date: { 'short': { month: 'numeric', day: 'numeric', year: '2-digit' }, 'medium': { month: 'short', day: 'numeric', year: 'numeric' }, 'long': { month: 'long', day: 'numeric', year: 'numeric' }, 'full': { weekday: 'long', month: 'long', day: 'numeric', year: 'numeric' } }, time: { 'short': { hour: 'numeric', minute: 'numeric' }, 'medium': { hour: 'numeric', minute: 'numeric', second: 'numeric' }, 'long': { hour: 'numeric', minute: 'numeric', second: 'numeric', timeZoneName: 'short' }, 'full': { hour: 'numeric', minute: 'numeric', second: 'numeric', timeZoneName: 'short' } } } });// Define internal private properties for dealing with locale data.
        defineProperty(MessageFormat, '__localeData__', { value: objCreate(null) }); defineProperty(MessageFormat, '__addLocaleData', { value: function value(data) { if (!(data && data.locale)) { throw new Error('Locale data provided to IntlMessageFormat is missing a ' + '`locale` property'); } MessageFormat.__localeData__[data.locale.toLowerCase()] = data; } });// Defines `__parse()` static method as an exposed private.
        defineProperty(MessageFormat, '__parse', { value: parser.parse });// Define public `defaultLocale` property which defaults to English, but can be
        // set by the developer.
        defineProperty(MessageFormat, 'defaultLocale', { enumerable: true, writable: true, value: undefined }); MessageFormat.prototype.resolvedOptions = function () {// TODO: Provide anything else?
          return { locale: this._locale };
        }; MessageFormat.prototype._compilePattern = function (ast, locales, formats, pluralFn) { var compiler = new Compiler(locales, formats, pluralFn); return compiler.compile(ast); }; MessageFormat.prototype._findPluralRuleFunction = function (locale) {
          var localeData = MessageFormat.__localeData__; var data = localeData[locale.toLowerCase()];// The locale data is de-duplicated, so we have to traverse the locale's
          // hierarchy until we find a `pluralRuleFunction` to return.
          while (data) { if (data.pluralRuleFunction) { return data.pluralRuleFunction; } data = data.parentLocale && localeData[data.parentLocale.toLowerCase()]; } throw new Error('Locale data added to IntlMessageFormat is missing a ' + '`pluralRuleFunction` for :' + locale);
        }; MessageFormat.prototype._format = function (pattern, values) {
          var result = '', i, len, part, id, value, err; for (i = 0, len = pattern.length; i < len; i += 1) {
            part = pattern[i];// Exist early for string parts.
            if (typeof part === 'string') { result += part; continue; } id = part.id;// Enforce that all required values are provided by the caller.
            if (!(values && hop.call(values, id))) { err = new Error('A value must be provided for: ' + id); err.variableId = id; throw err; } value = values[id];// Recursively format plural and select parts' option — which can be a
            // nested pattern structure. The choosing of the option to use is
            // abstracted-by and delegated-to the part helper object.
            if (part.options) { result += this._format(part.getOption(value), values); } else { result += part.format(value); }
          } return result;
        }; MessageFormat.prototype._mergeFormats = function (defaults, formats) { var mergedFormats = {}, type, mergedType; for (type in defaults) { if (!hop.call(defaults, type)) { continue; } mergedFormats[type] = mergedType = objCreate(defaults[type]); if (formats && hop.call(formats, type)) { extend(mergedType, formats[type]); } } return mergedFormats; }; MessageFormat.prototype._resolveLocale = function (locales) {
          if (typeof locales === 'string') { locales = [locales]; }// Create a copy of the array so we can push on the default locale.
          locales = (locales || []).concat(MessageFormat.defaultLocale); var localeData = MessageFormat.__localeData__; var i, len, localeParts, data;// Using the set of locales + the default locale, we look for the first one
          // which that has been registered. When data does not exist for a locale, we
          // traverse its ancestors to find something that's been registered within
          // its hierarchy of locales. Since we lack the proper `parentLocale` data
          // here, we must take a naive approach to traversal.
          for (i = 0, len = locales.length; i < len; i += 1) {
            localeParts = locales[i].toLowerCase().split('-'); while (localeParts.length) {
              data = localeData[localeParts.join('-')]; if (data) {// Return the normalized locale string; e.g., we return "en-US",
                // instead of "en-us".
                return data.locale;
              } localeParts.pop();
            }
          } var defaultLocale = locales.pop(); throw new Error('No locale data has been added to IntlMessageFormat for: ' + locales.join(', ') + ', or the default locale: ' + defaultLocale);
        };// GENERATED FILE
        var defaultLocale = { "locale": "en", "pluralRuleFunction": function pluralRuleFunction(n, ord) { var s = String(n).split("."), v0 = !s[1], t0 = Number(s[0]) == n, n10 = t0 && s[0].slice(-1), n100 = t0 && s[0].slice(-2); if (ord) return n10 == 1 && n100 != 11 ? "one" : n10 == 2 && n100 != 12 ? "two" : n10 == 3 && n100 != 13 ? "few" : "other"; return n == 1 && v0 ? "one" : "other"; } }; MessageFormat.__addLocaleData(defaultLocale); MessageFormat.defaultLocale = 'en'; window.IntlMessageFormat = MessageFormat;// This isn't a complete `Object.assign` polyfill, but this element expects
        // JSON and doesn't provide more than one source object.
        var assign = Object.assign ? Object.assign.bind(Object) : function (destination, source) { for (var prop in source) { if (source.hasOwnProperty(prop)) { destination[prop] = source[prop]; } } return destination; };/**
      `AppLocalizeBehavior` wraps the [format.js](http://formatjs.io/)
      library to help you internationalize your application. Note that if you're on
      a browser that does not natively support the
      [Intl](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl)
      object, you must load the polyfill yourself. An example polyfill can
      be found [here](https://github.com/andyearnshaw/Intl.js/).
     
      `AppLocalizeBehavior` supports the same
      [message-syntax](http://formatjs.io/guides/message-syntax/) of format.js, in
      its entirety; use the library docs as reference for the available message
      formats and options.
     
      Sample application loading resources from an external file:
     
          import {PolymerElement, html} from '@polymer/polymer';
          import {mixinBehaviors} from '@polymer/polymer/lib/legacy/class.js';
          import {AppLocalizeBehavior} from
              '@polymer/app-localize-behavior/app-localize-behavior.js';
     
          class SampleElement extends  extends mixinBehaviors(
              [AppLocalizeBehavior], PolymerElement) {
            static get template() {
              return html`
                <div>{{localize('hello', 'name', 'Batman')}}</div>
              `;
            }
            static get properties() {
              return {
                language: { value: 'en' },
              }
            }
     
            function attached() {
              this.loadResources(this.resolveUrl('locales.json'));
            }
          }
          customElements.define('sample-element', SampleElement);
     
      If the resources stored in your external file are for a single language and
      so are not nested inside any language keys, you can pass an optional
      `language` parameter to store the fetched resources inside that key.
     
      This complements the optional third parameter, `merge`, nicely: If you pass
      `merge = true`, the fetched resources will be merged into any existing
      resources rather than clobbering them.
     
      This is also useful for storing resources for different parts of a page that
      the user might or might not see at the same time in different files, so that
      the user can fetch only the needed resources on-demand, and doesn't have to
      load any resources they'll never see anyway. For example, you could store
      your resources for your global nav, homepage, and FAQ page in 3 different
      files. When a user requests the homepage, both the global nav and the
      homepage resources are fetched and merged together, since they both appear
      on the page at the same time, but you spare the user from fetching the
      unneeded FAQ resources.
     
     
      Example:
     
          attached: function() {
            this.loadResources(
              // Only contains the flattened "es" translations:
              'locales/es.json',  // {"hi": "hola"}
              'es',               // unflatten -> {"es": {"hi": "hola"}}
              true                // merge so existing resources won't be clobbered
            );
          }
     
      Alternatively, you can also inline your resources inside the app itself:
     
          import {PolymerElement, html} from '@polymer/polymer';
          import {mixinBehaviors} from '@polymer/polymer/lib/legacy/class.js';
          import {AppLocalizeBehavior} from
              '@polymer/app-localize-behavior/app-localize-behavior.js';
     
          class SampleElement extends  extends mixinBehaviors(
              [AppLocalizeBehavior], PolymerElement) {
            static get template() {
              return html`
                <div>{{localize('hello', 'name', 'Batman')}}</div>
              `;
            }
     
            static get properties() {
              return {
                language: { value: 'en' },
                resources: {
                  value: function() {
                    return {
                      'en': { 'hello': 'My name is {name}.' },
                      'fr': { 'hello': 'Je m\'appelle {name}.' }
                    }
                },
              }
            }
     
            function attached() {
              this.loadResources(this.resolveUrl('locales.json'));
            }
          }
          customElements.define('sample-element', SampleElement);
     
      @demo demo/index.html
      @polymerBehavior AppLocalizeBehavior
      */var AppLocalizeBehavior = {/**
     Internal singleton cache. This is the private implementation of the
     behaviour; don't interact with it directly.
     */__localizationCache: {
            requests: {},/* One iron-request per unique resources path. */messages: {},/* Unique localized strings. Invalidated when the language,
         formats or resources change. */ajax: null/* Global iron-ajax object used to request resource files. */
          },/**
     Fired after the resources have been loaded.
     @event app-localize-resources-loaded
     */ /**
         Fired when the resources cannot be loaded due to an error.
         @event app-localize-resources-error
         */properties: {/**
       The language used for translation.
       */language: { type: String },/**
       The dictionary of localized messages, for each of the languages that
       are going to be used. See http://formatjs.io/guides/message-syntax/ for
       more information on the message syntax.
       *
       For example, a valid dictionary would be:
       this.resources = {
        'en': { 'greeting': 'Hello!' }, 'fr' : { 'greeting': 'Bonjour!' }
       }
       */resources: { type: Object },/**
       Optional dictionary of user defined formats, as explained here:
       http://formatjs.io/guides/message-syntax/#custom-formats
       *
       For example, a valid dictionary of formats would be:
       this.formats = {
          number: { USD: { style: 'currency', currency: 'USD' } }
       }
       */formats: { type: Object, value: function value() { return {}; } },/**
       If true, will use the provided key when
       the translation does not exist for that key.
       */useKeyIfMissing: { type: Boolean, value: false },/**
       Translates a string to the current `language`. Any parameters to the
       string should be passed in order, as follows:
       `localize(stringKey, param1Name, param1Value, param2Name, param2Value)`
       */localize: { type: Function, computed: '__computeLocalize(language, resources, formats)' },/**
       If true, will bubble up the event to the parents
       */bubbleEvent: { type: Boolean, value: false }
          }, loadResources: function loadResources(path, language, merge) {
            var proto = this.constructor.prototype;// Check if localCache exist just in case.
            this.__checkLocalizationCache(proto);// If the global ajax object has not been initialized, initialize and cache
            // it.
            var ajax = proto.__localizationCache.ajax; if (!ajax) { ajax = proto.__localizationCache.ajax = document.createElement('iron-ajax'); } var request = proto.__localizationCache.requests[path]; function onRequestResponse(event) { this.__onRequestResponse(event, language, merge); } if (!request) {
              ajax.url = path; var request = ajax.generateRequest(); request.completes.then(onRequestResponse.bind(this), this.__onRequestError.bind(this));// Cache the instance so that it can be reused if the same path is loaded.
              proto.__localizationCache.requests[path] = request;
            } else { request.completes.then(onRequestResponse.bind(this), this.__onRequestError.bind(this)); }
          },/**
     Returns a computed `localize` method, based on the current `language`.
     */__computeLocalize: function __computeLocalize(language, resources, formats) {
            var proto = this.constructor.prototype;// Check if localCache exist just in case.
            this.__checkLocalizationCache(proto);// Everytime any of the parameters change, invalidate the strings cache.
            if (!proto.__localizationCache) { proto['__localizationCache'] = { requests: {}, messages: {}, ajax: null }; } proto.__localizationCache.messages = {}; return function () {
              var key = arguments[0]; if (!key || !resources || !language || !resources[language]) return;// Cache the key/value pairs for the same language, so that we don't
              // do extra work if we're just reusing strings across an application.
              var translatedValue = resources[language][key]; if (!translatedValue) { return this.useKeyIfMissing ? key : ''; } var messageKey = key + translatedValue; var translatedMessage = proto.__localizationCache.messages[messageKey]; if (!translatedMessage) { translatedMessage = new MessageFormat(translatedValue, language, formats); proto.__localizationCache.messages[messageKey] = translatedMessage; } var args = {}; for (var i = 1; i < arguments.length; i += 2) { args[arguments[i]] = arguments[i + 1]; } return translatedMessage.format(args);
            }.bind(this);
          }, __onRequestResponse: function __onRequestResponse(event, language, merge) { var propertyUpdates = {}; var newResources = event.response; if (merge) { if (language) { propertyUpdates.resources = assign({}, this.resources || {}); propertyUpdates['resources.' + language] = assign(propertyUpdates.resources[language] || {}, newResources); } else { propertyUpdates.resources = assign(this.resources, newResources); } } else { if (language) { propertyUpdates.resources = {}; propertyUpdates.resources[language] = newResources; propertyUpdates['resources.' + language] = newResources; } else { propertyUpdates.resources = newResources; } } if (this.setProperties) { this.setProperties(propertyUpdates); } else { for (var key in propertyUpdates) { this.set(key, propertyUpdates[key]); } } this.fire('app-localize-resources-loaded', event, { bubbles: this.bubbleEvent }); }, __onRequestError: function __onRequestError(event) { this.fire('app-localize-resources-error'); }, __checkLocalizationCache: function __checkLocalizationCache(proto) {// do nothing if proto is undefined.
            if (proto === undefined) return;// In the event proto not have __localizationCache object, create it.
            if (proto['__localizationCache'] === undefined) { proto['__localizationCache'] = { requests: {}, messages: {}, ajax: null }; }
          }
        }; var LocalizeMixin = function LocalizeMixin(superClass) {
          return (/*#__PURE__*/function (_mixinBehaviors) {
            babelHelpers.inherits(_class2, _mixinBehaviors); function _class2() { babelHelpers.classCallCheck(this, _class2); return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(_class2).apply(this, arguments)); } babelHelpers.createClass(_class2, [{
              key: "changedLocalizeService",/**
         * @param newValue
         */value: function changedLocalizeService(newValue) { if (!newValue) { return; } this.language = this._localizeService.getDefaultLang(); this._evtListener = new _shared_bundle_.Listener(this.changeLanguage.bind(this)); this._localizeService.getEventManager().on(_shared_bundle_.Localize.CHANGE_LANGUAGE, this._evtListener); }/**
         * @param evt
         */}, { key: "changeLanguage", value: function changeLanguage(evt) { this.language = evt.data.language; } }], [{
              key: "properties", get: function get() {
                return {/**
           * @type Localize
           */_localizeService: { type: Object, readOnly: true, notify: true, observer: 'changedLocalizeService' }
                };
              }
            }]); return _class2;
          }(mixinBehaviors([AppLocalizeBehavior], superClass)));
        };/**
      * @type {Function}
      */var ServiceInjectorMixin = function ServiceInjectorMixin(superClass) {
          return (/*#__PURE__*/function (_superClass7) {
            babelHelpers.inherits(_class3, _superClass7); function _class3() { babelHelpers.classCallCheck(this, _class3); return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(_class3).apply(this, arguments)); } babelHelpers.createClass(_class3, [{
              key: "changeServices",/**
         * @param newValue
         */value: function changeServices(newValue) { if (!newValue || !window['container']) { if (!newValue && !window['container']) { console.warn('Container not set globally'); } return; } this._searchService(newValue); }/**
         * @param services
         * @param subContainer
         * @private
         */}, {
              key: "_searchService", value: function _searchService(services, subContainer) { var _this39 = this; if (services === null || babelHelpers.typeof(services) !== 'object') { return; } var _loop5 = function _loop5(property) { switch (true) { case babelHelpers.typeof(services[property]) === 'object' && window['container'].has(property): _this39._searchService(services[property], window['container'].get(property)); break; default: switch (true) { case window['container'].has(services[property]) === true: window['container'].getAsync(services[property]).then(function (service) { _this39._setService(service, property); }); break; case !!subContainer === true: subContainer.getAsync(services[property]).then(function (service) { _this39._setService(service, property); }); break; }break; } }; for (var property in services) { _loop5(property); } }/**
         * @param service
         * @param property
         * @private
         */}, {
              key: "_setService", value: function _setService(service, property) {
                var readOnlyFunc = "_set".concat(property.charAt(0).toUpperCase() + property.slice(1)); if (this.__readOnly && this.__readOnly[property] && this[readOnlyFunc]) {/**
           * set read only property
           */this[readOnlyFunc](service);
                } else {/**
           * set public property
           */this[property] = service;
                }
              }
            }], [{ key: "properties", get: function get() { return { services: { type: Object, observer: 'changeServices' } }; } }]); return _class3;
          }(superClass));
        };/**
      * Simple is object check.
      * @param item
      * @returns {boolean}
      */function isObject(item) { return item && babelHelpers.typeof(item) === 'object' && !Array.isArray(item) && item !== null; }/**
     * Deep merge two objects.
     * @param target
     * @param source
     */function mergeDeep(target, source) { if (isObject(target) && isObject(source)) { Object.keys(source).forEach(function (key) { if (isObject(source[key])) { if (!target[key]) Object.assign(target, babelHelpers.defineProperty({}, key, {})); mergeDeep(target[key], source[key]); } else { Object.assign(target, babelHelpers.defineProperty({}, key, source[key])); } }); } return target; } var MergeCategory = function MergeCategory(superClass) {
          return (/*#__PURE__*/function (_mixinBehaviors2) {
            babelHelpers.inherits(_class4, _mixinBehaviors2); function _class4() { babelHelpers.classCallCheck(this, _class4); return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(_class4).apply(this, arguments)); } babelHelpers.createClass(_class4, [{
              key: "_mergeCategory",/**
       * @param value
       * @private
       */value: function _mergeCategory(categories) { var categoryTranslation = {}; var languages = this._localizeService.getLanguages(); for (var index = 0; languages.length > index; index++) { categoryTranslation[languages[index]] = {}; } if (babelHelpers.typeof(categories) === 'object' && categories !== null) { for (var property1 in categories) { for (var property2 in categories[property1]) { categoryTranslation[property2][property1] = categories[property1][property2]; } } } this.resources = mergeDeep(this.resources, categoryTranslation); }
            }]); return _class4;
          }(mixinBehaviors([LocalizeMixin], superClass)));
        }; var template = html(_templateObject_e13d1b4010eb11ec83cd7fddb4847b33()); template.setAttribute('style', 'display: none;'); document.head.appendChild(template.content); var style = document.createElement('style'); style.textContent = '[hidden] { display: none !important; }'; document.head.appendChild(style); Polymer({/** @override */_template: html(_templateObject2_e13d1b4010eb11ec83cd7fddb4847b33()), is: 'app-toolbar' }); Polymer({/** @override */_template: html(_templateObject3_e13d1b4010eb11ec83cd7fddb4847b33()), is: 'app-drawer', properties: {/**
       * The opened state of the drawer.
       */opened: { type: Boolean, value: false, notify: true, reflectToAttribute: true },/**
       * The drawer does not have a scrim and cannot be swiped close.
       */persistent: { type: Boolean, value: false, reflectToAttribute: true },/**
       * The transition duration of the drawer in milliseconds.
       */transitionDuration: { type: Number, value: 200 },/**
       * The alignment of the drawer on the screen ('left', 'right', 'start' or
       * 'end'). 'start' computes to left and 'end' to right in LTR layout and
       * vice versa in RTL layout.
       */align: { type: String, value: 'left' },/**
       * The computed, read-only position of the drawer on the screen ('left' or
       * 'right').
       */position: { type: String, readOnly: true, reflectToAttribute: true },/**
       * Create an area at the edge of the screen to swipe open the drawer.
       */swipeOpen: { type: Boolean, value: false, reflectToAttribute: true },/**
       * Trap keyboard focus when the drawer is opened and not persistent.
       */noFocusTrap: { type: Boolean, value: false },/**
       * Disables swiping on the drawer.
       */disableSwipe: { type: Boolean, value: false }
        }, observers: ['resetLayout(position, isAttached)', '_resetPosition(align, isAttached)', '_styleTransitionDuration(transitionDuration)', '_openedPersistentChanged(opened, persistent)'], _translateOffset: 0, _trackDetails: null, _drawerState: 0, _boundEscKeydownHandler: null, _firstTabStop: null, _lastTabStop: null,/** @override */attached: function attached() {
          afterNextRender(this, function () {
            this._boundEscKeydownHandler = this._escKeydownHandler.bind(this); this.addEventListener('keydown', this._tabKeydownHandler.bind(this));// Only listen for horizontal track so you can vertically scroll
            // inside the drawer.
            this.listen(this, 'track', '_track'); this.setScrollDirection('y');
          }); this.fire('app-reset-layout');
        },/** @override */detached: function detached() { document.removeEventListener('keydown', this._boundEscKeydownHandler); },/**
     * Opens the drawer.
     */open: function open() { this.opened = true; },/**
     * Closes the drawer.
     */close: function close() { this.opened = false; },/**
     * Toggles the drawer open and close.
     */toggle: function toggle() { this.opened = !this.opened; },/**
     * Gets the width of the drawer.
     *
     * @return {number} The width of the drawer in pixels.
     */getWidth: function getWidth() { return this._savedWidth || this.$.contentContainer.offsetWidth; }, _isRTL: function _isRTL() { return window.getComputedStyle(this).direction === 'rtl'; }, _resetPosition: function _resetPosition() { switch (this.align) { case 'start': this._setPosition(this._isRTL() ? 'right' : 'left'); return; case 'end': this._setPosition(this._isRTL() ? 'left' : 'right'); return; }this._setPosition(this.align); }, _escKeydownHandler: function _escKeydownHandler(event) {
            var ESC_KEYCODE = 27; if (event.keyCode === ESC_KEYCODE) {// Prevent any side effects if app-drawer closes.
              event.preventDefault(); this.close();
            }
          }, _track: function _track(event) {
            if (this.persistent || this.disableSwipe) { return; }// Disable user selection on desktop.
            event.preventDefault(); switch (event.detail.state) { case 'start': this._trackStart(event); break; case 'track': this._trackMove(event); break; case 'end': this._trackEnd(event); break; }
          }, _trackStart: function _trackStart(event) {
            this._drawerState = this._DRAWER_STATE.TRACKING; var rect = this.$.contentContainer.getBoundingClientRect(); this._savedWidth = rect.width; if (this.position === 'left') { this._translateOffset = rect.left; } else { this._translateOffset = rect.right - window.innerWidth; } this._trackDetails = [];// Disable transitions since style attributes will reflect user track
            // events.
            this._styleTransitionDuration(0); this.style.visibility = 'visible';
          }, _trackMove: function _trackMove(event) {
            this._translateDrawer(event.detail.dx + this._translateOffset);// Use Date.now() since event.timeStamp is inconsistent across browsers
            // (e.g. most browsers use milliseconds but FF 44 uses microseconds).
            this._trackDetails.push({ dx: event.detail.dx, timeStamp: Date.now() });
          }, _trackEnd: function _trackEnd(event) {
            var x = event.detail.dx + this._translateOffset; var drawerWidth = this.getWidth(); var isPositionLeft = this.position === 'left'; var isInEndState = isPositionLeft ? x >= 0 || x <= -drawerWidth : x <= 0 || x >= drawerWidth; if (!isInEndState) {// No longer need the track events after this method returns - allow them
              // to be GC'd.
              var trackDetails = this._trackDetails; this._trackDetails = null; this._flingDrawer(event, trackDetails); if (this._drawerState === this._DRAWER_STATE.FLINGING) { return; }
            }// If the drawer is not flinging, toggle the opened state based on the
            // position of the drawer.
            var halfWidth = drawerWidth / 2; if (event.detail.dx < -halfWidth) { this.opened = this.position === 'right'; } else if (event.detail.dx > halfWidth) { this.opened = this.position === 'left'; } if (isInEndState) { this.debounce('_resetDrawerState', this._resetDrawerState); } else { this.debounce('_resetDrawerState', this._resetDrawerState, this.transitionDuration); } this._styleTransitionDuration(this.transitionDuration); this._resetDrawerTranslate(); this.style.visibility = '';
          }, _calculateVelocity: function _calculateVelocity(event, trackDetails) {// Find the oldest track event that is within 100ms using binary search.
            var now = Date.now(); var timeLowerBound = now - 100; var trackDetail; var min = 0; var max = trackDetails.length - 1; while (min <= max) {// Floor of average of min and max.
              var mid = min + max >> 1; var d = trackDetails[mid]; if (d.timeStamp >= timeLowerBound) { trackDetail = d; max = mid - 1; } else { min = mid + 1; }
            } if (trackDetail) { var dx = event.detail.dx - trackDetail.dx; var dt = now - trackDetail.timeStamp || 1; return dx / dt; } return 0;
          }, _flingDrawer: function _flingDrawer(event, trackDetails) {
            var velocity = this._calculateVelocity(event, trackDetails);// Do not fling if velocity is not above a threshold.
            if (Math.abs(velocity) < this._MIN_FLING_THRESHOLD) { return; } this._drawerState = this._DRAWER_STATE.FLINGING; var x = event.detail.dx + this._translateOffset; var drawerWidth = this.getWidth(); var isPositionLeft = this.position === 'left'; var isVelocityPositive = velocity > 0; var isClosingLeft = !isVelocityPositive && isPositionLeft; var isClosingRight = isVelocityPositive && !isPositionLeft; var dx; if (isClosingLeft) { dx = -(x + drawerWidth); } else if (isClosingRight) { dx = drawerWidth - x; } else { dx = -x; }// Enforce a minimum transition velocity to make the drawer feel snappy.
            if (isVelocityPositive) { velocity = Math.max(velocity, this._MIN_TRANSITION_VELOCITY); this.opened = this.position === 'left'; } else { velocity = Math.min(velocity, -this._MIN_TRANSITION_VELOCITY); this.opened = this.position === 'right'; }// Calculate the amount of time needed to finish the transition based on the
            // initial slope of the timing function.
            var t = this._FLING_INITIAL_SLOPE * dx / velocity; this._styleTransitionDuration(t); this._styleTransitionTimingFunction(this._FLING_TIMING_FUNCTION); this._resetDrawerTranslate(); this.debounce('_resetDrawerState', this._resetDrawerState, t);
          }, _styleTransitionDuration: function _styleTransitionDuration(duration) { this.style.transitionDuration = duration + 'ms'; this.$.contentContainer.style.transitionDuration = duration + 'ms'; this.$.scrim.style.transitionDuration = duration + 'ms'; }, _styleTransitionTimingFunction: function _styleTransitionTimingFunction(timingFunction) { this.$.contentContainer.style.transitionTimingFunction = timingFunction; this.$.scrim.style.transitionTimingFunction = timingFunction; }, _translateDrawer: function _translateDrawer(x) { var drawerWidth = this.getWidth(); if (this.position === 'left') { x = Math.max(-drawerWidth, Math.min(x, 0)); this.$.scrim.style.opacity = 1 + x / drawerWidth; } else { x = Math.max(0, Math.min(x, drawerWidth)); this.$.scrim.style.opacity = 1 - x / drawerWidth; } this.translate3d(x + 'px', '0', '0', this.$.contentContainer); }, _resetDrawerTranslate: function _resetDrawerTranslate() { this.$.scrim.style.opacity = ''; this.transform('', this.$.contentContainer); }, _resetDrawerState: function _resetDrawerState() {
            var oldState = this._drawerState;// If the drawer was flinging, we need to reset the style attributes.
            if (oldState === this._DRAWER_STATE.FLINGING) { this._styleTransitionDuration(this.transitionDuration); this._styleTransitionTimingFunction(''); this.style.visibility = ''; } this._savedWidth = null; if (this.opened) { this._drawerState = this.persistent ? this._DRAWER_STATE.OPENED_PERSISTENT : this._DRAWER_STATE.OPENED; } else { this._drawerState = this._DRAWER_STATE.CLOSED; } if (oldState !== this._drawerState) {
              if (this._drawerState === this._DRAWER_STATE.OPENED) { this._setKeyboardFocusTrap(); document.addEventListener('keydown', this._boundEscKeydownHandler); document.body.style.overflow = 'hidden'; } else { document.removeEventListener('keydown', this._boundEscKeydownHandler); document.body.style.overflow = ''; }// Don't fire the event on initial load.
              if (oldState !== this._DRAWER_STATE.INIT) { this.fire('app-drawer-transitioned'); }
            }
          },/**
     * Resets the layout.
     *
     * @method resetLayout
     */resetLayout: function resetLayout() { this.fire('app-reset-layout'); }, _setKeyboardFocusTrap: function _setKeyboardFocusTrap() {
            if (this.noFocusTrap) { return; }// NOTE: Unless we use /deep/ (which we shouldn't since it's deprecated),
            // this will not select focusable elements inside shadow roots.
            var focusableElementsSelector = ['a[href]:not([tabindex="-1"])', 'area[href]:not([tabindex="-1"])', 'input:not([disabled]):not([tabindex="-1"])', 'select:not([disabled]):not([tabindex="-1"])', 'textarea:not([disabled]):not([tabindex="-1"])', 'button:not([disabled]):not([tabindex="-1"])', 'iframe:not([tabindex="-1"])', '[tabindex]:not([tabindex="-1"])', '[contentEditable=true]:not([tabindex="-1"])'].join(','); var focusableElements = dom(this).querySelectorAll(focusableElementsSelector); if (focusableElements.length > 0) { this._firstTabStop = focusableElements[0]; this._lastTabStop = focusableElements[focusableElements.length - 1]; } else {// Reset saved tab stops when there are no focusable elements in the
              // drawer.
              this._firstTabStop = null; this._lastTabStop = null;
            }// Focus on app-drawer if it has non-zero tabindex. Otherwise, focus the
            // first focusable element in the drawer, if it exists. Use the tabindex
            // attribute since the this.tabIndex property in IE/Edge returns 0 (instead
            // of -1) when the attribute is not set.
            var tabindex = this.getAttribute('tabindex'); if (tabindex && parseInt(tabindex, 10) > -1) { this.focus(); } else if (this._firstTabStop) { this._firstTabStop.focus(); }
          }, _tabKeydownHandler: function _tabKeydownHandler(event) { if (this.noFocusTrap) { return; } var TAB_KEYCODE = 9; if (this._drawerState === this._DRAWER_STATE.OPENED && event.keyCode === TAB_KEYCODE) { if (event.shiftKey) { if (this._firstTabStop && dom(event).localTarget === this._firstTabStop) { event.preventDefault(); this._lastTabStop.focus(); } } else { if (this._lastTabStop && dom(event).localTarget === this._lastTabStop) { event.preventDefault(); this._firstTabStop.focus(); } } } }, _openedPersistentChanged: function _openedPersistentChanged(opened, persistent) {
            this.toggleClass('visible', opened && !persistent, this.$.scrim);// Use a debounce timer instead of transitionend since transitionend won't
            // fire when app-drawer is display: none.
            this.debounce('_resetDrawerState', this._resetDrawerState, this.transitionDuration);
          }, _MIN_FLING_THRESHOLD: 0.2, _MIN_TRANSITION_VELOCITY: 1.2, _FLING_TIMING_FUNCTION: 'cubic-bezier(0.667, 1, 0.667, 1)', _FLING_INITIAL_SLOPE: 1.5, _DRAWER_STATE: {
            INIT: 0, OPENED: 1, OPENED_PERSISTENT: 2, CLOSED: 3, TRACKING: 4, FLINGING: 5/**
                   * Fired when the layout of app-drawer has changed.
                   *
                   * @event app-reset-layout
                   */ /**
                       * Fired when app-drawer has finished transitioning.
                       *
                       * @event app-drawer-transitioned
                       */}
        }); var ORPHANS = new Set();/**
                            * `IronResizableBehavior` is a behavior that can be used in Polymer elements to
                            * coordinate the flow of resize events between "resizers" (elements that
                            *control the size or hidden state of their children) and "resizables" (elements
                            *that need to be notified when they are resized or un-hidden by their parents
                            *in order to take action on their new measurements).
                            *
                            * Elements that perform measurement should add the `IronResizableBehavior`
                            *behavior to their element definition and listen for the `iron-resize` event on
                            *themselves. This event will be fired when they become showing after having
                            *been hidden, when they are resized explicitly by another resizable, or when
                            *the window has been resized.
                            *
                            * Note, the `iron-resize` event is non-bubbling.
                            *
                            * @polymerBehavior
                            * @demo demo/index.html
                            **/var IronResizableBehavior = {
          properties: {/**
       * The closest ancestor element that implements `IronResizableBehavior`.
       */_parentResizable: { type: Object, observer: '_parentResizableChanged' },/**
       * True if this element is currently notifying its descendant elements of
       * resize.
       */_notifyingDescendant: { type: Boolean, value: false }
          }, listeners: { 'iron-request-resize-notifications': '_onIronRequestResizeNotifications' }, created: function created() {// We don't really need property effects on these, and also we want them
            // to be created before the `_parentResizable` observer fires:
            this._interestedResizables = []; this._boundNotifyResize = this.notifyResize.bind(this); this._boundOnDescendantIronResize = this._onDescendantIronResize.bind(this);
          }, attached: function attached() { this._requestResizeNotifications(); }, detached: function detached() { if (this._parentResizable) { this._parentResizable.stopResizeNotificationsFor(this); } else { ORPHANS.delete(this); window.removeEventListener('resize', this._boundNotifyResize); } this._parentResizable = null; },/**
     * Can be called to manually notify a resizable and its descendant
     * resizables of a resize change.
     */notifyResize: function notifyResize() { if (!this.isAttached) { return; } this._interestedResizables.forEach(function (resizable) { if (this.resizerShouldNotify(resizable)) { this._notifyDescendant(resizable); } }, this); this._fireResize(); },/**
     * Used to assign the closest resizable ancestor to this resizable
     * if the ancestor detects a request for notifications.
     */assignParentResizable: function assignParentResizable(parentResizable) { if (this._parentResizable) { this._parentResizable.stopResizeNotificationsFor(this); } this._parentResizable = parentResizable; if (parentResizable && parentResizable._interestedResizables.indexOf(this) === -1) { parentResizable._interestedResizables.push(this); parentResizable._subscribeIronResize(this); } },/**
     * Used to remove a resizable descendant from the list of descendants
     * that should be notified of a resize change.
     */stopResizeNotificationsFor: function stopResizeNotificationsFor(target) { var index = this._interestedResizables.indexOf(target); if (index > -1) { this._interestedResizables.splice(index, 1); this._unsubscribeIronResize(target); } },/**
     * Subscribe this element to listen to iron-resize events on the given target.
     *
     * Preferred over target.listen because the property renamer does not
     * understand to rename when the target is not specifically "this"
     *
     * @param {!HTMLElement} target Element to listen to for iron-resize events.
     */_subscribeIronResize: function _subscribeIronResize(target) { target.addEventListener('iron-resize', this._boundOnDescendantIronResize); },/**
     * Unsubscribe this element from listening to to iron-resize events on the
     * given target.
     *
     * Preferred over target.unlisten because the property renamer does not
     * understand to rename when the target is not specifically "this"
     *
     * @param {!HTMLElement} target Element to listen to for iron-resize events.
     */_unsubscribeIronResize: function _unsubscribeIronResize(target) { target.removeEventListener('iron-resize', this._boundOnDescendantIronResize); },/**
     * This method can be overridden to filter nested elements that should or
     * should not be notified by the current element. Return true if an element
     * should be notified, or false if it should not be notified.
     *
     * @param {HTMLElement} element A candidate descendant element that
     * implements `IronResizableBehavior`.
     * @return {boolean} True if the `element` should be notified of resize.
     */resizerShouldNotify: function resizerShouldNotify(element) { return true; }, _onDescendantIronResize: function _onDescendantIronResize(event) {
            if (this._notifyingDescendant) { event.stopPropagation(); return; }// no need to use this during shadow dom because of event retargeting
            if (!useShadow) { this._fireResize(); }
          }, _fireResize: function _fireResize() { this.fire('iron-resize', null, { node: this, bubbles: false }); }, _onIronRequestResizeNotifications: function _onIronRequestResizeNotifications(event) { var target =/** @type {!EventTarget} */dom(event).rootTarget; if (target === this) { return; } target.assignParentResizable(this); this._notifyDescendant(target); event.stopPropagation(); }, _parentResizableChanged: function _parentResizableChanged(parentResizable) { if (parentResizable) { window.removeEventListener('resize', this._boundNotifyResize); } }, _notifyDescendant: function _notifyDescendant(descendant) {// NOTE(cdata): In IE10, attached is fired on children first, so it's
            // important not to notify them if the parent is not attached yet (or
            // else they will get redundantly notified when the parent attaches).
            if (!this.isAttached) { return; } this._notifyingDescendant = true; descendant.notifyResize(); this._notifyingDescendant = false;
          }, _requestResizeNotifications: function _requestResizeNotifications() {
            if (!this.isAttached) { return; } if (document.readyState === 'loading') { var _requestResizeNotifications = this._requestResizeNotifications.bind(this); document.addEventListener('readystatechange', function readystatechanged() { document.removeEventListener('readystatechange', readystatechanged); _requestResizeNotifications(); }); } else {
              this._findParent(); if (!this._parentResizable) {// If this resizable is an orphan, tell other orphans to try to find
                // their parent again, in case it's this resizable.
                ORPHANS.forEach(function (orphan) { if (orphan !== this) { orphan._findParent(); } }, this); window.addEventListener('resize', this._boundNotifyResize); this.notifyResize();
              } else {// If this resizable has a parent, tell other child resizables of
                // that parent to try finding their parent again, in case it's this
                // resizable.
                this._parentResizable._interestedResizables.forEach(function (resizable) { if (resizable !== this) { resizable._findParent(); } }, this);
              }
            }
          }, _findParent: function _findParent() { this.assignParentResizable(null); this.fire('iron-request-resize-notifications', null, { node: this, bubbles: true, cancelable: true }); if (!this._parentResizable) { ORPHANS.add(this); } else { ORPHANS.delete(this); } }
        }; var AppLayoutBehavior = [IronResizableBehavior, {
          listeners: { 'app-reset-layout': '_appResetLayoutHandler', 'iron-resize': 'resetLayout' }, attached: function attached() { this.fire('app-reset-layout'); }, _appResetLayoutHandler: function _appResetLayoutHandler(e) { if (dom(e).path[0] === this) { return; } this.resetLayout(); e.stopPropagation(); }, _updateLayoutStates: function _updateLayoutStates() { console.error('unimplemented'); },/**
     * Resets the layout. If you changed the size of this element via CSS
     * you can notify the changes by either firing the `iron-resize` event
     * or calling `resetLayout` directly.
     *
     * @method resetLayout
     */resetLayout: function resetLayout() { var self = this; var cb = this._updateLayoutStates.bind(this); this._layoutDebouncer = Debouncer.debounce(this._layoutDebouncer, animationFrame, cb); enqueueDebouncer(this._layoutDebouncer); this._notifyDescendantResize(); }, _notifyLayoutChanged: function _notifyLayoutChanged() {
            var self = this;// TODO: the event `app-reset-layout` can be fired synchronously
            // as long as `_updateLayoutStates` waits for all the microtasks after
            // rAF. E.g. requestAnimationFrame(setTimeOut())
            requestAnimationFrame(function () { self.fire('app-reset-layout'); });
          }, _notifyDescendantResize: function _notifyDescendantResize() { if (!this.isAttached) { return; } this._interestedResizables.forEach(function (resizable) { if (this.resizerShouldNotify(resizable)) { this._notifyDescendant(resizable); } }, this); }
        }]; var IronScrollTargetBehavior = {
          properties: {/**
       * Specifies the element that will handle the scroll event
       * on the behalf of the current element. This is typically a reference to an
       *element, but there are a few more posibilities:
       *
       * ### Elements id
       *
       *```html
       * <div id="scrollable-element" style="overflow: auto;">
       *  <x-element scroll-target="scrollable-element">
       *    \x3c!-- Content--\x3e
       *  </x-element>
       * </div>
       *```
       * In this case, the `scrollTarget` will point to the outer div element.
       *
       * ### Document scrolling
       *
       * For document scrolling, you can use the reserved word `document`:
       *
       *```html
       * <x-element scroll-target="document">
       *   \x3c!-- Content --\x3e
       * </x-element>
       *```
       *
       * ### Elements reference
       *
       *```js
       * appHeader.scrollTarget = document.querySelector('#scrollable-element');
       *```
       *
       * @type {HTMLElement}
       * @default document
       */scrollTarget: { type: HTMLElement, value: function value() { return this._defaultScrollTarget; } }
          }, observers: ['_scrollTargetChanged(scrollTarget, isAttached)'],/**
     * True if the event listener should be installed.
     */_shouldHaveListener: true, _scrollTargetChanged: function _scrollTargetChanged(scrollTarget, isAttached) {
            var eventTarget; if (this._oldScrollTarget) { this._toggleScrollListener(false, this._oldScrollTarget); this._oldScrollTarget = null; } if (!isAttached) { return; }// Support element id references
            if (scrollTarget === 'document') { this.scrollTarget = this._doc; } else if (typeof scrollTarget === 'string') { var domHost = this.domHost; this.scrollTarget = domHost && domHost.$ ? domHost.$[scrollTarget] : dom(this.ownerDocument).querySelector('#' + scrollTarget); } else if (this._isValidScrollTarget()) { this._oldScrollTarget = scrollTarget; this._toggleScrollListener(this._shouldHaveListener, scrollTarget); }
          },/**
     * Runs on every scroll event. Consumer of this behavior may override this
     * method.
     *
     * @protected
     */_scrollHandler: function scrollHandler() { },/**
     * The default scroll target. Consumers of this behavior may want to customize
     * the default scroll target.
     *
     * @type {Element}
     */get _defaultScrollTarget() { return this._doc; },/**
     * Shortcut for the document element
     *
     * @type {Element}
     */get _doc() { return this.ownerDocument.documentElement; },/**
     * Gets the number of pixels that the content of an element is scrolled
     * upward.
     *
     * @type {number}
     */get _scrollTop() { if (this._isValidScrollTarget()) { return this.scrollTarget === this._doc ? window.pageYOffset : this.scrollTarget.scrollTop; } return 0; },/**
     * Gets the number of pixels that the content of an element is scrolled to the
     * left.
     *
     * @type {number}
     */get _scrollLeft() { if (this._isValidScrollTarget()) { return this.scrollTarget === this._doc ? window.pageXOffset : this.scrollTarget.scrollLeft; } return 0; },/**
     * Sets the number of pixels that the content of an element is scrolled
     * upward.
     *
     * @type {number}
     */set _scrollTop(top) { if (this.scrollTarget === this._doc) { window.scrollTo(window.pageXOffset, top); } else if (this._isValidScrollTarget()) { this.scrollTarget.scrollTop = top; } },/**
     * Sets the number of pixels that the content of an element is scrolled to the
     * left.
     *
     * @type {number}
     */set _scrollLeft(left) { if (this.scrollTarget === this._doc) { window.scrollTo(left, window.pageYOffset); } else if (this._isValidScrollTarget()) { this.scrollTarget.scrollLeft = left; } },/**
     * Scrolls the content to a particular place.
     *
     * @method scroll
     * @param {number|!{left: number, top: number}} leftOrOptions The left position or scroll options
     * @param {number=} top The top position
     * @return {void}
     */scroll: function scroll(leftOrOptions, top) { var left; if (babelHelpers.typeof(leftOrOptions) === 'object') { left = leftOrOptions.left; top = leftOrOptions.top; } else { left = leftOrOptions; } left = left || 0; top = top || 0; if (this.scrollTarget === this._doc) { window.scrollTo(left, top); } else if (this._isValidScrollTarget()) { this.scrollTarget.scrollLeft = left; this.scrollTarget.scrollTop = top; } },/**
     * Gets the width of the scroll target.
     *
     * @type {number}
     */get _scrollTargetWidth() { if (this._isValidScrollTarget()) { return this.scrollTarget === this._doc ? window.innerWidth : this.scrollTarget.offsetWidth; } return 0; },/**
     * Gets the height of the scroll target.
     *
     * @type {number}
     */get _scrollTargetHeight() { if (this._isValidScrollTarget()) { return this.scrollTarget === this._doc ? window.innerHeight : this.scrollTarget.offsetHeight; } return 0; },/**
     * Returns true if the scroll target is a valid HTMLElement.
     *
     * @return {boolean}
     */_isValidScrollTarget: function _isValidScrollTarget() { return babelHelpers.instanceof(this.scrollTarget, HTMLElement); }, _toggleScrollListener: function _toggleScrollListener(yes, scrollTarget) { var eventTarget = scrollTarget === this._doc ? window : scrollTarget; if (yes) { if (!this._boundScrollHandler) { this._boundScrollHandler = this._scrollHandler.bind(this); eventTarget.addEventListener('scroll', this._boundScrollHandler); } } else { if (this._boundScrollHandler) { eventTarget.removeEventListener('scroll', this._boundScrollHandler); this._boundScrollHandler = null; } } },/**
     * Enables or disables the scroll event listener.
     *
     * @param {boolean} yes True to add the event, False to remove it.
     */toggleScrollListener: function toggleScrollListener(yes) { this._shouldHaveListener = yes; this._toggleScrollListener(yes, this.scrollTarget); }
        }; var _scrollEffects = {}; var _scrollTimer = null; var scrollTimingFunction = function easeOutQuad(t, b, c, d) { t /= d; return -c * t * (t - 2) + b; };/**
      * Registers a scroll effect to be used in elements that implement the
      * `Polymer.AppScrollEffectsBehavior` behavior.
      *
      * @param {string} effectName The effect name.
      * @param {Object} effectDef The effect definition.
      */var registerEffect = function registerEffect(effectName, effectDef) { if (_scrollEffects[effectName] != null) { throw new Error('effect `' + effectName + '` is already registered.'); } _scrollEffects[effectName] = effectDef; }; var queryAllRoot = function queryAllRoot(selector, root) { var queue = [root]; var matches = []; while (queue.length > 0) { var node = queue.shift(); matches.push.apply(matches, node.querySelectorAll(selector)); for (var i = 0; node.children[i]; i++) { if (node.children[i].shadowRoot) { queue.push(node.children[i].shadowRoot); } } } return matches; };/**
      * Scrolls to a particular set of coordinates in a scroll target.
      * If the scroll target is not defined, then it would use the main document as
      * the target.
      *
      * To scroll in a smooth fashion, you can set the option `behavior: 'smooth'`.
      * e.g.
      *
      * ```js
      * Polymer.AppLayout.scroll({top: 0, behavior: 'smooth'});
      * ```
      *
      * To scroll in a silent mode, without notifying scroll changes to any
      * app-layout elements, you can set the option `behavior: 'silent'`. This is
      * particularly useful we you are using `app-header` and you desire to scroll to
      * the top of a scrolling region without running scroll effects. e.g.
      *
      * ```js
      * Polymer.AppLayout.scroll({top: 0, behavior: 'silent'});
      * ```
      *
      * @param {Object} options {top: Number, left: Number, behavior: String(smooth | silent)}
      */var scroll = function scroll(options) {
          options = options || {}; var docEl = document.documentElement; var target = options.target || docEl; var hasNativeScrollBehavior = 'scrollBehavior' in target.style && target.scroll; var scrollClassName = 'app-layout-silent-scroll'; var scrollTop = options.top || 0; var scrollLeft = options.left || 0; var scrollTo = target === docEl ? window.scrollTo : function scrollTo(scrollLeft, scrollTop) { target.scrollLeft = scrollLeft; target.scrollTop = scrollTop; }; if (options.behavior === 'smooth') { if (hasNativeScrollBehavior) { target.scroll(options); } else { var timingFn = scrollTimingFunction; var startTime = Date.now(); var currentScrollTop = target === docEl ? window.pageYOffset : target.scrollTop; var currentScrollLeft = target === docEl ? window.pageXOffset : target.scrollLeft; var deltaScrollTop = scrollTop - currentScrollTop; var deltaScrollLeft = scrollLeft - currentScrollLeft; var duration = 300; var updateFrame = function updateFrame() { var now = Date.now(); var elapsedTime = now - startTime; if (elapsedTime < duration) { scrollTo(timingFn(elapsedTime, currentScrollLeft, deltaScrollLeft, duration), timingFn(elapsedTime, currentScrollTop, deltaScrollTop, duration)); requestAnimationFrame(updateFrame); } else { scrollTo(scrollLeft, scrollTop); } }.bind(this); updateFrame(); } } else if (options.behavior === 'silent') {
            var headers = queryAllRoot('app-header', document.body); headers.forEach(function (header) { header.setAttribute('silent-scroll', ''); });// Browsers keep the scroll momentum even if the bottom of the scrolling
            // content was reached. This means that calling scroll({top: 0, behavior:
            // 'silent'}) when the momentum is still going will result in more scroll
            // events and thus scroll effects. This seems to only apply when using
            // document scrolling. Therefore, when should we remove the class from the
            // document element?
            if (_scrollTimer) { window.cancelAnimationFrame(_scrollTimer); } _scrollTimer = window.requestAnimationFrame(function () { headers.forEach(function (header) { header.removeAttribute('silent-scroll'); }); _scrollTimer = null; }); scrollTo(scrollLeft, scrollTop);
          } else { scrollTo(scrollLeft, scrollTop); }
        };/**
      * @interface
      * @extends {Polymer_LegacyElementMixin}
      */var ElementWithBackground =/*#__PURE__*/function () {
          function ElementWithBackground() { babelHelpers.classCallCheck(this, ElementWithBackground); } babelHelpers.createClass(ElementWithBackground, [{ key: "isContentBelow",/** @return {boolean} True if there's content below the current element */value: function isContentBelow() { }/** @return {boolean} true if the element is on screen */ }, {
            key: "isOnScreen", value: function isOnScreen() { }/**
                     * @param {string} title
                     * @return {?Element} Element in local dom by id.
                     */}, { key: "_getDOMRef", value: function _getDOMRef(title) { } }]); return ElementWithBackground;
        }(); var AppScrollEffectsBehavior = [IronScrollTargetBehavior, {
          properties: {/**
       * A space-separated list of the effects names that will be triggered when
       * the user scrolls. e.g. `waterfall parallax-background` installs the
       * `waterfall` and `parallax-background`.
       */effects: { type: String },/**
       * An object that configurates the effects installed via the `effects`
       * property. e.g.
       * ```js
       *  element.effectsConfig = {
       *   "blend-background": {
       *     "startsAt": 0.5
       *   }
       * };
       * ```
       * Every effect has at least two config properties: `startsAt` and
       * `endsAt`. These properties indicate when the event should start and end
       * respectively and relative to the overall element progress. So for
       * example, if `blend-background` starts at `0.5`, the effect will only
       * start once the current element reaches 0.5 of its progress. In this
       * context, the progress is a value in the range of `[0, 1]` that
       * indicates where this element is on the screen relative to the viewport.
       */effectsConfig: { type: Object, value: function value() { return {}; } },/**
       * Disables CSS transitions and scroll effects on the element.
       */disabled: { type: Boolean, reflectToAttribute: true, value: false },/**
       * Allows to set a `scrollTop` threshold. When greater than 0,
       * `thresholdTriggered` is true only when the scroll target's `scrollTop`
       * has reached this value.
       *
       * For example, if `threshold = 100`, `thresholdTriggered` is true when
       * the `scrollTop` is at least `100`.
       */threshold: { type: Number, value: 0 },/**
       * True if the `scrollTop` threshold (set in `scrollTopThreshold`) has
       * been reached.
       */thresholdTriggered: { type: Boolean, notify: true, readOnly: true, reflectToAttribute: true }
          }, observers: ['_effectsChanged(effects, effectsConfig, isAttached)'],/**
     * Updates the scroll state. This method should be overridden
     * by the consumer of this behavior.
     *
     * @method _updateScrollState
     * @param {number} scrollTop
     */_updateScrollState: function _updateScrollState(scrollTop) { },/**
     * Returns true if the current element is on the screen.
     * That is, visible in the current viewport. This method should be
     * overridden by the consumer of this behavior.
     *
     * @method isOnScreen
     * @return {boolean}
     */isOnScreen: function isOnScreen() { return false; },/**
     * Returns true if there's content below the current element. This method
     * should be overridden by the consumer of this behavior.
     *
     * @method isContentBelow
     * @return {boolean}
     */isContentBelow: function isContentBelow() { return false; },/**
     * List of effects handlers that will take place during scroll.
     *
     * @type {Array<Function>}
     */_effectsRunFn: null,/**
     * List of the effects definitions installed via the `effects` property.
     *
     * @type {Array<Object>}
     */_effects: null,/**
     * The clamped value of `_scrollTop`.
     * @type number
     */get _clampedScrollTop() { return Math.max(0, this._scrollTop); }, attached: function attached() { this._scrollStateChanged(); }, detached: function detached() { this._tearDownEffects(); },/**
     * Creates an effect object from an effect's name that can be used to run
     * effects programmatically.
     *
     * @method createEffect
     * @param {string} effectName The effect's name registered via `Polymer.AppLayout.registerEffect`.
     * @param {Object=} effectConfig The effect config object. (Optional)
     * @return {Object} An effect object with the following functions:
     *
     *  * `effect.setUp()`, Sets up the requirements for the effect.
     *       This function is called automatically before the `effect` function
     * returns.
     *  * `effect.run(progress, y)`, Runs the effect given a `progress`.
     *  * `effect.tearDown()`, Cleans up any DOM nodes or element references
     * used by the effect.
     *
     * Example:
     * ```js
     * var parallax = element.createEffect('parallax-background');
     * // runs the effect
     * parallax.run(0.5, 0);
     * ```
     */createEffect: function createEffect(effectName, effectConfig) { var effectDef = _scrollEffects[effectName]; if (!effectDef) { throw new ReferenceError(this._getUndefinedMsg(effectName)); } var prop = this._boundEffect(effectDef, effectConfig || {}); prop.setUp(); return prop; },/**
     * Called when `effects` or `effectsConfig` changes.
     */_effectsChanged: function _effectsChanged(effects, effectsConfig, isAttached) { this._tearDownEffects(); if (!effects || !isAttached) { return; } effects.split(' ').forEach(function (effectName) { var effectDef; if (effectName !== '') { if (effectDef = _scrollEffects[effectName]) { this._effects.push(this._boundEffect(effectDef, effectsConfig[effectName])); } else { console.warn(this._getUndefinedMsg(effectName)); } } }, this); this._setUpEffect(); },/**
     * Forces layout
     */_layoutIfDirty: function _layoutIfDirty() { return this.offsetWidth; },/**
     * Returns an effect object bound to the current context.
     *
     * @param {Object} effectDef
     * @param {Object=} effectsConfig The effect config object if the effect accepts config values. (Optional)
     */_boundEffect: function _boundEffect(effectDef, effectsConfig) {
            effectsConfig = effectsConfig || {}; var startsAt = parseFloat(effectsConfig.startsAt || 0); var endsAt = parseFloat(effectsConfig.endsAt || 1); var deltaS = endsAt - startsAt; var noop = function noop() { };// fast path if possible
            var runFn = startsAt === 0 && endsAt === 1 ? effectDef.run : function (progress, y) { effectDef.run.call(this, Math.max(0, (progress - startsAt) / deltaS), y); }; return { setUp: effectDef.setUp ? effectDef.setUp.bind(this, effectsConfig) : noop, run: effectDef.run ? runFn.bind(this) : noop, tearDown: effectDef.tearDown ? effectDef.tearDown.bind(this) : noop };
          },/**
     * Sets up the effects.
     */_setUpEffect: function _setUpEffect() {
            if (this.isAttached && this._effects) {
              this._effectsRunFn = []; this._effects.forEach(function (effectDef) {// install the effect only if no error was reported
                if (effectDef.setUp() !== false) { this._effectsRunFn.push(effectDef.run); }
              }, this);
            }
          },/**
     * Tears down the effects.
     */_tearDownEffects: function _tearDownEffects() { if (this._effects) { this._effects.forEach(function (effectDef) { effectDef.tearDown(); }); } this._effectsRunFn = []; this._effects = []; },/**
     * Runs the effects.
     *
     * @param {number} p The progress
     * @param {number} y The top position of the current element relative to the viewport.
     */_runEffects: function _runEffects(p, y) { if (this._effectsRunFn) { this._effectsRunFn.forEach(function (run) { run(p, y); }); } },/**
     * Overrides the `_scrollHandler`.
     */_scrollHandler: function _scrollHandler() { this._scrollStateChanged(); }, _scrollStateChanged: function _scrollStateChanged() { if (!this.disabled) { var scrollTop = this._clampedScrollTop; this._updateScrollState(scrollTop); if (this.threshold > 0) { this._setThresholdTriggered(scrollTop >= this.threshold); } } },/**
     * Override this method to return a reference to a node in the local DOM.
     * The node is consumed by a scroll effect.
     *
     * @param {string} id The id for the node.
     */_getDOMRef: function _getDOMRef(id) { console.warn('_getDOMRef', '`' + id + '` is undefined'); }, _getUndefinedMsg: function _getUndefinedMsg(effectName) { return 'Scroll effect `' + effectName + '` is undefined. ' + 'Did you forget to import app-layout/app-scroll-effects/effects/' + effectName + '.html ?'; }
        }]; Polymer({/** @override */_template: html(_templateObject4_e13d1b4010eb11ec83cd7fddb4847b33()), is: 'app-header', behaviors: [AppScrollEffectsBehavior, AppLayoutBehavior], properties: {/**
       * If true, the header will automatically collapse when scrolling down.
       * That is, the `sticky` element remains visible when the header is fully
       *condensed whereas the rest of the elements will collapse below `sticky`
       *element.
       *
       * By default, the `sticky` element is the first toolbar in the light DOM:
       *
       *```html
       * <app-header condenses>
       *   <app-toolbar>This toolbar remains on top</app-toolbar>
       *   <app-toolbar></app-toolbar>
       *   <app-toolbar></app-toolbar>
       * </app-header>
       * ```
       *
       * Additionally, you can specify which toolbar or element remains visible in
       *condensed mode by adding the `sticky` attribute to that element. For
       *example: if we want the last toolbar to remain visible, we can add the
       *`sticky` attribute to it.
       *
       *```html
       * <app-header condenses>
       *   <app-toolbar></app-toolbar>
       *   <app-toolbar></app-toolbar>
       *   <app-toolbar sticky>This toolbar remains on top</app-toolbar>
       * </app-header>
       * ```
       *
       * Note the `sticky` element must be a direct child of `app-header`.
       */condenses: { type: Boolean, value: false },/**
       * Mantains the header fixed at the top so it never moves away.
       */fixed: { type: Boolean, value: false },/**
       * Slides back the header when scrolling back up.
       */reveals: { type: Boolean, value: false },/**
       * Displays a shadow below the header.
       */shadow: { type: Boolean, reflectToAttribute: true, value: false }
        }, observers: ['_configChanged(isAttached, condenses, fixed)'],/**
     * A cached offsetHeight of the current element.
     *
     * @type {number}
     */_height: 0,/**
     * The distance in pixels the header will be translated to when scrolling.
     *
     * @type {number}
     */_dHeight: 0,/**
     * The offsetTop of `_stickyEl`
     *
     * @type {number}
     */_stickyElTop: 0,/**
     * A reference to the element that remains visible when the header condenses.
     *
     * @type {HTMLElement}
     */_stickyElRef: null,/**
     * The header's top value used for the `transformY`
     *
     * @type {number}
     */_top: 0,/**
     * The current scroll progress.
     *
     * @type {number}
     */_progress: 0, _wasScrollingDown: false, _initScrollTop: 0, _initTimestamp: 0, _lastTimestamp: 0, _lastScrollTop: 0,/**
     * The distance the header is allowed to move away.
     *
     * @type {number}
     */get _maxHeaderTop() { return this.fixed ? this._dHeight : this._height + 5; },/**
     * Returns a reference to the sticky element.
     *
     * @return {HTMLElement}?
     */get _stickyEl() {
            if (this._stickyElRef) { return this._stickyElRef; } var nodes = dom(this.$.slot).getDistributedNodes();// Get the element with the sticky attribute on it or the first element in
            // the light DOM.
            for (var i = 0, node; node =/** @type {!HTMLElement} */nodes[i]; i++) { if (node.nodeType === Node.ELEMENT_NODE) { if (node.hasAttribute('sticky')) { this._stickyElRef = node; break; } else if (!this._stickyElRef) { this._stickyElRef = node; } } } return this._stickyElRef;
          }, _configChanged: function _configChanged() { this.resetLayout(); this._notifyLayoutChanged(); }, _updateLayoutStates: function _updateLayoutStates() {
            if (this.offsetWidth === 0 && this.offsetHeight === 0) { return; } var scrollTop = this._clampedScrollTop; var firstSetup = this._height === 0 || scrollTop === 0; var currentDisabled = this.disabled; this._height = this.offsetHeight; this._stickyElRef = null; this.disabled = true;// prepare for measurement
            if (!firstSetup) { this._updateScrollState(0, true); } if (this._mayMove()) { this._dHeight = this._stickyEl ? this._height - this._stickyEl.offsetHeight : 0; } else { this._dHeight = 0; } this._stickyElTop = this._stickyEl ? this._stickyEl.offsetTop : 0; this._setUpEffect(); if (firstSetup) { this._updateScrollState(scrollTop, true); } else { this._updateScrollState(this._lastScrollTop, true); this._layoutIfDirty(); }// restore no transition
            this.disabled = currentDisabled;
          },/**
     * Updates the scroll state.
     *
     * @param {number} scrollTop
     * @param {boolean=} forceUpdate (default: false)
     */_updateScrollState: function _updateScrollState(scrollTop, forceUpdate) {
            if (this._height === 0) { return; } var progress = 0; var top = 0; var lastTop = this._top; var lastScrollTop = this._lastScrollTop; var maxHeaderTop = this._maxHeaderTop; var dScrollTop = scrollTop - this._lastScrollTop; var absDScrollTop = Math.abs(dScrollTop); var isScrollingDown = scrollTop > this._lastScrollTop; var now = performance.now(); if (this._mayMove()) { top = this._clamp(this.reveals ? lastTop + dScrollTop : scrollTop, 0, maxHeaderTop); } if (scrollTop >= this._dHeight) { top = this.condenses && !this.fixed ? Math.max(this._dHeight, top) : top; this.style.transitionDuration = '0ms'; } if (this.reveals && !this.disabled && absDScrollTop < 100) {// set the initial scroll position
              if (now - this._initTimestamp > 300 || this._wasScrollingDown !== isScrollingDown) { this._initScrollTop = scrollTop; this._initTimestamp = now; } if (scrollTop >= maxHeaderTop) {// check if the header is allowed to snap
                if (Math.abs(this._initScrollTop - scrollTop) > 30 || absDScrollTop > 10) { if (isScrollingDown && scrollTop >= maxHeaderTop) { top = maxHeaderTop; } else if (!isScrollingDown && scrollTop >= this._dHeight) { top = this.condenses && !this.fixed ? this._dHeight : 0; } var scrollVelocity = dScrollTop / (now - this._lastTimestamp); this.style.transitionDuration = this._clamp((top - lastTop) / scrollVelocity, 0, 300) + 'ms'; } else { top = this._top; }
              }
            } if (this._dHeight === 0) { progress = scrollTop > 0 ? 1 : 0; } else { progress = top / this._dHeight; } if (!forceUpdate) { this._lastScrollTop = scrollTop; this._top = top; this._wasScrollingDown = isScrollingDown; this._lastTimestamp = now; } if (forceUpdate || progress !== this._progress || lastTop !== top || scrollTop === 0) { this._progress = progress; this._runEffects(progress, top); this._transformHeader(top); }
          },/**
     * Returns true if the current header is allowed to move as the user scrolls.
     *
     * @return {boolean}
     */_mayMove: function _mayMove() { return this.condenses || !this.fixed; },/**
     * Returns true if the current header will condense based on the size of the
     * header and the `consenses` property.
     *
     * @return {boolean}
     */willCondense: function willCondense() { return this._dHeight > 0 && this.condenses; },/**
     * Returns true if the current element is on the screen.
     * That is, visible in the current viewport.
     *
     * @method isOnScreen
     * @return {boolean}
     */isOnScreen: function isOnScreen() { return this._height !== 0 && this._top < this._height; },/**
     * Returns true if there's content below the current element.
     *
     * @method isContentBelow
     * @return {boolean}
     */isContentBelow: function isContentBelow() { return this._top === 0 ? this._clampedScrollTop > 0 : this._clampedScrollTop - this._maxHeaderTop >= 0; },/**
     * Transforms the header.
     *
     * @param {number} y
     */_transformHeader: function _transformHeader(y) { this.translate3d(0, -y + 'px', 0); if (this._stickyEl) { this.translate3d(0, this.condenses && y >= this._stickyElTop ? Math.min(y, this._dHeight) - this._stickyElTop + 'px' : 0, 0, this._stickyEl); } }, _clamp: function _clamp(v, min, max) { return Math.min(max, Math.max(min, v)); }, _ensureBgContainers: function _ensureBgContainers() { if (!this._bgContainer) { this._bgContainer = document.createElement('div'); this._bgContainer.id = 'background'; this._bgRear = document.createElement('div'); this._bgRear.id = 'backgroundRearLayer'; this._bgContainer.appendChild(this._bgRear); this._bgFront = document.createElement('div'); this._bgFront.id = 'backgroundFrontLayer'; this._bgContainer.appendChild(this._bgFront); dom(this.root).insertBefore(this._bgContainer, this.$.contentContainer); } }, _getDOMRef: function _getDOMRef(id) { switch (id) { case 'backgroundFrontLayer': this._ensureBgContainers(); return this._bgFront; case 'backgroundRearLayer': this._ensureBgContainers(); return this._bgRear; case 'background': this._ensureBgContainers(); return this._bgContainer; case 'mainTitle': return dom(this).querySelector('[main-title]'); case 'condensedTitle': return dom(this).querySelector('[condensed-title]'); }return null; },/**
     * Returns an object containing the progress value of the scroll effects
     * and the top position of the header.
     *
     * @method getScrollState
     * @return {Object}
     */getScrollState: function getScrollState() { return { progress: this._progress, top: this._top }; }
        }); Polymer({/** @override */_template: html(_templateObject5_e13d1b4010eb11ec83cd7fddb4847b33()), is: 'app-header-layout', behaviors: [AppLayoutBehavior], properties: {/**
       * If true, the current element will have its own scrolling region.
       * Otherwise, it will use the document scroll to control the header.
       */hasScrollingRegion: { type: Boolean, value: false, reflectToAttribute: true }
        }, observers: ['resetLayout(isAttached, hasScrollingRegion)'],/**
     * A reference to the app-header element.
     *
     * @property header
     */get header() { return dom(this.$.headerSlot).getDistributedNodes()[0]; }, _updateLayoutStates: function _updateLayoutStates() {
            var header = this.header; if (!this.isAttached || !header) { return; }// Remove the initializing class, which staticly positions the header and
            // the content until the height of the header can be read.
            this.$.wrapper.classList.remove('initializing');// Update scroll target.
            header.scrollTarget = this.hasScrollingRegion ? this.$.contentContainer : this.ownerDocument.documentElement;// Get header height here so that style reads are batched together before
            // style writes (i.e. getBoundingClientRect() below).
            var headerHeight = header.offsetHeight;// Update the header position.
            if (!this.hasScrollingRegion) { requestAnimationFrame(function () { var rect = this.getBoundingClientRect(); var rightOffset = document.documentElement.clientWidth - rect.right; header.style.left = rect.left + 'px'; header.style.right = rightOffset + 'px'; }.bind(this)); } else { header.style.left = ''; header.style.right = ''; }// Update the content container position.
            var containerStyle = this.$.contentContainer.style; if (header.fixed && !header.condenses && this.hasScrollingRegion) {// If the header size does not change and we're using a scrolling region,
              // exclude the header area from the scrolling region so that the header
              // doesn't overlap the scrollbar.
              containerStyle.marginTop = headerHeight + 'px'; containerStyle.paddingTop = '';
            } else { containerStyle.paddingTop = headerHeight + 'px'; containerStyle.marginTop = ''; }
          }
        }); registerEffect('waterfall', {/** @this {Waterfall} */run: function run() { this.shadow = this.isOnScreen() && this.isContentBelow(); } });/**
       * @interface
       * @extends {ElementWithBackground}
       */var Waterfall = function Waterfall() { babelHelpers.classCallCheck(this, Waterfall);/** @type {boolean} */this.shadow; }; var IronMeta =/*#__PURE__*/function () {/**
     * @param {{
     *   type: (string|null|undefined),
     *   key: (string|null|undefined),
     *   value: *,
     * }=} options
     */function IronMeta(options) { babelHelpers.classCallCheck(this, IronMeta); IronMeta[' '](options);/** @type {string} */this.type = options && options.type || 'default';/** @type {string|null|undefined} */this.key = options && options.key; if (options && 'value' in options) {/** @type {*} */this.value = options.value; } }/** @return {*} */babelHelpers.createClass(IronMeta, [{
          key: "byKey",/**
       * @param {string} key
       * @return {*}
       */value: function byKey(key) { this.key = key; return this.value; }
        }, { key: "value", get: function get() { var type = this.type; var key = this.key; if (type && key) { return IronMeta.types[type] && IronMeta.types[type][key]; } }/** @param {*} value */, set: function set(value) { var type = this.type; var key = this.key; if (type && key) { type = IronMeta.types[type] = IronMeta.types[type] || {}; if (value == null) { delete type[key]; } else { type[key] = value; } } }/** @return {!Array<*>} */ }, { key: "list", get: function get() { var type = this.type; if (type) { var items = IronMeta.types[this.type]; if (!items) { return []; } return Object.keys(items).map(function (key) { return metaDatas[this.type][key]; }, this); } } }]); return IronMeta;
        }();;// This function is used to convince Closure not to remove constructor calls
        // for instances that are not held anywhere. For example, when
        // `new IronMeta({...})` is used only for the side effect of adding a value.
        IronMeta[' '] = function () { }; IronMeta.types = {}; var metaDatas = IronMeta.types;/**
                                  `iron-meta` is a generic element you can use for sharing information across the
                                  DOM tree. It uses [monostate pattern](http://c2.com/cgi/wiki?MonostatePattern)
                                  such that any instance of iron-meta has access to the shared information. You
                                  can use `iron-meta` to share whatever you want (or create an extension [like
                                  x-meta] for enhancements).
                                  
                                  The `iron-meta` instances containing your actual data can be loaded in an
                                  import, or constructed in any way you see fit. The only requirement is that you
                                  create them before you try to access them.
                                  
                                  Examples:
                                  
                                  If I create an instance like this:
                                  
                                      <iron-meta key="info" value="foo/bar"></iron-meta>
                                  
                                  Note that value="foo/bar" is the metadata I've defined. I could define more
                                  attributes or use child nodes to define additional metadata.
                                  
                                  Now I can access that element (and it's metadata) from any iron-meta instance
                                  via the byKey method, e.g.
                                  
                                      meta.byKey('info');
                                  
                                  Pure imperative form would be like:
                                  
                                      document.createElement('iron-meta').byKey('info');
                                  
                                  Or, in a Polymer element, you can include a meta in your template:
                                  
                                      <iron-meta id="meta"></iron-meta>
                                      ...
                                      this.$.meta.byKey('info');
                                  
                                  @group Iron Elements
                                  @demo demo/index.html
                                  @element iron-meta
                                  */Polymer({
          is: 'iron-meta', properties: {/**
       * The type of meta-data.  All meta-data of the same type is stored
       * together.
       * @type {string}
       */type: { type: String, value: 'default' },/**
       * The key used to store `value` under the `type` namespace.
       * @type {?string}
       */key: { type: String },/**
       * The meta-data to store or retrieve.
       * @type {*}
       */value: { type: String, notify: true },/**
       * If true, `value` is set to the iron-meta instance itself.
       */self: { type: Boolean, observer: '_selfChanged' }, __meta: { type: Boolean, computed: '__computeMeta(type, key, value)' }
          }, hostAttributes: { hidden: true }, __computeMeta: function __computeMeta(type, key, value) { var meta = new IronMeta({ type: type, key: key }); if (value !== undefined && value !== meta.value) { meta.value = value; } else if (this.value !== meta.value) { this.value = meta.value; } return meta; }, get list() { return this.__meta && this.__meta.list; }, _selfChanged: function _selfChanged(self) { if (self) { this.value = this; } },/**
     * Retrieves meta data value by key.
     *
     * @method byKey
     * @param {string} key The key of the meta-data to be returned.
     * @return {*}
     */byKey: function byKey(key) { return new IronMeta({ type: this.type, key: key }).value; }
        }); Polymer({
          _template: html(_templateObject6_e13d1b4010eb11ec83cd7fddb4847b33()), is: 'iron-icon', properties: {/**
       * The name of the icon to use. The name should be of the form:
       * `iconset_name:icon_name`.
       */icon: { type: String },/**
       * The name of the theme to used, if one is specified by the
       * iconset.
       */theme: { type: String },/**
       * If using iron-icon without an iconset, you can set the src to be
       * the URL of an individual icon image file. Note that this will take
       * precedence over a given icon attribute.
       */src: { type: String },/**
       * @type {!IronMeta}
       */_meta: { value: Base.create('iron-meta', { type: 'iconset' }) }
          }, observers: ['_updateIcon(_meta, isAttached)', '_updateIcon(theme, isAttached)', '_srcChanged(src, isAttached)', '_iconChanged(icon, isAttached)'], _DEFAULT_ICONSET: 'icons', _iconChanged: function _iconChanged(icon) { var parts = (icon || '').split(':'); this._iconName = parts.pop(); this._iconsetName = parts.pop() || this._DEFAULT_ICONSET; this._updateIcon(); }, _srcChanged: function _srcChanged(src) { this._updateIcon(); }, _usesIconset: function _usesIconset() { return this.icon || !this.src; },/** @suppress {visibility} */_updateIcon: function _updateIcon() { if (this._usesIconset()) { if (this._img && this._img.parentNode) { dom(this.root).removeChild(this._img); } if (this._iconName === '') { if (this._iconset) { this._iconset.removeIcon(this); } } else if (this._iconsetName && this._meta) { this._iconset =/** @type {?Polymer.Iconset} */this._meta.byKey(this._iconsetName); if (this._iconset) { this._iconset.applyIcon(this, this._iconName, this.theme); this.unlisten(window, 'iron-iconset-added', '_updateIcon'); } else { this.listen(window, 'iron-iconset-added', '_updateIcon'); } } } else { if (this._iconset) { this._iconset.removeIcon(this); } if (!this._img) { this._img = document.createElement('img'); this._img.style.width = '100%'; this._img.style.height = '100%'; this._img.draggable = false; } this._img.src = this.src; dom(this.root).appendChild(this._img); } }
        }); var KEY_IDENTIFIER = { 'U+0008': 'backspace', 'U+0009': 'tab', 'U+001B': 'esc', 'U+0020': 'space', 'U+007F': 'del' };/**
      * Special table for KeyboardEvent.keyCode.
      * KeyboardEvent.keyIdentifier is better, and KeyBoardEvent.key is even better
      * than that.
      *
      * Values from:
      * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent.keyCode#Value_of_keyCode
      */var KEY_CODE = { 8: 'backspace', 9: 'tab', 13: 'enter', 27: 'esc', 33: 'pageup', 34: 'pagedown', 35: 'end', 36: 'home', 32: 'space', 37: 'left', 38: 'up', 39: 'right', 40: 'down', 46: 'del', 106: '*' };/**
      * MODIFIER_KEYS maps the short name for modifier keys used in a key
      * combo string to the property name that references those same keys
      * in a KeyboardEvent instance.
      */var MODIFIER_KEYS = { 'shift': 'shiftKey', 'ctrl': 'ctrlKey', 'alt': 'altKey', 'meta': 'metaKey' };/**
      * KeyboardEvent.key is mostly represented by printable character made by
      * the keyboard, with unprintable keys labeled nicely.
      *
      * However, on OS X, Alt+char can make a Unicode character that follows an
      * Apple-specific mapping. In this case, we fall back to .keyCode.
      */var KEY_CHAR = /[a-z0-9*]/;/**
                               * Matches a keyIdentifier string.
                               */var IDENT_CHAR = /U\+/;/**
                           * Matches arrow keys in Gecko 27.0+
                           */var ARROW_KEY = /^arrow/;/**
                             * Matches space keys everywhere (notably including IE10's exceptional name
                             * `spacebar`).
                             */var SPACE_KEY = /^space(bar)?/;/**
                                   * Matches ESC key.
                                   *
                                   * Value from: http://w3c.github.io/uievents-key/#key-Escape
                                   */var ESC_KEY = /^escape$/;/**
                             * Transforms the key.
                             * @param {string} key The KeyBoardEvent.key
                             * @param {Boolean} [noSpecialChars] Limits the transformation to
                             * alpha-numeric characters.
                             */function transformKey(key, noSpecialChars) {
          var validKey = ''; if (key) {
            var lKey = key.toLowerCase(); if (lKey === ' ' || SPACE_KEY.test(lKey)) { validKey = 'space'; } else if (ESC_KEY.test(lKey)) { validKey = 'esc'; } else if (lKey.length == 1) { if (!noSpecialChars || KEY_CHAR.test(lKey)) { validKey = lKey; } } else if (ARROW_KEY.test(lKey)) { validKey = lKey.replace('arrow', ''); } else if (lKey == 'multiply') {// numpad '*' can map to Multiply on IE/Windows
              validKey = '*';
            } else { validKey = lKey; }
          } return validKey;
        } function transformKeyIdentifier(keyIdent) { var validKey = ''; if (keyIdent) { if (keyIdent in KEY_IDENTIFIER) { validKey = KEY_IDENTIFIER[keyIdent]; } else if (IDENT_CHAR.test(keyIdent)) { keyIdent = parseInt(keyIdent.replace('U+', '0x'), 16); validKey = String.fromCharCode(keyIdent).toLowerCase(); } else { validKey = keyIdent.toLowerCase(); } } return validKey; } function transformKeyCode(keyCode) {
          var validKey = ''; if (Number(keyCode)) {
            if (keyCode >= 65 && keyCode <= 90) {// ascii a-z
              // lowercase is 32 offset from uppercase
              validKey = String.fromCharCode(32 + keyCode);
            } else if (keyCode >= 112 && keyCode <= 123) {// function keys f1-f12
              validKey = 'f' + (keyCode - 112 + 1);
            } else if (keyCode >= 48 && keyCode <= 57) {// top 0-9 keys
              validKey = String(keyCode - 48);
            } else if (keyCode >= 96 && keyCode <= 105) {// num pad 0-9
              validKey = String(keyCode - 96);
            } else { validKey = KEY_CODE[keyCode]; }
          } return validKey;
        }/**
     * Calculates the normalized key for a KeyboardEvent.
     * @param {KeyboardEvent} keyEvent
     * @param {Boolean} [noSpecialChars] Set to true to limit keyEvent.key
     * transformation to alpha-numeric chars. This is useful with key
     * combinations like shift + 2, which on FF for MacOS produces
     * keyEvent.key = @
     * To get 2 returned, set noSpecialChars = true
     * To get @ returned, set noSpecialChars = false
     */function normalizedKeyForEvent(keyEvent, noSpecialChars) {// Fall back from .key, to .detail.key for artifical keyboard events,
          // and then to deprecated .keyIdentifier and .keyCode.
          if (keyEvent.key) { return transformKey(keyEvent.key, noSpecialChars); } if (keyEvent.detail && keyEvent.detail.key) { return transformKey(keyEvent.detail.key, noSpecialChars); } return transformKeyIdentifier(keyEvent.keyIdentifier) || transformKeyCode(keyEvent.keyCode) || '';
        } function keyComboMatchesEvent(keyCombo, event) {// For combos with modifiers we support only alpha-numeric keys
          var keyEvent = normalizedKeyForEvent(event, keyCombo.hasModifiers); return keyEvent === keyCombo.key && (!keyCombo.hasModifiers || !!event.shiftKey === !!keyCombo.shiftKey && !!event.ctrlKey === !!keyCombo.ctrlKey && !!event.altKey === !!keyCombo.altKey && !!event.metaKey === !!keyCombo.metaKey);
        } function parseKeyComboString(keyComboString) { if (keyComboString.length === 1) { return { combo: keyComboString, key: keyComboString, event: 'keydown' }; } return keyComboString.split('+').reduce(function (parsedKeyCombo, keyComboPart) { var eventParts = keyComboPart.split(':'); var keyName = eventParts[0]; var event = eventParts[1]; if (keyName in MODIFIER_KEYS) { parsedKeyCombo[MODIFIER_KEYS[keyName]] = true; parsedKeyCombo.hasModifiers = true; } else { parsedKeyCombo.key = keyName; parsedKeyCombo.event = event || 'keydown'; } return parsedKeyCombo; }, { combo: keyComboString.split(':').shift() }); } function parseEventString(eventString) { return eventString.trim().split(' ').map(function (keyComboString) { return parseKeyComboString(keyComboString); }); }/**
     * `Polymer.IronA11yKeysBehavior` provides a normalized interface for processing
     * keyboard commands that pertain to [WAI-ARIA best
     * practices](http://www.w3.org/TR/wai-aria-practices/#kbd_general_binding). The
     * element takes care of browser differences with respect to Keyboard events and
     * uses an expressive syntax to filter key presses.
     *
     * Use the `keyBindings` prototype property to express what combination of keys
     * will trigger the callback. A key binding has the format
     * `"KEY+MODIFIER:EVENT": "callback"` (`"KEY": "callback"` or
     * `"KEY:EVENT": "callback"` are valid as well). Some examples:
     *
     *      keyBindings: {
     *        'space': '_onKeydown', // same as 'space:keydown'
     *        'shift+tab': '_onKeydown',
     *        'enter:keypress': '_onKeypress',
     *        'esc:keyup': '_onKeyup'
     *      }
     *
     * The callback will receive with an event containing the following information
     * in `event.detail`:
     *
     *      _onKeydown: function(event) {
     *        console.log(event.detail.combo); // KEY+MODIFIER, e.g. "shift+tab"
     *        console.log(event.detail.key); // KEY only, e.g. "tab"
     *        console.log(event.detail.event); // EVENT, e.g. "keydown"
     *        console.log(event.detail.keyboardEvent); // the original KeyboardEvent
     *      }
     *
     * Use the `keyEventTarget` attribute to set up event handlers on a specific
     * node.
     *
     * See the [demo source
     * code](https://github.com/PolymerElements/iron-a11y-keys-behavior/blob/master/demo/x-key-aware.html)
     * for an example.
     *
     * @demo demo/index.html
     * @polymerBehavior
     */var IronA11yKeysBehavior = {
          properties: {/**
       * The EventTarget that will be firing relevant KeyboardEvents. Set it to
       * `null` to disable the listeners.
       * @type {?EventTarget}
       */keyEventTarget: { type: Object, value: function value() { return this; } },/**
       * If true, this property will cause the implementing element to
       * automatically stop propagation on any handled KeyboardEvents.
       */stopKeyboardEventPropagation: { type: Boolean, value: false }, _boundKeyHandlers: { type: Array, value: function value() { return []; } },// We use this due to a limitation in IE10 where instances will have
            // own properties of everything on the "prototype".
            _imperativeKeyBindings: { type: Object, value: function value() { return {}; } }
          }, observers: ['_resetKeyEventListeners(keyEventTarget, _boundKeyHandlers)'],/**
     * To be used to express what combination of keys  will trigger the relative
     * callback. e.g. `keyBindings: { 'esc': '_onEscPressed'}`
     * @type {!Object}
     */keyBindings: {}, registered: function registered() { this._prepKeyBindings(); }, attached: function attached() { this._listenKeyEventListeners(); }, detached: function detached() { this._unlistenKeyEventListeners(); },/**
     * Can be used to imperatively add a key binding to the implementing
     * element. This is the imperative equivalent of declaring a keybinding
     * in the `keyBindings` prototype property.
     *
     * @param {string} eventString
     * @param {string} handlerName
     */addOwnKeyBinding: function addOwnKeyBinding(eventString, handlerName) { this._imperativeKeyBindings[eventString] = handlerName; this._prepKeyBindings(); this._resetKeyEventListeners(); },/**
     * When called, will remove all imperatively-added key bindings.
     */removeOwnKeyBindings: function removeOwnKeyBindings() { this._imperativeKeyBindings = {}; this._prepKeyBindings(); this._resetKeyEventListeners(); },/**
     * Returns true if a keyboard event matches `eventString`.
     *
     * @param {KeyboardEvent} event
     * @param {string} eventString
     * @return {boolean}
     */keyboardEventMatchesKeys: function keyboardEventMatchesKeys(event, eventString) { var keyCombos = parseEventString(eventString); for (var i = 0; i < keyCombos.length; ++i) { if (keyComboMatchesEvent(keyCombos[i], event)) { return true; } } return false; }, _collectKeyBindings: function _collectKeyBindings() { var keyBindings = this.behaviors.map(function (behavior) { return behavior.keyBindings; }); if (keyBindings.indexOf(this.keyBindings) === -1) { keyBindings.push(this.keyBindings); } return keyBindings; }, _prepKeyBindings: function _prepKeyBindings() {
            this._keyBindings = {}; this._collectKeyBindings().forEach(function (keyBindings) { for (var eventString in keyBindings) { this._addKeyBinding(eventString, keyBindings[eventString]); } }, this); for (var eventString in this._imperativeKeyBindings) { this._addKeyBinding(eventString, this._imperativeKeyBindings[eventString]); }// Give precedence to combos with modifiers to be checked first.
            for (var eventName in this._keyBindings) { this._keyBindings[eventName].sort(function (kb1, kb2) { var b1 = kb1[0].hasModifiers; var b2 = kb2[0].hasModifiers; return b1 === b2 ? 0 : b1 ? -1 : 1; }); }
          }, _addKeyBinding: function _addKeyBinding(eventString, handlerName) { parseEventString(eventString).forEach(function (keyCombo) { this._keyBindings[keyCombo.event] = this._keyBindings[keyCombo.event] || []; this._keyBindings[keyCombo.event].push([keyCombo, handlerName]); }, this); }, _resetKeyEventListeners: function _resetKeyEventListeners() { this._unlistenKeyEventListeners(); if (this.isAttached) { this._listenKeyEventListeners(); } }, _listenKeyEventListeners: function _listenKeyEventListeners() { if (!this.keyEventTarget) { return; } Object.keys(this._keyBindings).forEach(function (eventName) { var keyBindings = this._keyBindings[eventName]; var boundKeyHandler = this._onKeyBindingEvent.bind(this, keyBindings); this._boundKeyHandlers.push([this.keyEventTarget, eventName, boundKeyHandler]); this.keyEventTarget.addEventListener(eventName, boundKeyHandler); }, this); }, _unlistenKeyEventListeners: function _unlistenKeyEventListeners() {
            var keyHandlerTuple; var keyEventTarget; var eventName; var boundKeyHandler; while (this._boundKeyHandlers.length) {// My kingdom for block-scope binding and destructuring assignment..
              keyHandlerTuple = this._boundKeyHandlers.pop(); keyEventTarget = keyHandlerTuple[0]; eventName = keyHandlerTuple[1]; boundKeyHandler = keyHandlerTuple[2]; keyEventTarget.removeEventListener(eventName, boundKeyHandler);
            }
          }, _onKeyBindingEvent: function _onKeyBindingEvent(keyBindings, event) {
            if (this.stopKeyboardEventPropagation) { event.stopPropagation(); }// if event has been already prevented, don't do anything
            if (event.defaultPrevented) { return; } for (var i = 0; i < keyBindings.length; i++) {
              var keyCombo = keyBindings[i][0]; var handlerName = keyBindings[i][1]; if (keyComboMatchesEvent(keyCombo, event)) {
                this._triggerKeyHandler(keyCombo, handlerName, event);// exit the loop if eventDefault was prevented
                if (event.defaultPrevented) { return; }
              }
            }
          }, _triggerKeyHandler: function _triggerKeyHandler(keyCombo, handlerName, keyboardEvent) { var detail = Object.create(keyCombo); detail.keyboardEvent = keyboardEvent; var event = new CustomEvent(keyCombo.event, { detail: detail, cancelable: true }); this[handlerName].call(this, event); if (event.defaultPrevented) { keyboardEvent.preventDefault(); } }
        }; var IronA11yAnnouncer = Polymer({/** @override */_template: html(_templateObject7_e13d1b4010eb11ec83cd7fddb4847b33()), is: 'iron-a11y-announcer', properties: {/**
       * The value of mode is used to set the `aria-live` attribute
       * for the element that will be announced. Valid values are: `off`,
       * `polite` and `assertive`.
       */mode: { type: String, value: 'polite' },/**
       * The timeout on refreshing the announcement text. Larger timeouts are
       * needed for certain screen readers to re-announce the same message.
       */timeout: { type: Number, value: 150 }, _text: { type: String, value: '' }
        },/** @override */created: function created() { if (!IronA11yAnnouncer.instance) { IronA11yAnnouncer.instance = this; } document.addEventListener('iron-announce', this._onIronAnnounce.bind(this)); },/**
     * Cause a text string to be announced by screen readers.
     *
     * @param {string} text The text that should be announced.
     */announce: function announce(text) { this._text = ''; this.async(function () { this._text = text; }, this.timeout); }, _onIronAnnounce: function _onIronAnnounce(event) { if (event.detail && event.detail.text) { this.announce(event.detail.text); } }
        }); IronA11yAnnouncer.instance = null; IronA11yAnnouncer.requestAvailability = function () { if (!IronA11yAnnouncer.instance) { IronA11yAnnouncer.instance = document.createElement('iron-a11y-announcer'); } if (document.body) { document.body.appendChild(IronA11yAnnouncer.instance); } else { document.addEventListener('load', function () { document.body.appendChild(IronA11yAnnouncer.instance); }); } }; var IronValidatableBehaviorMeta = null;/**
                                                  * `Use IronValidatableBehavior` to implement an element that validates
                                                  * user input. Use the related `IronValidatorBehavior` to add custom
                                                  * validation logic to an iron-input.
                                                  *
                                                  * By default, an `<iron-form>` element validates its fields when the user
                                                  * presses the submit button. To validate a form imperatively, call the form's
                                                  * `validate()` method, which in turn will call `validate()` on all its
                                                  * children. By using `IronValidatableBehavior`, your custom element
                                                  * will get a public `validate()`, which will return the validity of the
                                                  * element, and a corresponding `invalid` attribute, which can be used for
                                                  * styling.
                                                  *
                                                  * To implement the custom validation logic of your element, you must override
                                                  * the protected `_getValidity()` method of this behaviour, rather than
                                                  * `validate()`. See
                                                  * [this](https://github.com/PolymerElements/iron-form/blob/master/demo/simple-element.html)
                                                  * for an example.
                                                  *
                                                  * ### Accessibility
                                                  *
                                                  * Changing the `invalid` property, either manually or by calling `validate()`
                                                  * will update the `aria-invalid` attribute.
                                                  *
                                                  * @demo demo/index.html
                                                  * @polymerBehavior
                                                  */var IronValidatableBehavior = {
          properties: {/**
       * Name of the validator to use.
       */validator: { type: String },/**
       * True if the last call to `validate` is invalid.
       */invalid: { notify: true, reflectToAttribute: true, type: Boolean, value: false, observer: '_invalidChanged' }
          }, registered: function registered() { IronValidatableBehaviorMeta = new IronMeta({ type: 'validator' }); }, _invalidChanged: function _invalidChanged() { if (this.invalid) { this.setAttribute('aria-invalid', 'true'); } else { this.removeAttribute('aria-invalid'); } },/* Recompute this every time it's needed, because we don't know if the
     * underlying IronValidatableBehaviorMeta has changed. */get _validator() { return IronValidatableBehaviorMeta && IronValidatableBehaviorMeta.byKey(this.validator); },/**
     * @return {boolean} True if the validator `validator` exists.
     */hasValidator: function hasValidator() { return this._validator != null; },/**
     * Returns true if the `value` is valid, and updates `invalid`. If you want
     * your element to have custom validation logic, do not override this method;
     * override `_getValidity(value)` instead.
      * @param {Object} value Deprecated: The value to be validated. By default,
     * it is passed to the validator's `validate()` function, if a validator is
     set.
     * If this argument is not specified, then the element's `value` property
     * is used, if it exists.
     * @return {boolean} True if `value` is valid.
     */validate: function validate(value) {// If this is an element that also has a value property, and there was
            // no explicit value argument passed, use the element's property instead.
            if (value === undefined && this.value !== undefined) this.invalid = !this._getValidity(this.value); else this.invalid = !this._getValidity(value); return !this.invalid;
          },/**
     * Returns true if `value` is valid.  By default, it is passed
     * to the validator's `validate()` function, if a validator is set. You
     * should override this method if you want to implement custom validity
     * logic for your element.
     *
     * @param {Object} value The value to be validated.
     * @return {boolean} True if `value` is valid.
     */_getValidity: function _getValidity(value) { if (this.hasValidator()) { return this._validator.validate(value); } return true; }
        }; Polymer({
          _template: html(_templateObject8_e13d1b4010eb11ec83cd7fddb4847b33()), is: 'iron-input', behaviors: [IronValidatableBehavior],/**
     * Fired whenever `validate()` is called.
     *
     * @event iron-input-validate
     */properties: {/**
       * Use this property instead of `value` for two-way data binding, or to
       * set a default value for the input. **Do not** use the distributed
       * input's `value` property to set a default value.
       */bindValue: { type: String, value: '' },/**
       * Computed property that echoes `bindValue` (mostly used for Polymer 1.0
       * backcompatibility, if you were one-way binding to the Polymer 1.0
       * `input is="iron-input"` value attribute).
       */value: { type: String, computed: '_computeValue(bindValue)' },/**
       * Regex-like list of characters allowed as input; all characters not in the
       * list will be rejected. The recommended format should be a list of allowed
       * characters, for example, `[a-zA-Z0-9.+-!;:]`.
       *
       * This pattern represents the allowed characters for the field; as the user
       * inputs text, each individual character will be checked against the
       * pattern (rather than checking the entire value as a whole). If a
       * character is not a match, it will be rejected.
       *
       * Pasted input will have each character checked individually; if any
       * character doesn't match `allowedPattern`, the entire pasted string will
       * be rejected.
       *
       * Note: if you were using `iron-input` in 1.0, you were also required to
       * set `prevent-invalid-input`. This is no longer needed as of Polymer 2.0,
       * and will be set automatically for you if an `allowedPattern` is provided.
       *
       */allowedPattern: { type: String },/**
       * Set to true to auto-validate the input value as you type.
       */autoValidate: { type: Boolean, value: false },/**
       * The native input element.
       */_inputElement: Object
          }, observers: ['_bindValueChanged(bindValue, _inputElement)'], listeners: { 'input': '_onInput', 'keypress': '_onKeypress' }, created: function created() { IronA11yAnnouncer.requestAvailability(); this._previousValidInput = ''; this._patternAlreadyChecked = false; }, attached: function attached() {// If the input is added at a later time, update the internal reference.
            this._observer = dom(this).observeNodes(function (info) { this._initSlottedInput(); }.bind(this));
          }, detached: function detached() { if (this._observer) { dom(this).unobserveNodes(this._observer); this._observer = null; } },/**
     * Returns the distributed input element.
     */get inputElement() { return this._inputElement; }, _initSlottedInput: function _initSlottedInput() { this._inputElement = this.getEffectiveChildren()[0]; if (this.inputElement && this.inputElement.value) { this.bindValue = this.inputElement.value; } this.fire('iron-input-ready'); }, get _patternRegExp() { var pattern; if (this.allowedPattern) { pattern = new RegExp(this.allowedPattern); } else { switch (this.inputElement.type) { case 'number': pattern = /[0-9.,e-]/; break; } } return pattern; },/**
     * @suppress {checkTypes}
     */_bindValueChanged: function _bindValueChanged(bindValue, inputElement) {// The observer could have run before attached() when we have actually
            // initialized this property.
            if (!inputElement) { return; } if (bindValue === undefined) { inputElement.value = null; } else if (bindValue !== inputElement.value) { this.inputElement.value = bindValue; } if (this.autoValidate) { this.validate(); }// manually notify because we don't want to notify until after setting value
            this.fire('bind-value-changed', { value: bindValue });
          }, _onInput: function _onInput() {// Need to validate each of the characters pasted if they haven't
            // been validated inside `_onKeypress` already.
            if (this.allowedPattern && !this._patternAlreadyChecked) { var valid = this._checkPatternValidity(); if (!valid) { this._announceInvalidCharacter('Invalid string of characters not entered.'); this.inputElement.value = this._previousValidInput; } } this.bindValue = this._previousValidInput = this.inputElement.value; this._patternAlreadyChecked = false;
          }, _isPrintable: function _isPrintable(event) {// What a control/printable character is varies wildly based on the browser.
            // - most control characters (arrows, backspace) do not send a `keypress`
            // event
            //   in Chrome, but the *do* on Firefox
            // - in Firefox, when they do send a `keypress` event, control chars have
            //   a charCode = 0, keyCode = xx (for ex. 40 for down arrow)
            // - printable characters always send a keypress event.
            // - in Firefox, printable chars always have a keyCode = 0. In Chrome, the
            // keyCode
            //   always matches the charCode.
            // None of this makes any sense.
            // For these keys, ASCII code == browser keycode.
            var anyNonPrintable = event.keyCode == 8 ||// backspace
              event.keyCode == 9 ||// tab
              event.keyCode == 13 ||// enter
              event.keyCode == 27;// escape
            // For these keys, make sure it's a browser keycode and not an ASCII code.
            var mozNonPrintable = event.keyCode == 19 ||// pause
              event.keyCode == 20 ||// caps lock
              event.keyCode == 45 ||// insert
              event.keyCode == 46 ||// delete
              event.keyCode == 144 ||// num lock
              event.keyCode == 145 ||// scroll lock
              event.keyCode > 32 && event.keyCode < 41 ||// page up/down, end, home, arrows
              event.keyCode > 111 && event.keyCode < 124;// fn keys
            return !anyNonPrintable && !(event.charCode == 0 && mozNonPrintable);
          }, _onKeypress: function _onKeypress(event) {
            if (!this.allowedPattern && this.inputElement.type !== 'number') { return; } var regexp = this._patternRegExp; if (!regexp) { return; }// Handle special keys and backspace
            if (event.metaKey || event.ctrlKey || event.altKey) { return; }// Check the pattern either here or in `_onInput`, but not in both.
            this._patternAlreadyChecked = true; var thisChar = String.fromCharCode(event.charCode); if (this._isPrintable(event) && !regexp.test(thisChar)) { event.preventDefault(); this._announceInvalidCharacter('Invalid character ' + thisChar + ' not entered.'); }
          }, _checkPatternValidity: function _checkPatternValidity() { var regexp = this._patternRegExp; if (!regexp) { return true; } for (var i = 0; i < this.inputElement.value.length; i++) { if (!regexp.test(this.inputElement.value[i])) { return false; } } return true; },/**
     * Returns true if `value` is valid. The validator provided in `validator`
     * will be used first, then any constraints.
     * @return {boolean} True if the value is valid.
     */validate: function validate() {
            if (!this.inputElement) { this.invalid = false; return true; }// Use the nested input's native validity.
            var valid = this.inputElement.checkValidity();// Only do extra checking if the browser thought this was valid.
            if (valid) {// Empty, required input is invalid
              if (this.required && this.bindValue === '') { valid = false; } else if (this.hasValidator()) { valid = IronValidatableBehavior.validate.call(this, this.bindValue); }
            } this.invalid = !valid; this.fire('iron-input-validate'); return valid;
          }, _announceInvalidCharacter: function _announceInvalidCharacter(message) { this.fire('iron-announce', { text: message }); }, _computeValue: function _computeValue(bindValue) { return bindValue; }
        });// Give the user the choice to opt out of font loading.
        if (!window.polymerSkipLoadingFontRoboto) { var link = document.createElement('link'); link.rel = 'stylesheet'; link.type = 'text/css'; link.crossOrigin = 'anonymous'; link.href = 'https://fonts.googleapis.com/css?family=Roboto+Mono:400,700|Roboto:400,300,300italic,400italic,500,500italic,700,700italic'; document.head.appendChild(link); } var template$1 = html(_templateObject9_e13d1b4010eb11ec83cd7fddb4847b33()); template$1.setAttribute('style', 'display: none;'); document.head.appendChild(template$1.content); var PaperInputAddonBehavior = {
          attached: function attached() { this.fire('addon-attached'); },/**
     * The function called by `<paper-input-container>` when the input value or
     * validity changes.
     * @param {{
     *   invalid: boolean,
     *   inputElement: (Element|undefined),
     *   value: (string|undefined)
     * }} state -
     *     inputElement: The input element.
     *     value: The input value.
     *     invalid: True if the input value is invalid.
     */update: function update(state) { }
        }; Polymer({/** @override */_template: html(_templateObject10_e13d1b4010eb11ec83cd7fddb4847b33()), is: 'paper-input-char-counter', behaviors: [PaperInputAddonBehavior], properties: { _charCounterStr: { type: String, value: '0' } },/**
     * This overrides the update function in PaperInputAddonBehavior.
     * @param {{
     *   inputElement: (Element|undefined),
     *   value: (string|undefined),
     *   invalid: boolean
     * }} state -
     *     inputElement: The input element.
     *     value: The input value.
     *     invalid: True if the input value is invalid.
     */update: function update(state) { if (!state.inputElement) { return; } state.value = state.value || ''; var counter = state.value.toString().length.toString(); if (state.inputElement.hasAttribute('maxlength')) { counter += '/' + state.inputElement.getAttribute('maxlength'); } this._charCounterStr = counter; }
        }); var template$2 = html(_templateObject11_e13d1b4010eb11ec83cd7fddb4847b33()); template$2.setAttribute('style', 'display: none;'); document.head.appendChild(template$2.content); var template$3 = html(_templateObject12_e13d1b4010eb11ec83cd7fddb4847b33()); template$3.setAttribute('style', 'display: none;'); document.head.appendChild(template$3.content); var template$4 = html(_templateObject13_e13d1b4010eb11ec83cd7fddb4847b33()); template$4.setAttribute('style', 'display: none;'); document.head.appendChild(template$4.content);/*
                                                 `<paper-input-container>` is a container for a `<label>`, an `<iron-input>` or
                                                 `<textarea>` and optional add-on elements such as an error message or character
                                                 counter, used to implement Material Design text fields.
                                                                                             For example:
                                                                                                 <paper-input-container>
                                                     <label slot="label">Your name</label>
                                                     <iron-input slot="input">
                                                       <input>
                                                     </iron-input>
                                                     // In Polymer 1.0, you would use `<input is="iron-input" slot="input">`
                                                 instead of the above.
                                                   </paper-input-container>
                                                                                             You can style the nested `<input>` however you want; if you want it to look like
                                                 a Material Design input, you can style it with the
                                                 --paper-input-container-shared-input-style mixin.
                                                                                             Do not wrap `<paper-input-container>` around elements that already include it,
                                                 such as `<paper-input>`. Doing so may cause events to bounce infinitely between
                                                 the container and its contained element.
                                                                                             ### Listening for input changes
                                                                                             By default, it listens for changes on the `bind-value` attribute on its children
                                                 nodes and perform tasks such as auto-validating and label styling when the
                                                 `bind-value` changes. You can configure the attribute it listens to with the
                                                 `attr-for-value` attribute.
                                                                                             ### Using a custom input element
                                                                                             You can use a custom input element in a `<paper-input-container>`, for example
                                                 to implement a compound input field like a social security number input. The
                                                 custom input element should have the `paper-input-input` class, have a
                                                 `notify:true` value property and optionally implements
                                                 `Polymer.IronValidatableBehavior` if it is validatable.
                                                                                                 <paper-input-container attr-for-value="ssn-value">
                                                     <label slot="label">Social security number</label>
                                                     <ssn-input slot="input" class="paper-input-input"></ssn-input>
                                                   </paper-input-container>
                                                                                             
                                                 If you're using a `<paper-input-container>` imperatively, it's important to make
                                                 sure that you attach its children (the `iron-input` and the optional `label`)
                                                 before you attach the `<paper-input-container>` itself, so that it can be set up
                                                 correctly.
                                                                                             ### Validation
                                                                                             If the `auto-validate` attribute is set, the input container will validate the
                                                 input and update the container styling when the input value changes.
                                                                                             ### Add-ons
                                                                                             Add-ons are child elements of a `<paper-input-container>` with the `add-on`
                                                 attribute and implements the `Polymer.PaperInputAddonBehavior` behavior. They
                                                 are notified when the input value or validity changes, and may implement
                                                 functionality such as error messages or character counters. They appear at the
                                                 bottom of the input.
                                                                                             ### Prefixes and suffixes
                                                 These are child elements of a `<paper-input-container>` with the `prefix`
                                                 or `suffix` attribute, and are displayed inline with the input, before or after.
                                                                                                 <paper-input-container>
                                                     <div slot="prefix">$</div>
                                                     <label slot="label">Total</label>
                                                     <iron-input slot="input">
                                                       <input>
                                                     </iron-input>
                                                     // In Polymer 1.0, you would use `<input is="iron-input" slot="input">`
                                                 instead of the above. <paper-icon-button slot="suffix"
                                                 icon="clear"></paper-icon-button>
                                                   </paper-input-container>
                                                                                             ### Styling
                                                                                             The following custom properties and mixins are available for styling:
                                                                                             Custom property | Description | Default
                                                 ----------------|-------------|----------
                                                 `--paper-input-container-color` | Label and underline color when the input is not focused | `--secondary-text-color`
                                                 `--paper-input-container-focus-color` | Label and underline color when the input is focused | `--primary-color`
                                                 `--paper-input-container-invalid-color` | Label and underline color when the input is is invalid | `--error-color`
                                                 `--paper-input-container-input-color` | Input foreground color | `--primary-text-color`
                                                 `--paper-input-container` | Mixin applied to the container | `{}`
                                                 `--paper-input-container-disabled` | Mixin applied to the container when it's disabled | `{}`
                                                 `--paper-input-container-label` | Mixin applied to the label | `{}`
                                                 `--paper-input-container-label-focus` | Mixin applied to the label when the input is focused | `{}`
                                                 `--paper-input-container-label-floating` | Mixin applied to the label when floating | `{}`
                                                 `--paper-input-container-input` | Mixin applied to the input | `{}`
                                                 `--paper-input-container-input-align` | The vertical-align property of the input | `bottom`
                                                 `--paper-input-container-input-disabled` | Mixin applied to the input when the component is disabled | `{}`
                                                 `--paper-input-container-input-focus` | Mixin applied to the input when focused | `{}`
                                                 `--paper-input-container-input-invalid` | Mixin applied to the input when invalid | `{}`
                                                 `--paper-input-container-input-webkit-spinner` | Mixin applied to the webkit spinner | `{}`
                                                 `--paper-input-container-input-webkit-clear` | Mixin applied to the webkit clear button | `{}`
                                                 `--paper-input-container-input-webkit-calendar-picker-indicator` | Mixin applied to the webkit calendar picker indicator | `{}`
                                                 `--paper-input-container-ms-clear` | Mixin applied to the Internet Explorer clear button | `{}`
                                                 `--paper-input-container-underline` | Mixin applied to the underline | `{}`
                                                 `--paper-input-container-underline-focus` | Mixin applied to the underline when the input is focused | `{}`
                                                 `--paper-input-container-underline-disabled` | Mixin applied to the underline when the input is disabled | `{}`
                                                 `--paper-input-prefix` | Mixin applied to the input prefix | `{}`
                                                 `--paper-input-suffix` | Mixin applied to the input suffix | `{}`
                                                 `--paper-input-container-label-before` | Mixin applied to label before pseudo element | {}
                                                 `--paper-input-container-label-after` | Mixin applied to label after pseudo element (useful for required asterisk) | {}
                                                                                             This element is `display:block` by default, but you can set the `inline`
                                                 attribute to make it `display:inline-block`.
                                                 */Polymer({/** @override */_template: html(_templateObject14_e13d1b4010eb11ec83cd7fddb4847b33()), is: 'paper-input-container', properties: {/**
       * Set to true to disable the floating label. The label disappears when the
       * input value is not null.
       */noLabelFloat: { type: Boolean, value: false },/**
       * Set to true to always float the floating label.
       */alwaysFloatLabel: { type: Boolean, value: false },/**
       * The attribute to listen for value changes on.
       */attrForValue: { type: String, value: 'bind-value' },/**
       * Set to true to auto-validate the input value when it changes.
       */autoValidate: { type: Boolean, value: false },/**
       * True if the input is invalid. This property is set automatically when the
       * input value changes if auto-validating, or when the `iron-input-validate`
       * event is heard from a child.
       */invalid: { observer: '_invalidChanged', type: Boolean, value: false },/**
       * True if the input has focus.
       */focused: { readOnly: true, type: Boolean, value: false, notify: true }, _addons: {
            type: Array// do not set a default value here intentionally - it will be initialized
            // lazily when a distributed child is attached, which may occur before
            // configuration for this element in polyfill.
          }, _inputHasContent: { type: Boolean, value: false }, _inputSelector: { type: String, value: 'input,iron-input,textarea,.paper-input-input' }, _boundOnFocus: { type: Function, value: function value() { return this._onFocus.bind(this); } }, _boundOnBlur: { type: Function, value: function value() { return this._onBlur.bind(this); } }, _boundOnInput: { type: Function, value: function value() { return this._onInput.bind(this); } }, _boundValueChanged: { type: Function, value: function value() { return this._onValueChanged.bind(this); } }
        }, listeners: { 'addon-attached': '_onAddonAttached', 'iron-input-validate': '_onIronInputValidate' }, get _valueChangedEvent() { return this.attrForValue + '-changed'; }, get _propertyForValue() { return dashToCamelCase(this.attrForValue); }, get _inputElement() { return dom(this).querySelector(this._inputSelector); }, get _inputElementValue() { return this._inputElement[this._propertyForValue] || this._inputElement.value; },/** @override */ready: function ready() {// Paper-input treats a value of undefined differently at startup than
          // the rest of the time (specifically: it does not validate it at startup,
          // but it does after that. We need to track whether the first time we
          // encounter the value is basically this first time, so that we can validate
          // it correctly the rest of the time. See
          // https://github.com/PolymerElements/paper-input/issues/605
          this.__isFirstValueUpdate = true; if (!this._addons) { this._addons = []; } this.addEventListener('focus', this._boundOnFocus, true); this.addEventListener('blur', this._boundOnBlur, true);
        },/** @override */attached: function attached() {
          if (this.attrForValue) { this._inputElement.addEventListener(this._valueChangedEvent, this._boundValueChanged); } else { this.addEventListener('input', this._onInput); }// Only validate when attached if the input already has a value.
          if (this._inputElementValue && this._inputElementValue != '') { this._handleValueAndAutoValidate(this._inputElement); } else { this._handleValue(this._inputElement); }
        },/** @private */_onAddonAttached: function _onAddonAttached(event) { if (!this._addons) { this._addons = []; } var target = event.target; if (this._addons.indexOf(target) === -1) { this._addons.push(target); if (this.isAttached) { this._handleValue(this._inputElement); } } },/** @private */_onFocus: function _onFocus() { this._setFocused(true); },/** @private */_onBlur: function _onBlur() { this._setFocused(false); this._handleValueAndAutoValidate(this._inputElement); },/** @private */_onInput: function _onInput(event) { this._handleValueAndAutoValidate(event.target); },/** @private */_onValueChanged: function _onValueChanged(event) {
          var input = event.target;// Paper-input treats a value of undefined differently at startup than
          // the rest of the time (specifically: it does not validate it at startup,
          // but it does after that. If this is in fact the bootup case, ignore
          // validation, just this once.
          if (this.__isFirstValueUpdate) { this.__isFirstValueUpdate = false; if (input.value === undefined || input.value === '') { return; } } this._handleValueAndAutoValidate(event.target);
        },/** @private */_handleValue: function _handleValue(inputElement) {
          var value = this._inputElementValue;// type="number" hack needed because this.value is empty until it's valid
          if (value || value === 0 || inputElement.type === 'number' && !inputElement.checkValidity()) { this._inputHasContent = true; } else { this._inputHasContent = false; } this.updateAddons({ inputElement: inputElement, value: value, invalid: this.invalid });
        },/** @private */_handleValueAndAutoValidate: function _handleValueAndAutoValidate(inputElement) {
          if (this.autoValidate && inputElement) { var valid; if (inputElement.validate) { valid = inputElement.validate(this._inputElementValue); } else { valid = inputElement.checkValidity(); } this.invalid = !valid; }// Call this last to notify the add-ons.
          this._handleValue(inputElement);
        },/** @private */_onIronInputValidate: function _onIronInputValidate(event) { this.invalid = this._inputElement.invalid; },/** @private */_invalidChanged: function _invalidChanged() { if (this._addons) { this.updateAddons({ invalid: this.invalid }); } },/**
     * Call this to update the state of add-ons.
     * @param {Object} state Add-on state.
     */updateAddons: function updateAddons(state) { for (var addon, index = 0; addon = this._addons[index]; index++) { addon.update(state); } },/** @private */_computeInputContentClass: function _computeInputContentClass(noLabelFloat, alwaysFloatLabel, focused, invalid, _inputHasContent) {
            var cls = 'input-content'; if (!noLabelFloat) {
              var label = this.querySelector('label'); if (alwaysFloatLabel || _inputHasContent) {
                cls += ' label-is-floating';// If the label is floating, ignore any offsets that may have been
                // applied from a prefix element.
                this.$.labelAndInputContainer.style.position = 'static'; if (invalid) { cls += ' is-invalid'; } else if (focused) { cls += ' label-is-highlighted'; }
              } else {// When the label is not floating, it should overlap the input element.
                if (label) { this.$.labelAndInputContainer.style.position = 'relative'; } if (invalid) { cls += ' is-invalid'; }
              }
            } else { if (_inputHasContent) { cls += ' label-is-hidden'; } if (invalid) { cls += ' is-invalid'; } } if (focused) { cls += ' focused'; } return cls;
          },/** @private */_computeUnderlineClass: function _computeUnderlineClass(focused, invalid) { var cls = 'underline'; if (invalid) { cls += ' is-invalid'; } else if (focused) { cls += ' is-highlighted'; } return cls; },/** @private */_computeAddOnContentClass: function _computeAddOnContentClass(focused, invalid) { var cls = 'add-on-content'; if (invalid) { cls += ' is-invalid'; } else if (focused) { cls += ' is-highlighted'; } return cls; }
        }); Polymer({/** @override */_template: html(_templateObject15_e13d1b4010eb11ec83cd7fddb4847b33()), is: 'paper-input-error', behaviors: [PaperInputAddonBehavior], properties: {/**
       * True if the error is showing.
       */invalid: { readOnly: true, reflectToAttribute: true, type: Boolean }
        },/**
     * This overrides the update function in PaperInputAddonBehavior.
     * @param {{
     *   inputElement: (Element|undefined),
     *   value: (string|undefined),
     *   invalid: boolean
     * }} state -
     *     inputElement: The input element.
     *     value: The input value.
     *     invalid: True if the input value is invalid.
     */update: function update(state) { this._setInvalid(state.invalid); }
        }); var IronFormElementBehavior = {
          properties: {/**
       * The name of this element.
       */name: { type: String },/**
       * The value for this element.
       * @type {*}
       */value: { notify: true, type: String },/**
       * Set to true to mark the input as required. If used in a form, a
       * custom element that uses this behavior should also use
       * IronValidatableBehavior and define a custom validation method.
       * Otherwise, a `required` element will always be considered valid.
       * It's also strongly recommended to provide a visual style for the element
       * when its value is invalid.
       */required: { type: Boolean, value: false }
          },// Empty implementations for backcompatibility.
          attached: function attached() { }, detached: function detached() { }
        }; var IronControlState = {
          properties: {/**
       * If true, the element currently has focus.
       */focused: { type: Boolean, value: false, notify: true, readOnly: true, reflectToAttribute: true },/**
       * If true, the user cannot interact with this element.
       */disabled: { type: Boolean, value: false, notify: true, observer: '_disabledChanged', reflectToAttribute: true },/**
       * Value of the `tabindex` attribute before `disabled` was activated.
       * `null` means the attribute was not present.
       * @type {?string|undefined}
       */_oldTabIndex: { type: String }, _boundFocusBlurHandler: { type: Function, value: function value() { return this._focusBlurHandler.bind(this); } }
          }, observers: ['_changedControlState(focused, disabled)'],/**
     * @return {void}
     */ready: function ready() { this.addEventListener('focus', this._boundFocusBlurHandler, true); this.addEventListener('blur', this._boundFocusBlurHandler, true); }, _focusBlurHandler: function _focusBlurHandler(event) {// Polymer takes care of retargeting events.
            this._setFocused(event.type === 'focus'); return;
          }, _disabledChanged: function _disabledChanged(disabled, old) {
            this.setAttribute('aria-disabled', disabled ? 'true' : 'false'); this.style.pointerEvents = disabled ? 'none' : ''; if (disabled) {// Read the `tabindex` attribute instead of the `tabIndex` property.
              // The property returns `-1` if there is no `tabindex` attribute.
              // This distinction is important when restoring the value because
              // leaving `-1` hides shadow root children from the tab order.
              this._oldTabIndex = this.getAttribute('tabindex'); this._setFocused(false); this.tabIndex = -1; this.blur();
            } else if (this._oldTabIndex !== undefined) { if (this._oldTabIndex === null) { this.removeAttribute('tabindex'); } else { this.setAttribute('tabindex', this._oldTabIndex); } }
          }, _changedControlState: function _changedControlState() {// _controlStateChanged is abstract, follow-on behaviors may implement it
            if (this._controlStateChanged) { this._controlStateChanged(); }
          }
        };// aria-labelledby) and add-ons.
        var PaperInputHelper = {}; PaperInputHelper.NextLabelID = 1; PaperInputHelper.NextAddonID = 1; PaperInputHelper.NextInputID = 1;/**
                                     * Use `PaperInputBehavior` to implement inputs with `<paper-input-container>`.
                                     * This behavior is implemented by `<paper-input>`. It exposes a number of
                                     * properties from `<paper-input-container>` and `<input is="iron-input">` and
                                     * they should be bound in your template.
                                     *
                                     * The input element can be accessed by the `inputElement` property if you need
                                     * to access properties or methods that are not exposed.
                                     * @polymerBehavior PaperInputBehavior
                                     */var PaperInputBehaviorImpl = {
          properties: {/**
       * Fired when the input changes due to user interaction.
       *
       * @event change
       */ /**
           * The label for this input. If you're using PaperInputBehavior to
           * implement your own paper-input-like element, bind this to
           * `<label>`'s content and `hidden` property, e.g.
           * `<label hidden$="[[!label]]">[[label]]</label>` in your `template`
           */label: { type: String },/**
       * The value for this input. If you're using PaperInputBehavior to
       * implement your own paper-input-like element, bind this to
       * the `<iron-input>`'s `bindValue`
       * property, or the value property of your input that is `notify:true`.
       * @type {*}
       */value: { notify: true, type: String },/**
       * Set to true to disable this input. If you're using PaperInputBehavior to
       * implement your own paper-input-like element, bind this to
       * both the `<paper-input-container>`'s and the input's `disabled` property.
       */disabled: { type: Boolean, value: false },/**
       * Returns true if the value is invalid. If you're using PaperInputBehavior
       * to implement your own paper-input-like element, bind this to both the
       * `<paper-input-container>`'s and the input's `invalid` property.
       *
       * If `autoValidate` is true, the `invalid` attribute is managed
       * automatically, which can clobber attempts to manage it manually.
       */invalid: { type: Boolean, value: false, notify: true },/**
       * Set this to specify the pattern allowed by `preventInvalidInput`. If
       * you're using PaperInputBehavior to implement your own paper-input-like
       * element, bind this to the `<input is="iron-input">`'s `allowedPattern`
       * property.
       */allowedPattern: { type: String },/**
       * The type of the input. The supported types are the
       * [native input's
       * types](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_<input>_types).
       * If you're using PaperInputBehavior to implement your own paper-input-like
       * element, bind this to the (Polymer 1) `<input is="iron-input">`'s or
       * (Polymer 2)
       * `<iron-input>`'s `type` property.
       */type: { type: String },/**
       * The datalist of the input (if any). This should match the id of an
       * existing `<datalist>`. If you're using PaperInputBehavior to implement
       * your own paper-input-like element, bind this to the `<input
       * is="iron-input">`'s `list` property.
       */list: { type: String },/**
       * A pattern to validate the `input` with. If you're using
       * PaperInputBehavior to implement your own paper-input-like element, bind
       * this to the `<input is="iron-input">`'s `pattern` property.
       */pattern: { type: String },/**
       * Set to true to mark the input as required. If you're using
       * PaperInputBehavior to implement your own paper-input-like element, bind
       * this to the `<input is="iron-input">`'s `required` property.
       */required: { type: Boolean, value: false },/**
       * The error message to display when the input is invalid. If you're using
       * PaperInputBehavior to implement your own paper-input-like element,
       * bind this to the `<paper-input-error>`'s content, if using.
       */errorMessage: { type: String },/**
       * Set to true to show a character counter.
       */charCounter: { type: Boolean, value: false },/**
       * Set to true to disable the floating label. If you're using
       * PaperInputBehavior to implement your own paper-input-like element, bind
       * this to the `<paper-input-container>`'s `noLabelFloat` property.
       */noLabelFloat: { type: Boolean, value: false },/**
       * Set to true to always float the label. If you're using PaperInputBehavior
       * to implement your own paper-input-like element, bind this to the
       * `<paper-input-container>`'s `alwaysFloatLabel` property.
       */alwaysFloatLabel: { type: Boolean, value: false },/**
       * Set to true to auto-validate the input value. If you're using
       * PaperInputBehavior to implement your own paper-input-like element, bind
       * this to the `<paper-input-container>`'s `autoValidate` property.
       */autoValidate: { type: Boolean, value: false },/**
       * Name of the validator to use. If you're using PaperInputBehavior to
       * implement your own paper-input-like element, bind this to
       * the `<input is="iron-input">`'s `validator` property.
       */validator: { type: String },// HTMLInputElement attributes for binding if needed
  /**
       * If you're using PaperInputBehavior to implement your own paper-input-like
       * element, bind this to the `<input is="iron-input">`'s `autocomplete`
       * property.
       */autocomplete: { type: String, value: 'off' },/**
       * If you're using PaperInputBehavior to implement your own paper-input-like
       * element, bind this to the `<input is="iron-input">`'s `autofocus`
       * property.
       *
       * @type {!boolean}
       */autofocus: { type: Boolean, observer: '_autofocusChanged' },/**
       * If you're using PaperInputBehavior to implement your own paper-input-like
       * element, bind this to the `<input is="iron-input">`'s `inputmode`
       * property.
       */inputmode: { type: String },/**
       * The minimum length of the input value.
       * If you're using PaperInputBehavior to implement your own paper-input-like
       * element, bind this to the `<input is="iron-input">`'s `minlength`
       * property.
       */minlength: { type: Number },/**
       * The maximum length of the input value.
       * If you're using PaperInputBehavior to implement your own paper-input-like
       * element, bind this to the `<input is="iron-input">`'s `maxlength`
       * property.
       */maxlength: { type: Number },/**
       * The minimum (numeric or date-time) input value.
       * If you're using PaperInputBehavior to implement your own paper-input-like
       * element, bind this to the `<input is="iron-input">`'s `min` property.
       */min: { type: String },/**
       * The maximum (numeric or date-time) input value.
       * Can be a String (e.g. `"2000-01-01"`) or a Number (e.g. `2`).
       * If you're using PaperInputBehavior to implement your own paper-input-like
       * element, bind this to the `<input is="iron-input">`'s `max` property.
       */max: { type: String },/**
       * Limits the numeric or date-time increments.
       * If you're using PaperInputBehavior to implement your own paper-input-like
       * element, bind this to the `<input is="iron-input">`'s `step` property.
       */step: { type: String },/**
       * If you're using PaperInputBehavior to implement your own paper-input-like
       * element, bind this to the `<input is="iron-input">`'s `name` property.
       */name: { type: String },/**
       * A placeholder string in addition to the label. If this is set, the label
       * will always float.
       */placeholder: {
              type: String,// need to set a default so _computeAlwaysFloatLabel is run
              value: ''
            },/**
       * If you're using PaperInputBehavior to implement your own paper-input-like
       * element, bind this to the `<input is="iron-input">`'s `readonly`
       * property.
       */readonly: { type: Boolean, value: false },/**
       * If you're using PaperInputBehavior to implement your own paper-input-like
       * element, bind this to the `<input is="iron-input">`'s `size` property.
       */size: { type: Number },// Nonstandard attributes for binding if needed
  /**
       * If you're using PaperInputBehavior to implement your own paper-input-like
       * element, bind this to the `<input is="iron-input">`'s `autocapitalize`
       * property.
       *
       * @type {string}
       */autocapitalize: { type: String, value: 'none' },/**
       * If you're using PaperInputBehavior to implement your own paper-input-like
       * element, bind this to the `<input is="iron-input">`'s `autocorrect`
       * property.
       */autocorrect: { type: String, value: 'off' },/**
       * If you're using PaperInputBehavior to implement your own paper-input-like
       * element, bind this to the `<input is="iron-input">`'s `autosave`
       * property, used with type=search.
       */autosave: { type: String },/**
       * If you're using PaperInputBehavior to implement your own paper-input-like
       * element, bind this to the `<input is="iron-input">`'s `results` property,
       * used with type=search.
       */results: { type: Number },/**
       * If you're using PaperInputBehavior to implement your own paper-input-like
       * element, bind this to the `<input is="iron-input">`'s `accept` property,
       * used with type=file.
       */accept: { type: String },/**
       * If you're using PaperInputBehavior to implement your own paper-input-like
       * element, bind this to the`<input is="iron-input">`'s `multiple` property,
       * used with type=file.
       */multiple: { type: Boolean },/** @private */_ariaDescribedBy: { type: String, value: '' },/** @private */_ariaLabelledBy: { type: String, value: '' },/** @private */_inputId: { type: String, value: '' }
          }, listeners: { 'addon-attached': '_onAddonAttached' },/**
     * @type {!Object}
     */keyBindings: { 'shift+tab:keydown': '_onShiftTabDown' },/** @private */hostAttributes: { tabindex: 0 },/**
     * Returns a reference to the input element.
     * @return {!HTMLElement}
     */get inputElement() {// Chrome generates audit errors if an <input type="password"> has a
            // duplicate ID, which is almost always true in Shady DOM. Generate
            // a unique ID instead.
            if (!this.$) { this.$ = {}; } if (!this.$.input) { this._generateInputId(); this.$.input = this.$$('#' + this._inputId); } return this.$.input;
          },/**
     * Returns a reference to the focusable element.
     * @return {!HTMLElement}
     */get _focusableElement() { return this.inputElement; },/** @override */created: function created() {// These types have some default placeholder text; overlapping
            // the label on top of it looks terrible. Auto-float the label in this case.
            this._typesThatHaveText = ['date', 'datetime', 'datetime-local', 'month', 'time', 'week', 'file'];
          },/** @override */attached: function attached() {
            this._updateAriaLabelledBy();// In the 2.0 version of the element, this is handled in `onIronInputReady`,
            // i.e. after the native input has finished distributing. In the 1.0
            // version, the input is in the shadow tree, so it's already available.
            if (!PolymerElement && this.inputElement && this._typesThatHaveText.indexOf(this.inputElement.type) !== -1) { this.alwaysFloatLabel = true; }
          }, _appendStringWithSpace: function _appendStringWithSpace(str, more) { if (str) { str = str + ' ' + more; } else { str = more; } return str; }, _onAddonAttached: function _onAddonAttached(event) { var target = dom(event).rootTarget; if (target.id) { this._ariaDescribedBy = this._appendStringWithSpace(this._ariaDescribedBy, target.id); } else { var id = 'paper-input-add-on-' + PaperInputHelper.NextAddonID++; target.id = id; this._ariaDescribedBy = this._appendStringWithSpace(this._ariaDescribedBy, id); } },/**
     * Validates the input element and sets an error style if needed.
     *
     * @return {boolean}
     */validate: function validate() { return this.inputElement.validate(); },/**
     * Forward focus to inputElement. Overriden from IronControlState.
     */_focusBlurHandler: function _focusBlurHandler(event) {
            IronControlState._focusBlurHandler.call(this, event);// Forward the focus to the nested input.
            if (this.focused && !this._shiftTabPressed && this._focusableElement) { this._focusableElement.focus(); }
          },/**
     * Handler that is called when a shift+tab keypress is detected by the menu.
     *
     * @param {CustomEvent} event A key combination event.
     */_onShiftTabDown: function _onShiftTabDown(event) { var oldTabIndex = this.getAttribute('tabindex'); this._shiftTabPressed = true; this.setAttribute('tabindex', '-1'); this.async(function () { this.setAttribute('tabindex', oldTabIndex); this._shiftTabPressed = false; }, 1); },/**
     * If `autoValidate` is true, then validates the element.
     */_handleAutoValidate: function _handleAutoValidate() { if (this.autoValidate) this.validate(); },/**
     * Restores the cursor to its original position after updating the value.
     * @param {string} newValue The value that should be saved.
     */updateValueAndPreserveCaret: function updateValueAndPreserveCaret(newValue) {// Not all elements might have selection, and even if they have the
            // right properties, accessing them might throw an exception (like for
            // <input type=number>)
            try {
              var start = this.inputElement.selectionStart; this.value = newValue;// The cursor automatically jumps to the end after re-setting the value,
              // so restore it to its original position.
              this.inputElement.selectionStart = start; this.inputElement.selectionEnd = start;
            } catch (e) {// Just set the value and give up on the caret.
              this.value = newValue;
            }
          }, _computeAlwaysFloatLabel: function _computeAlwaysFloatLabel(alwaysFloatLabel, placeholder) { return placeholder || alwaysFloatLabel; }, _updateAriaLabelledBy: function _updateAriaLabelledBy() { var label = dom(this.root).querySelector('label'); if (!label) { this._ariaLabelledBy = ''; return; } var labelledBy; if (label.id) { labelledBy = label.id; } else { labelledBy = 'paper-input-label-' + PaperInputHelper.NextLabelID++; label.id = labelledBy; } this._ariaLabelledBy = labelledBy; }, _generateInputId: function _generateInputId() { if (!this._inputId || this._inputId === '') { this._inputId = 'input-' + PaperInputHelper.NextInputID++; } }, _onChange: function _onChange(event) {// In the Shadow DOM, the `change` event is not leaked into the
            // ancestor tree, so we must do this manually.
            // See
            // https://w3c.github.io/webcomponents/spec/shadow/#events-that-are-not-leaked-into-ancestor-trees.
            if (this.shadowRoot) { this.fire(event.type, { sourceEvent: event }, { node: this, bubbles: event.bubbles, cancelable: event.cancelable }); }
          }, _autofocusChanged: function _autofocusChanged() {// Firefox doesn't respect the autofocus attribute if it's applied after
            // the page is loaded (Chrome/WebKit do respect it), preventing an
            // autofocus attribute specified in markup from taking effect when the
            // element is upgraded. As a workaround, if the autofocus property is set,
            // and the focus hasn't already been moved elsewhere, we take focus.
            if (this.autofocus && this._focusableElement) {// In IE 11, the default document.activeElement can be the page's
              // outermost html element, but there are also cases (under the
              // polyfill?) in which the activeElement is not a real HTMLElement, but
              // just a plain object. We identify the latter case as having no valid
              // activeElement.
              var activeElement = document.activeElement; var isActiveElementValid = babelHelpers.instanceof(activeElement, HTMLElement);// Has some other element has already taken the focus?
              var isSomeElementActive = isActiveElementValid && activeElement !== document.body && activeElement !== document.documentElement;/* IE 11 */if (!isSomeElementActive) {// No specific element has taken the focus yet, so we can take it.
                this._focusableElement.focus();
              }
            }
          }
        };/** @polymerBehavior */var PaperInputBehavior = [IronControlState, IronA11yKeysBehavior, PaperInputBehaviorImpl]; Polymer({
          is: 'paper-input',/** @override */_template: html(_templateObject16_e13d1b4010eb11ec83cd7fddb4847b33()), behaviors: [PaperInputBehavior, IronFormElementBehavior], properties: {
            value: {// Required for the correct TypeScript type-generation
              type: String
            }, inputRole: { type: String, value: undefined }, inputAriaHaspopup: { type: String, value: undefined }
          },/**
     * Returns a reference to the focusable element. Overridden from
     * PaperInputBehavior to correctly focus the native input.
     *
     * @return {!HTMLElement}
     */get _focusableElement() { return this.inputElement._inputElement; },// Note: This event is only available in the 1.0 version of this element.
          // In 2.0, the functionality of `_onIronInputReady` is done in
          // PaperInputBehavior::attached.
          listeners: { 'iron-input-ready': '_onIronInputReady' }, _onIronInputReady: function _onIronInputReady() {// Even though this is only used in the next line, save this for
            // backwards compatibility, since the native input had this ID until 2.0.5.
            if (!this.$.nativeInput) { this.$.nativeInput =/** @type {!Element} */this.$$('input'); } if (this.inputElement && this._typesThatHaveText.indexOf(this.$.nativeInput.type) !== -1) { this.alwaysFloatLabel = true; }// Only validate when attached if the input already has a value.
            if (!!this.inputElement.bindValue) { this.$.container._handleValueAndAutoValidate(this.inputElement); }
          }
        }); var IronFitBehavior = {
          properties: {/**
       * The element that will receive a `max-height`/`width`. By default it is
       * the same as `this`, but it can be set to a child element. This is useful,
       * for example, for implementing a scrolling region inside the element.
       * @type {!Element}
       */sizingTarget: { type: Object, value: function value() { return this; } },/**
       * The element to fit `this` into.
       */fitInto: { type: Object, value: window },/**
       * Will position the element around the positionTarget without overlapping
       * it.
       */noOverlap: { type: Boolean },/**
       * The element that should be used to position the element. If not set, it
       * will default to the parent node.
       * @type {!Element}
       */positionTarget: { type: Element },/**
       * The orientation against which to align the element horizontally
       * relative to the `positionTarget`. Possible values are "left", "right",
       * "center", "auto".
       */horizontalAlign: { type: String },/**
       * The orientation against which to align the element vertically
       * relative to the `positionTarget`. Possible values are "top", "bottom",
       * "middle", "auto".
       */verticalAlign: { type: String },/**
       * If true, it will use `horizontalAlign` and `verticalAlign` values as
       * preferred alignment and if there's not enough space, it will pick the
       * values which minimize the cropping.
       */dynamicAlign: { type: Boolean },/**
       * A pixel value that will be added to the position calculated for the
       * given `horizontalAlign`, in the direction of alignment. You can think
       * of it as increasing or decreasing the distance to the side of the
       * screen given by `horizontalAlign`.
       *
       * If `horizontalAlign` is "left" or "center", this offset will increase or
       * decrease the distance to the left side of the screen: a negative offset
       * will move the dropdown to the left; a positive one, to the right.
       *
       * Conversely if `horizontalAlign` is "right", this offset will increase
       * or decrease the distance to the right side of the screen: a negative
       * offset will move the dropdown to the right; a positive one, to the left.
       */horizontalOffset: { type: Number, value: 0, notify: true },/**
       * A pixel value that will be added to the position calculated for the
       * given `verticalAlign`, in the direction of alignment. You can think
       * of it as increasing or decreasing the distance to the side of the
       * screen given by `verticalAlign`.
       *
       * If `verticalAlign` is "top" or "middle", this offset will increase or
       * decrease the distance to the top side of the screen: a negative offset
       * will move the dropdown upwards; a positive one, downwards.
       *
       * Conversely if `verticalAlign` is "bottom", this offset will increase
       * or decrease the distance to the bottom side of the screen: a negative
       * offset will move the dropdown downwards; a positive one, upwards.
       */verticalOffset: { type: Number, value: 0, notify: true },/**
       * Set to true to auto-fit on attach.
       */autoFitOnAttach: { type: Boolean, value: false },/** @type {?Object} */_fitInfo: { type: Object }
          }, get _fitWidth() { var fitWidth; if (this.fitInto === window) { fitWidth = this.fitInto.innerWidth; } else { fitWidth = this.fitInto.getBoundingClientRect().width; } return fitWidth; }, get _fitHeight() { var fitHeight; if (this.fitInto === window) { fitHeight = this.fitInto.innerHeight; } else { fitHeight = this.fitInto.getBoundingClientRect().height; } return fitHeight; }, get _fitLeft() { var fitLeft; if (this.fitInto === window) { fitLeft = 0; } else { fitLeft = this.fitInto.getBoundingClientRect().left; } return fitLeft; }, get _fitTop() { var fitTop; if (this.fitInto === window) { fitTop = 0; } else { fitTop = this.fitInto.getBoundingClientRect().top; } return fitTop; },/**
     * The element that should be used to position the element,
     * if no position target is configured.
     */get _defaultPositionTarget() { var parent = dom(this).parentNode; if (parent && parent.nodeType === Node.DOCUMENT_FRAGMENT_NODE) { parent = parent.host; } return parent; },/**
     * The horizontal align value, accounting for the RTL/LTR text direction.
     */get _localeHorizontalAlign() {
            if (this._isRTL) {// In RTL, "left" becomes "right".
              if (this.horizontalAlign === 'right') { return 'left'; } if (this.horizontalAlign === 'left') { return 'right'; }
            } return this.horizontalAlign;
          },/**
     * True if the element should be positioned instead of centered.
     * @private
     */get __shouldPosition() { return (this.horizontalAlign || this.verticalAlign) && this.positionTarget; },/**
     * True if the component is RTL.
     * @private
     */get _isRTL() {// Memoize this to avoid expensive calculations & relayouts.
            // Make sure we do it only once
            if (typeof this._memoizedIsRTL === 'undefined') { this._memoizedIsRTL = window.getComputedStyle(this).direction == 'rtl'; } return this._memoizedIsRTL;
          },/** @override */attached: function attached() {
            this.positionTarget = this.positionTarget || this._defaultPositionTarget; if (this.autoFitOnAttach) {
              if (window.getComputedStyle(this).display === 'none') { setTimeout(function () { this.fit(); }.bind(this)); } else {// NOTE: shadydom applies distribution asynchronously
                // for performance reasons webcomponents/shadydom#120
                // Flush to get correct layout info.
                window.ShadyDOM && ShadyDOM.flush(); this.fit();
              }
            }
          },/** @override */detached: function detached() { if (this.__deferredFit) { clearTimeout(this.__deferredFit); this.__deferredFit = null; } },/**
     * Positions and fits the element into the `fitInto` element.
     */fit: function fit() { this.position(); this.constrain(); this.center(); },/**
     * Memoize information needed to position and size the target element.
     * @suppress {deprecated}
     */_discoverInfo: function _discoverInfo() { if (this._fitInfo) { return; } var target = window.getComputedStyle(this); var sizer = window.getComputedStyle(this.sizingTarget); this._fitInfo = { inlineStyle: { top: this.style.top || '', left: this.style.left || '', position: this.style.position || '' }, sizerInlineStyle: { maxWidth: this.sizingTarget.style.maxWidth || '', maxHeight: this.sizingTarget.style.maxHeight || '', boxSizing: this.sizingTarget.style.boxSizing || '' }, positionedBy: { vertically: target.top !== 'auto' ? 'top' : target.bottom !== 'auto' ? 'bottom' : null, horizontally: target.left !== 'auto' ? 'left' : target.right !== 'auto' ? 'right' : null }, sizedBy: { height: sizer.maxHeight !== 'none', width: sizer.maxWidth !== 'none', minWidth: parseInt(sizer.minWidth, 10) || 0, minHeight: parseInt(sizer.minHeight, 10) || 0 }, margin: { top: parseInt(target.marginTop, 10) || 0, right: parseInt(target.marginRight, 10) || 0, bottom: parseInt(target.marginBottom, 10) || 0, left: parseInt(target.marginLeft, 10) || 0 } }; },/**
     * Resets the target element's position and size constraints, and clear
     * the memoized data.
     */resetFit: function resetFit() { var info = this._fitInfo || {}; for (var property in info.sizerInlineStyle) { this.sizingTarget.style[property] = info.sizerInlineStyle[property]; } for (var property in info.inlineStyle) { this.style[property] = info.inlineStyle[property]; } this._fitInfo = null; },/**
     * Equivalent to calling `resetFit()` and `fit()`. Useful to call this after
     * the element or the `fitInto` element has been resized, or if any of the
     * positioning properties (e.g. `horizontalAlign, verticalAlign`) is updated.
     * It preserves the scroll position of the sizingTarget.
     */refit: function refit() { var scrollLeft = this.sizingTarget.scrollLeft; var scrollTop = this.sizingTarget.scrollTop; this.resetFit(); this.fit(); this.sizingTarget.scrollLeft = scrollLeft; this.sizingTarget.scrollTop = scrollTop; },/**
     * Positions the element according to `horizontalAlign, verticalAlign`.
     */position: function position() {
            if (!this.__shouldPosition) {// needs to be centered, and it is done after constrain.
              return;
            } this._discoverInfo(); this.style.position = 'fixed';// Need border-box for margin/padding.
            this.sizingTarget.style.boxSizing = 'border-box';// Set to 0, 0 in order to discover any offset caused by parent stacking
            // contexts.
            this.style.left = '0px'; this.style.top = '0px'; var rect = this.getBoundingClientRect(); var positionRect = this.__getNormalizedRect(this.positionTarget); var fitRect = this.__getNormalizedRect(this.fitInto); var margin = this._fitInfo.margin;// Consider the margin as part of the size for position calculations.
            var size = { width: rect.width + margin.left + margin.right, height: rect.height + margin.top + margin.bottom }; var position = this.__getPosition(this._localeHorizontalAlign, this.verticalAlign, size, rect, positionRect, fitRect); var left = position.left + margin.left; var top = position.top + margin.top;// We first limit right/bottom within fitInto respecting the margin,
            // then use those values to limit top/left.
            var right = Math.min(fitRect.right - margin.right, left + rect.width); var bottom = Math.min(fitRect.bottom - margin.bottom, top + rect.height);// Keep left/top within fitInto respecting the margin.
            left = Math.max(fitRect.left + margin.left, Math.min(left, right - this._fitInfo.sizedBy.minWidth)); top = Math.max(fitRect.top + margin.top, Math.min(top, bottom - this._fitInfo.sizedBy.minHeight));// Use right/bottom to set maxWidth/maxHeight, and respect
            // minWidth/minHeight.
            this.sizingTarget.style.maxWidth = Math.max(right - left, this._fitInfo.sizedBy.minWidth) + 'px'; this.sizingTarget.style.maxHeight = Math.max(bottom - top, this._fitInfo.sizedBy.minHeight) + 'px';// Remove the offset caused by any stacking context.
            this.style.left = left - rect.left + 'px'; this.style.top = top - rect.top + 'px';
          },/**
     * Constrains the size of the element to `fitInto` by setting `max-height`
     * and/or `max-width`.
     */constrain: function constrain() {
            if (this.__shouldPosition) { return; } this._discoverInfo(); var info = this._fitInfo;// position at (0px, 0px) if not already positioned, so we can measure the
            // natural size.
            if (!info.positionedBy.vertically) { this.style.position = 'fixed'; this.style.top = '0px'; } if (!info.positionedBy.horizontally) { this.style.position = 'fixed'; this.style.left = '0px'; }// need border-box for margin/padding
            this.sizingTarget.style.boxSizing = 'border-box';// constrain the width and height if not already set
            var rect = this.getBoundingClientRect(); if (!info.sizedBy.height) { this.__sizeDimension(rect, info.positionedBy.vertically, 'top', 'bottom', 'Height'); } if (!info.sizedBy.width) { this.__sizeDimension(rect, info.positionedBy.horizontally, 'left', 'right', 'Width'); }
          },/**
     * @protected
     * @deprecated
     */_sizeDimension: function _sizeDimension(rect, positionedBy, start, end, extent) { this.__sizeDimension(rect, positionedBy, start, end, extent); },/**
     * @private
     */__sizeDimension: function __sizeDimension(rect, positionedBy, start, end, extent) { var info = this._fitInfo; var fitRect = this.__getNormalizedRect(this.fitInto); var max = extent === 'Width' ? fitRect.width : fitRect.height; var flip = positionedBy === end; var offset = flip ? max - rect[end] : rect[start]; var margin = info.margin[flip ? start : end]; var offsetExtent = 'offset' + extent; var sizingOffset = this[offsetExtent] - this.sizingTarget[offsetExtent]; this.sizingTarget.style['max' + extent] = max - margin - offset - sizingOffset + 'px'; },/**
     * Centers horizontally and vertically if not already positioned. This also
     * sets `position:fixed`.
     */center: function center() {
            if (this.__shouldPosition) { return; } this._discoverInfo(); var positionedBy = this._fitInfo.positionedBy; if (positionedBy.vertically && positionedBy.horizontally) {// Already positioned.
              return;
            }// Need position:fixed to center
            this.style.position = 'fixed';// Take into account the offset caused by parents that create stacking
            // contexts (e.g. with transform: translate3d). Translate to 0,0 and
            // measure the bounding rect.
            if (!positionedBy.vertically) { this.style.top = '0px'; } if (!positionedBy.horizontally) { this.style.left = '0px'; }// It will take in consideration margins and transforms
            var rect = this.getBoundingClientRect(); var fitRect = this.__getNormalizedRect(this.fitInto); if (!positionedBy.vertically) { var top = fitRect.top - rect.top + (fitRect.height - rect.height) / 2; this.style.top = top + 'px'; } if (!positionedBy.horizontally) { var left = fitRect.left - rect.left + (fitRect.width - rect.width) / 2; this.style.left = left + 'px'; }
          }, __getNormalizedRect: function __getNormalizedRect(target) { if (target === document.documentElement || target === window) { return { top: 0, left: 0, width: window.innerWidth, height: window.innerHeight, right: window.innerWidth, bottom: window.innerHeight }; } return target.getBoundingClientRect(); }, __getOffscreenArea: function __getOffscreenArea(position, size, fitRect) { var verticalCrop = Math.min(0, position.top) + Math.min(0, fitRect.bottom - (position.top + size.height)); var horizontalCrop = Math.min(0, position.left) + Math.min(0, fitRect.right - (position.left + size.width)); return Math.abs(verticalCrop) * size.width + Math.abs(horizontalCrop) * size.height; }, __getPosition: function __getPosition(hAlign, vAlign, size, sizeNoMargins, positionRect, fitRect) {// All the possible configurations.
            // Ordered as top-left, top-right, bottom-left, bottom-right.
            var positions = [{ verticalAlign: 'top', horizontalAlign: 'left', top: positionRect.top + this.verticalOffset, left: positionRect.left + this.horizontalOffset }, { verticalAlign: 'top', horizontalAlign: 'right', top: positionRect.top + this.verticalOffset, left: positionRect.right - size.width - this.horizontalOffset }, { verticalAlign: 'bottom', horizontalAlign: 'left', top: positionRect.bottom - size.height - this.verticalOffset, left: positionRect.left + this.horizontalOffset }, { verticalAlign: 'bottom', horizontalAlign: 'right', top: positionRect.bottom - size.height - this.verticalOffset, left: positionRect.right - size.width - this.horizontalOffset }]; if (this.noOverlap) {// Duplicate.
              for (var i = 0, l = positions.length; i < l; i++) { var copy = {}; for (var key in positions[i]) { copy[key] = positions[i][key]; } positions.push(copy); }// Horizontal overlap only.
              positions[0].top = positions[1].top += positionRect.height; positions[2].top = positions[3].top -= positionRect.height;// Vertical overlap only.
              positions[4].left = positions[6].left += positionRect.width; positions[5].left = positions[7].left -= positionRect.width;
            }// Consider auto as null for coding convenience.
            vAlign = vAlign === 'auto' ? null : vAlign; hAlign = hAlign === 'auto' ? null : hAlign; if (!hAlign || hAlign === 'center') { positions.push({ verticalAlign: 'top', horizontalAlign: 'center', top: positionRect.top + this.verticalOffset + (this.noOverlap ? positionRect.height : 0), left: positionRect.left - sizeNoMargins.width / 2 + positionRect.width / 2 + this.horizontalOffset }); positions.push({ verticalAlign: 'bottom', horizontalAlign: 'center', top: positionRect.bottom - size.height - this.verticalOffset - (this.noOverlap ? positionRect.height : 0), left: positionRect.left - sizeNoMargins.width / 2 + positionRect.width / 2 + this.horizontalOffset }); } if (!vAlign || vAlign === 'middle') { positions.push({ verticalAlign: 'middle', horizontalAlign: 'left', top: positionRect.top - sizeNoMargins.height / 2 + positionRect.height / 2 + this.verticalOffset, left: positionRect.left + this.horizontalOffset + (this.noOverlap ? positionRect.width : 0) }); positions.push({ verticalAlign: 'middle', horizontalAlign: 'right', top: positionRect.top - sizeNoMargins.height / 2 + positionRect.height / 2 + this.verticalOffset, left: positionRect.right - size.width - this.horizontalOffset - (this.noOverlap ? positionRect.width : 0) }); } if (vAlign === 'middle' && hAlign === 'center') { positions.push({ verticalAlign: 'middle', horizontalAlign: 'center', top: positionRect.top - sizeNoMargins.height / 2 + positionRect.height / 2 + this.verticalOffset, left: positionRect.left - sizeNoMargins.width / 2 + positionRect.width / 2 + this.horizontalOffset }); } var position; for (var i = 0; i < positions.length; i++) {
              var candidate = positions[i]; var vAlignOk = candidate.verticalAlign === vAlign; var hAlignOk = candidate.horizontalAlign === hAlign;// If both vAlign and hAlign are defined, return exact match.
              // For dynamicAlign and noOverlap we'll have more than one candidate, so
              // we'll have to check the offscreenArea to make the best choice.
              if (!this.dynamicAlign && !this.noOverlap && vAlignOk && hAlignOk) { position = candidate; break; }// Align is ok if alignment preferences are respected. If no preferences,
              // it is considered ok.
              var alignOk = (!vAlign || vAlignOk) && (!hAlign || hAlignOk);// Filter out elements that don't match the alignment (if defined).
              // With dynamicAlign, we need to consider all the positions to find the
              // one that minimizes the cropped area.
              if (!this.dynamicAlign && !alignOk) { continue; } candidate.offscreenArea = this.__getOffscreenArea(candidate, size, fitRect);// If not cropped and respects the align requirements, keep it.
              // This allows to prefer positions overlapping horizontally over the
              // ones overlapping vertically.
              if (candidate.offscreenArea === 0 && alignOk) { position = candidate; break; } position = position || candidate; var diff = candidate.offscreenArea - position.offscreenArea;// Check which crops less. If it crops equally, check if at least one
              // align setting is ok.
              if (diff < 0 || diff === 0 && (vAlignOk || hAlignOk)) { position = candidate; }
            } return position;
          }
        }; var p$1 = Element.prototype; var matches$1 = p$1.matches || p$1.matchesSelector || p$1.mozMatchesSelector || p$1.msMatchesSelector || p$1.oMatchesSelector || p$1.webkitMatchesSelector; var IronFocusablesHelperClass =/*#__PURE__*/function () {
          function IronFocusablesHelperClass() { babelHelpers.classCallCheck(this, IronFocusablesHelperClass); } babelHelpers.createClass(IronFocusablesHelperClass, [{
            key: "getTabbableNodes",/**
     * Returns a sorted array of tabbable nodes, including the root node.
     * It searches the tabbable nodes in the light and shadow dom of the chidren,
     * sorting the result by tabindex.
     * @param {!Node} node
     * @return {!Array<!HTMLElement>}
     */value: function getTabbableNodes(node) {
              var result = [];// If there is at least one element with tabindex > 0, we need to sort
              // the final array by tabindex.
              var needsSortByTabIndex = this._collectTabbableNodes(node, result); if (needsSortByTabIndex) { return this._sortByTabIndex(result); } return result;
            }/**
       * Returns if a element is focusable.
       * @param {!HTMLElement} element
       * @return {boolean}
       */}, {
            key: "isFocusable", value: function isFocusable(element) {// From http://stackoverflow.com/a/1600194/4228703:
              // There isn't a definite list, it's up to the browser. The only
              // standard we have is DOM Level 2 HTML
              // https://www.w3.org/TR/DOM-Level-2-HTML/html.html, according to which the
              // only elements that have a focus() method are HTMLInputElement,
              // HTMLSelectElement, HTMLTextAreaElement and HTMLAnchorElement. This
              // notably omits HTMLButtonElement and HTMLAreaElement. Referring to these
              // tests with tabbables in different browsers
              // http://allyjs.io/data-tables/focusable.html
              // Elements that cannot be focused if they have [disabled] attribute.
              if (matches$1.call(element, 'input, select, textarea, button, object')) { return matches$1.call(element, ':not([disabled])'); }// Elements that can be focused even if they have [disabled] attribute.
              return matches$1.call(element, 'a[href], area[href], iframe, [tabindex], [contentEditable]');
            }/**
       * Returns if a element is tabbable. To be tabbable, a element must be
       * focusable, visible, and with a tabindex !== -1.
       * @param {!HTMLElement} element
       * @return {boolean}
       */}, {
            key: "isTabbable", value: function isTabbable(element) { return this.isFocusable(element) && matches$1.call(element, ':not([tabindex="-1"])') && this._isVisible(element); }/**
       * Returns the normalized element tabindex. If not focusable, returns -1.
       * It checks for the attribute "tabindex" instead of the element property
       * `tabIndex` since browsers assign different values to it.
       * e.g. in Firefox `<div contenteditable>` has `tabIndex = -1`
       * @param {!HTMLElement} element
       * @return {!number}
       * @private
       */}, {
            key: "_normalizedTabIndex", value: function _normalizedTabIndex(element) { if (this.isFocusable(element)) { var tabIndex = element.getAttribute('tabindex') || 0; return Number(tabIndex); } return -1; }/**
       * Searches for nodes that are tabbable and adds them to the `result` array.
       * Returns if the `result` array needs to be sorted by tabindex.
       * @param {!Node} node The starting point for the search; added to `result`
       * if tabbable.
       * @param {!Array<!HTMLElement>} result
       * @return {boolean}
       * @private
       */}, {
            key: "_collectTabbableNodes", value: function _collectTabbableNodes(node, result) {// If not an element or not visible, no need to explore children.
              if (node.nodeType !== Node.ELEMENT_NODE) { return false; } var element =/** @type {!HTMLElement} */node; if (!this._isVisible(element)) { return false; } var tabIndex = this._normalizedTabIndex(element); var needsSort = tabIndex > 0; if (tabIndex >= 0) { result.push(element); }// In ShadowDOM v1, tab order is affected by the order of distrubution.
              // E.g. getTabbableNodes(#root) in ShadowDOM v1 should return [#A, #B];
              // in ShadowDOM v0 tab order is not affected by the distrubution order,
              // in fact getTabbableNodes(#root) returns [#B, #A].
              //  <div id="root">
              //   \x3c!-- shadow --\x3e
              //     <slot name="a">
              //     <slot name="b">
              //   \x3c!-- /shadow --\x3e
              //   <input id="A" slot="a">
              //   <input id="B" slot="b" tabindex="1">
              //  </div>
              // TODO(valdrin) support ShadowDOM v1 when upgrading to Polymer v2.0.
              var children; if (element.localName === 'content' || element.localName === 'slot') { children = dom(element).getDistributedNodes(); } else {// Use shadow root if possible, will check for distributed nodes.
                children = dom(element.root || element).children;
              } for (var i = 0; i < children.length; i++) {// Ensure method is always invoked to collect tabbable children.
                needsSort = this._collectTabbableNodes(children[i], result) || needsSort;
              } return needsSort;
            }/**
       * Returns false if the element has `visibility: hidden` or `display: none`
       * @param {!HTMLElement} element
       * @return {boolean}
       * @private
       */}, {
            key: "_isVisible", value: function _isVisible(element) {// Check inline style first to save a re-flow. If looks good, check also
              // computed style.
              var style = element.style; if (style.visibility !== 'hidden' && style.display !== 'none') { style = window.getComputedStyle(element); return style.visibility !== 'hidden' && style.display !== 'none'; } return false;
            }/**
       * Sorts an array of tabbable elements by tabindex. Returns a new array.
       * @param {!Array<!HTMLElement>} tabbables
       * @return {!Array<!HTMLElement>}
       * @private
       */}, {
            key: "_sortByTabIndex", value: function _sortByTabIndex(tabbables) {// Implement a merge sort as Array.prototype.sort does a non-stable sort
              // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort
              var len = tabbables.length; if (len < 2) { return tabbables; } var pivot = Math.ceil(len / 2); var left = this._sortByTabIndex(tabbables.slice(0, pivot)); var right = this._sortByTabIndex(tabbables.slice(pivot)); return this._mergeSortByTabIndex(left, right);
            }/**
       * Merge sort iterator, merges the two arrays into one, sorted by tab index.
       * @param {!Array<!HTMLElement>} left
       * @param {!Array<!HTMLElement>} right
       * @return {!Array<!HTMLElement>}
       * @private
       */}, {
            key: "_mergeSortByTabIndex", value: function _mergeSortByTabIndex(left, right) { var result = []; while (left.length > 0 && right.length > 0) { if (this._hasLowerTabOrder(left[0], right[0])) { result.push(right.shift()); } else { result.push(left.shift()); } } return result.concat(left, right); }/**
       * Returns if element `a` has lower tab order compared to element `b`
       * (both elements are assumed to be focusable and tabbable).
       * Elements with tabindex = 0 have lower tab order compared to elements
       * with tabindex > 0.
       * If both have same tabindex, it returns false.
       * @param {!HTMLElement} a
       * @param {!HTMLElement} b
       * @return {boolean}
       * @private
       */}, {
            key: "_hasLowerTabOrder", value: function _hasLowerTabOrder(a, b) {// Normalize tabIndexes
              // e.g. in Firefox `<div contenteditable>` has `tabIndex = -1`
              var ati = Math.max(a.tabIndex, 0); var bti = Math.max(b.tabIndex, 0); return ati === 0 || bti === 0 ? bti > ati : ati > bti;
            }
          }]); return IronFocusablesHelperClass;
        }(); var IronFocusablesHelper = new IronFocusablesHelperClass(); Polymer({/** @override */_template: html(_templateObject17_e13d1b4010eb11ec83cd7fddb4847b33()), is: 'iron-overlay-backdrop', properties: {/**
       * Returns true if the backdrop is opened.
       */opened: { reflectToAttribute: true, type: Boolean, value: false, observer: '_openedChanged' }
        }, listeners: { 'transitionend': '_onTransitionend' },/** @override */created: function created() {// Used to cancel previous requestAnimationFrame calls when opened changes.
          this.__openedRaf = null;
        },/** @override */attached: function attached() { this.opened && this._openedChanged(this.opened); },/**
     * Appends the backdrop to document body if needed.
     */prepare: function prepare() { if (this.opened && !this.parentNode) { dom(document.body).appendChild(this); } },/**
     * Shows the backdrop.
     */open: function open() { this.opened = true; },/**
     * Hides the backdrop.
     */close: function close() { this.opened = false; },/**
     * Removes the backdrop from document body if needed.
     */complete: function complete() { if (!this.opened && this.parentNode === document.body) { dom(this.parentNode).removeChild(this); } }, _onTransitionend: function _onTransitionend(event) { if (event && event.target === this) { this.complete(); } },/**
     * @param {boolean} opened
     * @private
     */_openedChanged: function _openedChanged(opened) {
            if (opened) {// Auto-attach.
              this.prepare();
            } else {// Animation might be disabled via the mixin or opacity custom property.
              // If it is disabled in other ways, it's up to the user to call complete.
              var cs = window.getComputedStyle(this); if (cs.transitionDuration === '0s' || cs.opacity == 0) { this.complete(); }
            } if (!this.isAttached) { return; }// Always cancel previous requestAnimationFrame.
            if (this.__openedRaf) { window.cancelAnimationFrame(this.__openedRaf); this.__openedRaf = null; }// Force relayout to ensure proper transitions.
            this.scrollTop = this.scrollTop; this.__openedRaf = window.requestAnimationFrame(function () { this.__openedRaf = null; this.toggleClass('opened', this.opened); }.bind(this));
          }
        }); var IronOverlayManagerClass =/*#__PURE__*/function () {
          function IronOverlayManagerClass() {
            babelHelpers.classCallCheck(this, IronOverlayManagerClass);/**
       * Used to keep track of the opened overlays.
       * @private {!Array<!Element>}
       */this._overlays = [];/**
                               * iframes have a default z-index of 100,
                               * so this default should be at least that.
                               * @private {number}
                               */this._minimumZ = 101;/**
                             * Memoized backdrop element.
                             * @private {Element|null}
                             */this._backdropElement = null;// Enable document-wide tap recognizer.
            // NOTE: Use useCapture=true to avoid accidentally prevention of the closing
            // of an overlay via event.stopPropagation(). The only way to prevent
            // closing of an overlay should be through its APIs.
            // NOTE: enable tap on <html> to workaround Polymer/polymer#4459
            // Pass no-op function because MSEdge 15 doesn't handle null as 2nd argument
            // https://github.com/Microsoft/ChakraCore/issues/3863
            addListener(document.documentElement, 'tap', function () { }); document.addEventListener('tap', this._onCaptureClick.bind(this), true); document.addEventListener('focus', this._onCaptureFocus.bind(this), true); document.addEventListener('keydown', this._onCaptureKeyDown.bind(this), true);
          }/**
       * The shared backdrop element.
       * @return {!Element} backdropElement
       */babelHelpers.createClass(IronOverlayManagerClass, [{
            key: "_bringOverlayAtIndexToFront",/**
       * Brings the overlay at the specified index to the front.
       * @param {number} i
       * @private
       */value: function _bringOverlayAtIndexToFront(i) {
              var overlay = this._overlays[i]; if (!overlay) { return; } var lastI = this._overlays.length - 1; var currentOverlay = this._overlays[lastI];// Ensure always-on-top overlay stays on top.
              if (currentOverlay && this._shouldBeBehindOverlay(overlay, currentOverlay)) { lastI--; }// If already the top element, return.
              if (i >= lastI) { return; }// Update z-index to be on top.
              var minimumZ = Math.max(this.currentOverlayZ(), this._minimumZ); if (this._getZ(overlay) <= minimumZ) { this._applyOverlayZ(overlay, minimumZ); }// Shift other overlays behind the new on top.
              while (i < lastI) { this._overlays[i] = this._overlays[i + 1]; i++; } this._overlays[lastI] = overlay;
            }/**
       * Adds the overlay and updates its z-index if it's opened, or removes it if
       * it's closed. Also updates the backdrop z-index.
       * @param {!Element} overlay
       */}, {
            key: "addOrRemoveOverlay", value: function addOrRemoveOverlay(overlay) { if (overlay.opened) { this.addOverlay(overlay); } else { this.removeOverlay(overlay); } }/**
       * Tracks overlays for z-index and focus management.
       * Ensures the last added overlay with always-on-top remains on top.
       * @param {!Element} overlay
       */}, {
            key: "addOverlay", value: function addOverlay(overlay) {
              var i = this._overlays.indexOf(overlay); if (i >= 0) { this._bringOverlayAtIndexToFront(i); this.trackBackdrop(); return; } var insertionIndex = this._overlays.length; var currentOverlay = this._overlays[insertionIndex - 1]; var minimumZ = Math.max(this._getZ(currentOverlay), this._minimumZ); var newZ = this._getZ(overlay);// Ensure always-on-top overlay stays on top.
              if (currentOverlay && this._shouldBeBehindOverlay(overlay, currentOverlay)) {// This bumps the z-index of +2.
                this._applyOverlayZ(currentOverlay, minimumZ); insertionIndex--;// Update minimumZ to match previous overlay's z-index.
                var previousOverlay = this._overlays[insertionIndex - 1]; minimumZ = Math.max(this._getZ(previousOverlay), this._minimumZ);
              }// Update z-index and insert overlay.
              if (newZ <= minimumZ) { this._applyOverlayZ(overlay, minimumZ); } this._overlays.splice(insertionIndex, 0, overlay); this.trackBackdrop();
            }/**
       * @param {!Element} overlay
       */}, {
            key: "removeOverlay", value: function removeOverlay(overlay) { var i = this._overlays.indexOf(overlay); if (i === -1) { return; } this._overlays.splice(i, 1); this.trackBackdrop(); }/**
       * Returns the current overlay.
       * @return {!Element|undefined}
       */}, {
            key: "currentOverlay", value: function currentOverlay() { var i = this._overlays.length - 1; return this._overlays[i]; }/**
       * Returns the current overlay z-index.
       * @return {number}
       */}, {
            key: "currentOverlayZ", value: function currentOverlayZ() { return this._getZ(this.currentOverlay()); }/**
       * Ensures that the minimum z-index of new overlays is at least `minimumZ`.
       * This does not effect the z-index of any existing overlays.
       * @param {number} minimumZ
       */}, { key: "ensureMinimumZ", value: function ensureMinimumZ(minimumZ) { this._minimumZ = Math.max(this._minimumZ, minimumZ); } }, {
            key: "focusOverlay", value: function focusOverlay() { var current =/** @type {?} */this.currentOverlay(); if (current) { current._applyFocus(); } }/**
       * Updates the backdrop z-index.
       */}, {
            key: "trackBackdrop", value: function trackBackdrop() {
              var overlay = this._overlayWithBackdrop();// Avoid creating the backdrop if there is no overlay with backdrop.
              if (!overlay && !this._backdropElement) { return; } this.backdropElement.style.zIndex = this._getZ(overlay) - 1; this.backdropElement.opened = !!overlay;// Property observers are not fired until element is attached
              // in Polymer 2.x, so we ensure element is attached if needed.
              // https://github.com/Polymer/polymer/issues/4526
              this.backdropElement.prepare();
            }/**
       * @return {!Array<!Element>}
       */}, {
            key: "getBackdrops", value: function getBackdrops() { var backdrops = []; for (var i = 0; i < this._overlays.length; i++) { if (this._overlays[i].withBackdrop) { backdrops.push(this._overlays[i]); } } return backdrops; }/**
       * Returns the z-index for the backdrop.
       * @return {number}
       */}, {
            key: "backdropZ", value: function backdropZ() { return this._getZ(this._overlayWithBackdrop()) - 1; }/**
       * Returns the top opened overlay that has a backdrop.
       * @return {!Element|undefined}
       * @private
       */}, {
            key: "_overlayWithBackdrop", value: function _overlayWithBackdrop() { for (var i = this._overlays.length - 1; i >= 0; i--) { if (this._overlays[i].withBackdrop) { return this._overlays[i]; } } }/**
       * Calculates the minimum z-index for the overlay.
       * @param {Element=} overlay
       * @private
       */}, {
            key: "_getZ", value: function _getZ(overlay) {
              var z = this._minimumZ; if (overlay) {
                var z1 = Number(overlay.style.zIndex || window.getComputedStyle(overlay).zIndex);// Check if is a number
                // Number.isNaN not supported in IE 10+
                if (z1 === z1) { z = z1; }
              } return z;
            }/**
       * @param {!Element} element
       * @param {number|string} z
       * @private
       */}, {
            key: "_setZ", value: function _setZ(element, z) { element.style.zIndex = z; }/**
       * @param {!Element} overlay
       * @param {number} aboveZ
       * @private
       */}, {
            key: "_applyOverlayZ", value: function _applyOverlayZ(overlay, aboveZ) { this._setZ(overlay, aboveZ + 2); }/**
       * Returns the deepest overlay in the path.
       * @param {!Array<!Element>=} path
       * @return {!Element|undefined}
       * @suppress {missingProperties}
       * @private
       */}, {
            key: "_overlayInPath", value: function _overlayInPath(path) { path = path || []; for (var i = 0; i < path.length; i++) { if (path[i]._manager === this) { return path[i]; } } }/**
       * Ensures the click event is delegated to the right overlay.
       * @param {!Event} event
       * @private
       */}, {
            key: "_onCaptureClick", value: function _onCaptureClick(event) {
              var i = this._overlays.length - 1; if (i === -1) return; var path =/** @type {!Array<!EventTarget>} */dom(event).path; var overlay;// Check if clicked outside of overlay.
              while ((overlay =/** @type {?} */this._overlays[i]) && this._overlayInPath(path) !== overlay) { overlay._onCaptureClick(event); if (overlay.allowClickThrough) { i--; } else { break; } }
            }/**
       * Ensures the focus event is delegated to the right overlay.
       * @param {!Event} event
       * @private
       */}, {
            key: "_onCaptureFocus", value: function _onCaptureFocus(event) { var overlay =/** @type {?} */this.currentOverlay(); if (overlay) { overlay._onCaptureFocus(event); } }/**
       * Ensures TAB and ESC keyboard events are delegated to the right overlay.
       * @param {!Event} event
       * @private
       */}, {
            key: "_onCaptureKeyDown", value: function _onCaptureKeyDown(event) { var overlay =/** @type {?} */this.currentOverlay(); if (overlay) { if (IronA11yKeysBehavior.keyboardEventMatchesKeys(event, 'esc')) { overlay._onCaptureEsc(event); } else if (IronA11yKeysBehavior.keyboardEventMatchesKeys(event, 'tab')) { overlay._onCaptureTab(event); } } }/**
       * Returns if the overlay1 should be behind overlay2.
       * @param {!Element} overlay1
       * @param {!Element} overlay2
       * @return {boolean}
       * @suppress {missingProperties}
       * @private
       */}, { key: "_shouldBeBehindOverlay", value: function _shouldBeBehindOverlay(overlay1, overlay2) { return !overlay1.alwaysOnTop && overlay2.alwaysOnTop; } }, {
            key: "backdropElement", get: function get() { if (!this._backdropElement) { this._backdropElement = document.createElement('iron-overlay-backdrop'); } return this._backdropElement; }/**
       * The deepest active element.
       * @return {!Element} activeElement the active element
       */}, {
            key: "deepActiveElement", get: function get() {
              var active = document.activeElement;// document.activeElement can be null
              // https://developer.mozilla.org/en-US/docs/Web/API/Document/activeElement
              // In IE 11, it can also be an object when operating in iframes.
              // In these cases, default it to document.body.
              if (!active || babelHelpers.instanceof(active, Element) === false) { active = document.body; } while (active.root && dom(active.root).activeElement) { active = dom(active.root).activeElement; } return active;
            }
          }]); return IronOverlayManagerClass;
        }();; var IronOverlayManager = new IronOverlayManagerClass(); var lastTouchPosition = { pageX: 0, pageY: 0 };/**
      * Used to avoid computing event.path and filter scrollable nodes (better perf).
      * @type {?EventTarget}
      */var lastRootTarget = null;/**
                              * @type {!Array<!Node>}
                              */var lastScrollableNodes = [];/**
                                 * @type {!Array<string>}
                                 */var scrollEvents = [// Modern `wheel` event for mouse wheel scrolling:
          'wheel',// Older, non-standard `mousewheel` event for some FF:
          'mousewheel',// IE:
          'DOMMouseScroll',// Touch enabled devices
          'touchstart', 'touchmove'];// must be defined for modulizer
        var _boundScrollHandler;/**
                            * The current element that defines the DOM boundaries of the
                            * scroll lock. This is always the most recently locking element.
                            *
                            * @type {!Node|undefined}
                            */var currentLockingElement; function elementIsScrollLocked(element) { var lockingElement = currentLockingElement; if (lockingElement === undefined) { return false; } var scrollLocked; if (_hasCachedLockedElement(element)) { return true; } if (_hasCachedUnlockedElement(element)) { return false; } scrollLocked = !!lockingElement && lockingElement !== element && !_composedTreeContains(lockingElement, element); if (scrollLocked) { _lockedElementCache.push(element); } else { _unlockedElementCache.push(element); } return scrollLocked; }/**
     * Push an element onto the current scroll lock stack. The most recently
     * pushed element and its children will be considered scrollable. All
     * other elements will not be scrollable.
     *
     * Scroll locking is implemented as a stack so that cases such as
     * dropdowns within dropdowns are handled well.
     *
     * @param {!HTMLElement} element The element that should lock scroll.
     */function pushScrollLock(element) {// Prevent pushing the same element twice
          if (_lockingElements.indexOf(element) >= 0) { return; } if (_lockingElements.length === 0) { _lockScrollInteractions(); } _lockingElements.push(element); currentLockingElement = _lockingElements[_lockingElements.length - 1]; _lockedElementCache = []; _unlockedElementCache = [];
        }/**
     * Remove an element from the scroll lock stack. The element being
     * removed does not need to be the most recently pushed element. However,
     * the scroll lock constraints only change when the most recently pushed
     * element is removed.
     *
     * @param {!HTMLElement} element The element to remove from the scroll
     * lock stack.
     */function removeScrollLock(element) { var index = _lockingElements.indexOf(element); if (index === -1) { return; } _lockingElements.splice(index, 1); currentLockingElement = _lockingElements[_lockingElements.length - 1]; _lockedElementCache = []; _unlockedElementCache = []; if (_lockingElements.length === 0) { _unlockScrollInteractions(); } } var _lockingElements = []; var _lockedElementCache = null; var _unlockedElementCache = null; function _hasCachedLockedElement(element) { return _lockedElementCache.indexOf(element) > -1; } function _hasCachedUnlockedElement(element) { return _unlockedElementCache.indexOf(element) > -1; } function _composedTreeContains(element, child) {// NOTE(cdata): This method iterates over content elements and their
          // corresponding distributed nodes to implement a contains-like method
          // that pierces through the composed tree of the ShadowDOM. Results of
          // this operation are cached (elsewhere) on a per-scroll-lock basis, to
          // guard against potentially expensive lookups happening repeatedly as
          // a user scrolls / touchmoves.
          var contentElements; var distributedNodes; var contentIndex; var nodeIndex; if (element.contains(child)) { return true; } contentElements = dom(element).querySelectorAll('content,slot'); for (contentIndex = 0; contentIndex < contentElements.length; ++contentIndex) {
            distributedNodes = dom(contentElements[contentIndex]).getDistributedNodes(); for (nodeIndex = 0; nodeIndex < distributedNodes.length; ++nodeIndex) {// Polymer 2.x returns slot.assignedNodes which can contain text nodes.
              if (distributedNodes[nodeIndex].nodeType !== Node.ELEMENT_NODE) continue; if (_composedTreeContains(distributedNodes[nodeIndex], child)) { return true; }
            }
          } return false;
        } function _scrollInteractionHandler(event) {// Avoid canceling an event with cancelable=false, e.g. scrolling is in
          // progress and cannot be interrupted.
          if (event.cancelable && _shouldPreventScrolling(event)) { event.preventDefault(); }// If event has targetTouches (touch event), update last touch position.
          if (event.targetTouches) { var touch = event.targetTouches[0]; lastTouchPosition.pageX = touch.pageX; lastTouchPosition.pageY = touch.pageY; }
        }/**
     * @package
     */function _lockScrollInteractions() {
          _boundScrollHandler = _boundScrollHandler || _scrollInteractionHandler.bind(undefined); for (var i = 0, l = scrollEvents.length; i < l; i++) {// NOTE: browsers that don't support objects as third arg will
            // interpret it as boolean, hence useCapture = true in this case.
            document.addEventListener(scrollEvents[i], _boundScrollHandler, { capture: true, passive: false });
          }
        } function _unlockScrollInteractions() {
          for (var i = 0, l = scrollEvents.length; i < l; i++) {// NOTE: browsers that don't support objects as third arg will
            // interpret it as boolean, hence useCapture = true in this case.
            document.removeEventListener(scrollEvents[i], _boundScrollHandler, { capture: true, passive: false });
          }
        }/**
     * Returns true if the event causes scroll outside the current locking
     * element, e.g. pointer/keyboard interactions, or scroll "leaking"
     * outside the locking element when it is already at its scroll boundaries.
     * @param {!Event} event
     * @return {boolean}
     * @package
     */function _shouldPreventScrolling(event) {// Update if root target changed. For touch events, ensure we don't
          // update during touchmove.
          var target = dom(event).rootTarget; if (event.type !== 'touchmove' && lastRootTarget !== target) { lastRootTarget = target; lastScrollableNodes = _getScrollableNodes(dom(event).path); }// Prevent event if no scrollable nodes.
          if (!lastScrollableNodes.length) { return true; }// Don't prevent touchstart event inside the locking element when it has
          // scrollable nodes.
          if (event.type === 'touchstart') { return false; }// Get deltaX/Y.
          var info = _getScrollInfo(event);// Prevent if there is no child that can scroll.
          return !_getScrollingNode(lastScrollableNodes, info.deltaX, info.deltaY);
        }/**
     * Returns an array of scrollable nodes up to the current locking element,
     * which is included too if scrollable.
     * @param {!Array<!Node>} nodes
     * @return {!Array<!Node>} scrollables
     * @package
     */function _getScrollableNodes(nodes) {
          var scrollables = []; var lockingIndex = nodes.indexOf(/** @type {!Node} */currentLockingElement);// Loop from root target to locking element (included).
          for (var i = 0; i <= lockingIndex; i++) {// Skip non-Element nodes.
            if (nodes[i].nodeType !== Node.ELEMENT_NODE) { continue; } var node =/** @type {!Element} */nodes[i];// Check inline style before checking computed style.
            var style = node.style; if (style.overflow !== 'scroll' && style.overflow !== 'auto') { style = window.getComputedStyle(node); } if (style.overflow === 'scroll' || style.overflow === 'auto') { scrollables.push(node); }
          } return scrollables;
        }/**
     * Returns the node that is scrolling. If there is no scrolling,
     * returns undefined.
     * @param {!Array<!Node>} nodes
     * @param {number} deltaX Scroll delta on the x-axis
     * @param {number} deltaY Scroll delta on the y-axis
     * @return {!Node|undefined}
     * @package
     */function _getScrollingNode(nodes, deltaX, deltaY) {// No scroll.
          if (!deltaX && !deltaY) { return; }// Check only one axis according to where there is more scroll.
          // Prefer vertical to horizontal.
          var verticalScroll = Math.abs(deltaY) >= Math.abs(deltaX); for (var i = 0; i < nodes.length; i++) {
            var node = nodes[i]; var canScroll = false; if (verticalScroll) {// delta < 0 is scroll up, delta > 0 is scroll down.
              canScroll = deltaY < 0 ? node.scrollTop > 0 : node.scrollTop < node.scrollHeight - node.clientHeight;
            } else {// delta < 0 is scroll left, delta > 0 is scroll right.
              canScroll = deltaX < 0 ? node.scrollLeft > 0 : node.scrollLeft < node.scrollWidth - node.clientWidth;
            } if (canScroll) { return node; }
          }
        }/**
     * Returns scroll `deltaX` and `deltaY`.
     * @param {!Event} event The scroll event
     * @return {{deltaX: number, deltaY: number}} Object containing the
     * x-axis scroll delta (positive: scroll right, negative: scroll left,
     * 0: no scroll), and the y-axis scroll delta (positive: scroll down,
     * negative: scroll up, 0: no scroll).
     * @package
     */function _getScrollInfo(event) {
          var info = { deltaX: event.deltaX, deltaY: event.deltaY };// Already available.
          if ('deltaX' in event) { }// do nothing, values are already good.
          // Safari has scroll info in `wheelDeltaX/Y`.
          else if ('wheelDeltaX' in event && 'wheelDeltaY' in event) { info.deltaX = -event.wheelDeltaX; info.deltaY = -event.wheelDeltaY; }// IE10 has only vertical scroll info in `wheelDelta`.
          else if ('wheelDelta' in event) { info.deltaX = 0; info.deltaY = -event.wheelDelta; }// Firefox has scroll info in `detail` and `axis`.
          else if ('axis' in event) { info.deltaX = event.axis === 1 ? event.detail : 0; info.deltaY = event.axis === 2 ? event.detail : 0; }// On mobile devices, calculate scroll direction.
          else if (event.targetTouches) {
            var touch = event.targetTouches[0];// Touch moves from right to left => scrolling goes right.
            info.deltaX = lastTouchPosition.pageX - touch.pageX;// Touch moves from down to up => scrolling goes down.
            info.deltaY = lastTouchPosition.pageY - touch.pageY;
          } return info;
        } var IronOverlayBehaviorImpl = {
          properties: {/**
       * True if the overlay is currently displayed.
       */opened: { observer: '_openedChanged', type: Boolean, value: false, notify: true },/**
       * True if the overlay was canceled when it was last closed.
       */canceled: { observer: '_canceledChanged', readOnly: true, type: Boolean, value: false },/**
       * Set to true to display a backdrop behind the overlay. It traps the focus
       * within the light DOM of the overlay.
       */withBackdrop: { observer: '_withBackdropChanged', type: Boolean },/**
       * Set to true to disable auto-focusing the overlay or child nodes with
       * the `autofocus` attribute` when the overlay is opened.
       */noAutoFocus: { type: Boolean, value: false },/**
       * Set to true to disable canceling the overlay with the ESC key.
       */noCancelOnEscKey: { type: Boolean, value: false },/**
       * Set to true to disable canceling the overlay by clicking outside it.
       */noCancelOnOutsideClick: { type: Boolean, value: false },/**
       * Contains the reason(s) this overlay was last closed (see
       * `iron-overlay-closed`). `IronOverlayBehavior` provides the `canceled`
       * reason; implementers of the behavior can provide other reasons in
       * addition to `canceled`.
       */closingReason: {// was a getter before, but needs to be a property so other
              // behaviors can override this.
              type: Object
            },/**
       * Set to true to enable restoring of focus when overlay is closed.
       */restoreFocusOnClose: { type: Boolean, value: false },/**
       * Set to true to allow clicks to go through overlays.
       * When the user clicks outside this overlay, the click may
       * close the overlay below.
       */allowClickThrough: { type: Boolean },/**
       * Set to true to keep overlay always on top.
       */alwaysOnTop: { type: Boolean },/**
       * Determines which action to perform when scroll outside an opened overlay
       * happens. Possible values: lock - blocks scrolling from happening, refit -
       * computes the new position on the overlay cancel - causes the overlay to
       * close
       */scrollAction: { type: String },/**
       * Shortcut to access to the overlay manager.
       * @private
       * @type {!IronOverlayManagerClass}
       */_manager: { type: Object, value: IronOverlayManager },/**
       * The node being focused.
       * @type {?Node}
       */_focusedChild: { type: Object }
          }, listeners: { 'iron-resize': '_onIronResize' }, observers: ['__updateScrollObservers(isAttached, opened, scrollAction)'],/**
     * The backdrop element.
     * @return {!Element}
     */get backdropElement() { return this._manager.backdropElement; },/**
     * Returns the node to give focus to.
     * @return {!Node}
     */get _focusNode() { return this._focusedChild || dom(this).querySelector('[autofocus]') || this; },/**
     * Array of nodes that can receive focus (overlay included), ordered by
     * `tabindex`. This is used to retrieve which is the first and last focusable
     * nodes in order to wrap the focus for overlays `with-backdrop`.
     *
     * If you know what is your content (specifically the first and last focusable
     * children), you can override this method to return only `[firstFocusable,
     * lastFocusable];`
     * @return {!Array<!Node>}
     * @protected
     */get _focusableNodes() { return IronFocusablesHelper.getTabbableNodes(this); },/**
     * @return {void}
     */ready: function ready() {// Used to skip calls to notifyResize and refit while the overlay is
            // animating.
            this.__isAnimating = false;// with-backdrop needs tabindex to be set in order to trap the focus.
            // If it is not set, IronOverlayBehavior will set it, and remove it if
            // with-backdrop = false.
            this.__shouldRemoveTabIndex = false;// Used for wrapping the focus on TAB / Shift+TAB.
            this.__firstFocusableNode = this.__lastFocusableNode = null;// Used by to keep track of the RAF callbacks.
            this.__rafs = {};// Focused node before overlay gets opened. Can be restored on close.
            this.__restoreFocusNode = null;// Scroll info to be restored.
            this.__scrollTop = this.__scrollLeft = null; this.__onCaptureScroll = this.__onCaptureScroll.bind(this);// Root nodes hosting the overlay, used to listen for scroll events on them.
            this.__rootNodes = null; this._ensureSetup();
          },/** @override */attached: function attached() {// Call _openedChanged here so that position can be computed correctly.
            if (this.opened) { this._openedChanged(this.opened); } this._observer = dom(this).observeNodes(this._onNodesChange);
          },/** @override */detached: function detached() {// TODO(bicknellr): Per spec, checking `this._observer` should never be
            // necessary because `connectedCallback` and `disconnectedCallback` should
            // always be called in alternating order. However, the custom elements
            // polyfill doesn't implement the reactions stack, so this can sometimes
            // happen, particularly if ShadyDOM is in noPatch mode where the custom
            // elements polyfill is installed before ShadyDOM. We should investigate
            // whether or not we can either implement the reactions stack without major
            // performance implications or patch ShadyDOM's functions to restore the
            // typical ShadyDOM-then-custom-elements order and remove this workaround.
            if (this._observer) { dom(this).unobserveNodes(this._observer); } this._observer = null; for (var cb in this.__rafs) { if (this.__rafs[cb] !== null) { cancelAnimationFrame(this.__rafs[cb]); } } this.__rafs = {}; this._manager.removeOverlay(this);// We got detached while animating, ensure we show/hide the overlay
            // and fire iron-overlay-opened/closed event!
            if (this.__isAnimating) {
              if (this.opened) { this._finishRenderOpened(); } else {// Restore the focus if necessary.
                this._applyFocus(); this._finishRenderClosed();
              }
            }
          },/**
     * Toggle the opened state of the overlay.
     */toggle: function toggle() { this._setCanceled(false); this.opened = !this.opened; },/**
     * Open the overlay.
     */open: function open() { this._setCanceled(false); this.opened = true; },/**
     * Close the overlay.
     */close: function close() { this._setCanceled(false); this.opened = false; },/**
     * Cancels the overlay.
     * @param {Event=} event The original event
     */cancel: function cancel(event) { var cancelEvent = this.fire('iron-overlay-canceled', event, { cancelable: true }); if (cancelEvent.defaultPrevented) { return; } this._setCanceled(true); this.opened = false; },/**
     * Invalidates the cached tabbable nodes. To be called when any of the
     * focusable content changes (e.g. a button is disabled).
     */invalidateTabbables: function invalidateTabbables() { this.__firstFocusableNode = this.__lastFocusableNode = null; }, _ensureSetup: function _ensureSetup() { if (this._overlaySetup) { return; } this._overlaySetup = true; this.style.outline = 'none'; this.style.display = 'none'; },/**
     * Called when `opened` changes.
     * @param {boolean=} opened
     * @protected
     */_openedChanged: function _openedChanged(opened) {
            if (opened) { this.removeAttribute('aria-hidden'); } else { this.setAttribute('aria-hidden', 'true'); }// Defer any animation-related code on attached
            // (_openedChanged gets called again on attached).
            if (!this.isAttached) { return; } this.__isAnimating = true;// Deraf for non-blocking rendering.
            this.__deraf('__openedChanged', this.__openedChanged);
          }, _canceledChanged: function _canceledChanged() { this.closingReason = this.closingReason || {}; this.closingReason.canceled = this.canceled; }, _withBackdropChanged: function _withBackdropChanged() {// If tabindex is already set, no need to override it.
            if (this.withBackdrop && !this.hasAttribute('tabindex')) { this.setAttribute('tabindex', '-1'); this.__shouldRemoveTabIndex = true; } else if (this.__shouldRemoveTabIndex) { this.removeAttribute('tabindex'); this.__shouldRemoveTabIndex = false; } if (this.opened && this.isAttached) { this._manager.trackBackdrop(); }
          },/**
     * tasks which must occur before opening; e.g. making the element visible.
     * @protected
     */_prepareRenderOpened: function _prepareRenderOpened() {// Store focused node.
            this.__restoreFocusNode = this._manager.deepActiveElement;// Needed to calculate the size of the overlay so that transitions on its
            // size will have the correct starting points.
            this._preparePositioning(); this.refit(); this._finishPositioning();// Safari will apply the focus to the autofocus element when displayed
            // for the first time, so we make sure to return the focus where it was.
            if (this.noAutoFocus && document.activeElement === this._focusNode) { this._focusNode.blur(); this.__restoreFocusNode.focus(); }
          },/**
     * Tasks which cause the overlay to actually open; typically play an
     * animation.
     * @protected
     */_renderOpened: function _renderOpened() { this._finishRenderOpened(); },/**
     * Tasks which cause the overlay to actually close; typically play an
     * animation.
     * @protected
     */_renderClosed: function _renderClosed() { this._finishRenderClosed(); },/**
     * Tasks to be performed at the end of open action. Will fire
     * `iron-overlay-opened`.
     * @protected
     */_finishRenderOpened: function _finishRenderOpened() { this.notifyResize(); this.__isAnimating = false; this.fire('iron-overlay-opened'); },/**
     * Tasks to be performed at the end of close action. Will fire
     * `iron-overlay-closed`.
     * @protected
     */_finishRenderClosed: function _finishRenderClosed() {// Hide the overlay.
            this.style.display = 'none';// Reset z-index only at the end of the animation.
            this.style.zIndex = ''; this.notifyResize(); this.__isAnimating = false; this.fire('iron-overlay-closed', this.closingReason);
          }, _preparePositioning: function _preparePositioning() { this.style.transition = this.style.webkitTransition = 'none'; this.style.transform = this.style.webkitTransform = 'none'; this.style.display = ''; }, _finishPositioning: function _finishPositioning() {// First, make it invisible & reactivate animations.
            this.style.display = 'none';// Force reflow before re-enabling animations so that they don't start.
            // Set scrollTop to itself so that Closure Compiler doesn't remove this.
            this.scrollTop = this.scrollTop; this.style.transition = this.style.webkitTransition = ''; this.style.transform = this.style.webkitTransform = '';// Now that animations are enabled, make it visible again
            this.style.display = '';// Force reflow, so that following animations are properly started.
            // Set scrollTop to itself so that Closure Compiler doesn't remove this.
            this.scrollTop = this.scrollTop;
          },/**
     * Applies focus according to the opened state.
     * @protected
     */_applyFocus: function _applyFocus() {
            if (this.opened) { if (!this.noAutoFocus) { this._focusNode.focus(); } } else {// Restore focus.
              if (this.restoreFocusOnClose && this.__restoreFocusNode) {// If the activeElement is `<body>` or inside the overlay,
                // we are allowed to restore the focus. In all the other
                // cases focus might have been moved elsewhere by another
                // component or by an user interaction (e.g. click on a
                // button outside the overlay).
                var activeElement = this._manager.deepActiveElement; if (activeElement === document.body || composedContains(this, activeElement)) { this.__restoreFocusNode.focus(); }
              } this.__restoreFocusNode = null; this._focusNode.blur(); this._focusedChild = null;
            }
          },/**
     * Cancels (closes) the overlay. Call when click happens outside the overlay.
     * @param {!Event} event
     * @protected
     */_onCaptureClick: function _onCaptureClick(event) { if (!this.noCancelOnOutsideClick) { this.cancel(event); } },/**
     * Keeps track of the focused child. If withBackdrop, traps focus within
     * overlay.
     * @param {!Event} event
     * @protected
     */_onCaptureFocus: function _onCaptureFocus(event) { if (!this.withBackdrop) { return; } var path = dom(event).path; if (path.indexOf(this) === -1) { event.stopPropagation(); this._applyFocus(); } else { this._focusedChild =/** @type {Node} */path[0]; } },/**
     * Handles the ESC key event and cancels (closes) the overlay.
     * @param {!Event} event
     * @protected
     */_onCaptureEsc: function _onCaptureEsc(event) { if (!this.noCancelOnEscKey) { this.cancel(event); } },/**
     * Handles TAB key events to track focus changes.
     * Will wrap focus for overlays withBackdrop.
     * @param {!Event} event
     * @protected
     */_onCaptureTab: function _onCaptureTab(event) {
            if (!this.withBackdrop) { return; } this.__ensureFirstLastFocusables();// TAB wraps from last to first focusable.
            // Shift + TAB wraps from first to last focusable.
            var shift = event.shiftKey; var nodeToCheck = shift ? this.__firstFocusableNode : this.__lastFocusableNode; var nodeToSet = shift ? this.__lastFocusableNode : this.__firstFocusableNode; var shouldWrap = false; if (nodeToCheck === nodeToSet) {// If nodeToCheck is the same as nodeToSet, it means we have an overlay
              // with 0 or 1 focusables; in either case we still need to trap the
              // focus within the overlay.
              shouldWrap = true;
            } else {// In dom=shadow, the manager will receive focus changes on the main
              // root but not the ones within other shadow roots, so we can't rely on
              // _focusedChild, but we should check the deepest active element.
              var focusedNode = this._manager.deepActiveElement;// If the active element is not the nodeToCheck but the overlay itself,
              // it means the focus is about to go outside the overlay, hence we
              // should prevent that (e.g. user opens the overlay and hit Shift+TAB).
              shouldWrap = focusedNode === nodeToCheck || focusedNode === this;
            } if (shouldWrap) {// When the overlay contains the last focusable element of the document
              // and it's already focused, pressing TAB would move the focus outside
              // the document (e.g. to the browser search bar). Similarly, when the
              // overlay contains the first focusable element of the document and it's
              // already focused, pressing Shift+TAB would move the focus outside the
              // document (e.g. to the browser search bar).
              // In both cases, we would not receive a focus event, but only a blur.
              // In order to achieve focus wrapping, we prevent this TAB event and
              // force the focus. This will also prevent the focus to temporarily move
              // outside the overlay, which might cause scrolling.
              event.preventDefault(); this._focusedChild = nodeToSet; this._applyFocus();
            }
          },/**
     * Refits if the overlay is opened and not animating.
     * @protected
     */_onIronResize: function _onIronResize() { if (this.opened && !this.__isAnimating) { this.__deraf('refit', this.refit); } },/**
     * Will call notifyResize if overlay is opened.
     * Can be overridden in order to avoid multiple observers on the same node.
     * @protected
     */_onNodesChange: function _onNodesChange() {
            if (this.opened && !this.__isAnimating) {// It might have added focusable nodes, so invalidate cached values.
              this.invalidateTabbables(); this.notifyResize();
            }
          },/**
     * Updates the references to the first and last focusable nodes.
     * @private
     */__ensureFirstLastFocusables: function __ensureFirstLastFocusables() { var focusableNodes = this._focusableNodes; this.__firstFocusableNode = focusableNodes[0]; this.__lastFocusableNode = focusableNodes[focusableNodes.length - 1]; },/**
     * Tasks executed when opened changes: prepare for the opening, move the
     * focus, update the manager, render opened/closed.
     * @private
     */__openedChanged: function __openedChanged() {
            if (this.opened) {// Make overlay visible, then add it to the manager.
              this._prepareRenderOpened(); this._manager.addOverlay(this);// Move the focus to the child node with [autofocus].
              this._applyFocus(); this._renderOpened();
            } else {// Remove overlay, then restore the focus before actually closing.
              this._manager.removeOverlay(this); this._applyFocus(); this._renderClosed();
            }
          },/**
     * Debounces the execution of a callback to the next animation frame.
     * @param {!string} jobname
     * @param {!Function} callback Always bound to `this`
     * @private
     */__deraf: function __deraf(jobname, callback) { var rafs = this.__rafs; if (rafs[jobname] !== null) { cancelAnimationFrame(rafs[jobname]); } rafs[jobname] = requestAnimationFrame(function nextAnimationFrame() { rafs[jobname] = null; callback.call(this); }.bind(this)); },/**
     * @param {boolean} isAttached
     * @param {boolean} opened
     * @param {string=} scrollAction
     * @private
     */__updateScrollObservers: function __updateScrollObservers(isAttached, opened, scrollAction) { if (!isAttached || !opened || !this.__isValidScrollAction(scrollAction)) { removeScrollLock(this); this.__removeScrollListeners(); } else { if (scrollAction === 'lock') { this.__saveScrollPosition(); pushScrollLock(this); } this.__addScrollListeners(); } },/**
     * @private
     */__addScrollListeners: function __addScrollListeners() {
            if (!this.__rootNodes) {
              this.__rootNodes = [];// Listen for scroll events in all shadowRoots hosting this overlay only
              // when in native ShadowDOM.
              if (useShadow) { var node = this; while (node) { if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE && node.host) { this.__rootNodes.push(node); } node = node.host || node.assignedSlot || node.parentNode; } } this.__rootNodes.push(document);
            } this.__rootNodes.forEach(function (el) { el.addEventListener('scroll', this.__onCaptureScroll, { capture: true, passive: true }); }, this);
          },/**
     * @private
     */__removeScrollListeners: function __removeScrollListeners() { if (this.__rootNodes) { this.__rootNodes.forEach(function (el) { el.removeEventListener('scroll', this.__onCaptureScroll, { capture: true, passive: true }); }, this); } if (!this.isAttached) { this.__rootNodes = null; } },/**
     * @param {string=} scrollAction
     * @return {boolean}
     * @private
     */__isValidScrollAction: function __isValidScrollAction(scrollAction) { return scrollAction === 'lock' || scrollAction === 'refit' || scrollAction === 'cancel'; },/**
     * @private
     */__onCaptureScroll: function __onCaptureScroll(event) {
            if (this.__isAnimating) { return; }// Check if scroll outside the overlay.
            if (dom(event).path.indexOf(this) >= 0) { return; } switch (this.scrollAction) {
              case 'lock':// NOTE: scrolling might happen if a scroll event is not cancellable, or
                // if user pressed keys that cause scrolling (they're not prevented in
                // order not to break a11y features like navigate with arrow keys).
                this.__restoreScrollPosition(); break; case 'refit': this.__deraf('refit', this.refit); break; case 'cancel': this.cancel(event); break;
            }
          },/**
     * Memoizes the scroll position of the outside scrolling element.
     * @private
     */__saveScrollPosition: function __saveScrollPosition() {
            if (document.scrollingElement) { this.__scrollTop = document.scrollingElement.scrollTop; this.__scrollLeft = document.scrollingElement.scrollLeft; } else {// Since we don't know if is the body or html, get max.
              this.__scrollTop = Math.max(document.documentElement.scrollTop, document.body.scrollTop); this.__scrollLeft = Math.max(document.documentElement.scrollLeft, document.body.scrollLeft);
            }
          },/**
     * Resets the scroll position of the outside scrolling element.
     * @private
     */__restoreScrollPosition: function __restoreScrollPosition() {
            if (document.scrollingElement) { document.scrollingElement.scrollTop = this.__scrollTop; document.scrollingElement.scrollLeft = this.__scrollLeft; } else {// Since we don't know if is the body or html, set both.
              document.documentElement.scrollTop = document.body.scrollTop = this.__scrollTop; document.documentElement.scrollLeft = document.body.scrollLeft = this.__scrollLeft;
            }
          }
        }; var composedParent = function composedParent(node) { return node.assignedSlot || node.parentNode || node.host; }; var composedContains = function composedContains(ancestor, descendant) { for (var element = descendant; element; element = composedParent(element)) { if (element === ancestor) { return true; } } return false; };/**
       Use `Polymer.IronOverlayBehavior` to implement an element that can be hidden
       or shown, and displays on top of other content. It includes an optional
       backdrop, and can be used to implement a variety of UI controls including
       dialogs and drop downs. Multiple overlays may be displayed at once.
     
       See the [demo source
       code](https://github.com/PolymerElements/iron-overlay-behavior/blob/master/demo/simple-overlay.html)
       for an example.
     
       ### Closing and canceling
     
       An overlay may be hidden by closing or canceling. The difference between close
       and cancel is user intent. Closing generally implies that the user
       acknowledged the content on the overlay. By default, it will cancel whenever
       the user taps outside it or presses the escape key. This behavior is
       configurable with the `no-cancel-on-esc-key` and the
       `no-cancel-on-outside-click` properties. `close()` should be called explicitly
       by the implementer when the user interacts with a control in the overlay
       element. When the dialog is canceled, the overlay fires an
       'iron-overlay-canceled' event. Call `preventDefault` on this event to prevent
       the overlay from closing.
     
       ### Positioning
     
       By default the element is sized and positioned to fit and centered inside the
       window. You can position and size it manually using CSS. See
       `Polymer.IronFitBehavior`.
     
       ### Backdrop
     
       Set the `with-backdrop` attribute to display a backdrop behind the overlay.
       The backdrop is appended to `<body>` and is of type `<iron-overlay-backdrop>`.
       See its doc page for styling options.
     
       In addition, `with-backdrop` will wrap the focus within the content in the
       light DOM. Override the [`_focusableNodes`
       getter](#Polymer.IronOverlayBehavior:property-_focusableNodes) to achieve a
       different behavior.
     
       ### Limitations
     
       The element is styled to appear on top of other content by setting its
       `z-index` property. You must ensure no element has a stacking context with a
       higher `z-index` than its parent stacking context. You should place this
       element as a child of `<body>` whenever possible.
     
       @demo demo/index.html
       @polymerBehavior
      */var IronOverlayBehavior = [IronFitBehavior, IronResizableBehavior, IronOverlayBehaviorImpl];/**
                                                                                                         * Fired after the overlay opens.
                                                                                                         * @event iron-overlay-opened
                                                                                                         */ /**
                                                                                                             * Fired when the overlay is canceled, but before it is closed.
                                                                                                             * @event iron-overlay-canceled
                                                                                                             * @param {Event} event The closing of the overlay can be prevented
                                                                                                             * by calling `event.preventDefault()`. The `event.detail` is the original event
                                                                                                             * that originated the canceling (e.g. ESC keyboard event or click event outside
                                                                                                             * the overlay).
                                                                                                             */ /**
                                                                                                                 * Fired after the overlay closes.
                                                                                                                 * @event iron-overlay-closed
                                                                                                                 * @param {Event} event The `event.detail` is the `closingReason` property
                                                                                                                 * (contains `canceled`, whether the overlay was canceled).
                                                                                                                 */var NeonAnimatableBehavior = {
          properties: {/**
       * Animation configuration. See README for more info.
       */animationConfig: { type: Object },/**
       * Convenience property for setting an 'entry' animation. Do not set
       * `animationConfig.entry` manually if using this. The animated node is set
       * to `this` if using this property.
       */entryAnimation: { observer: '_entryAnimationChanged', type: String },/**
       * Convenience property for setting an 'exit' animation. Do not set
       * `animationConfig.exit` manually if using this. The animated node is set
       * to `this` if using this property.
       */exitAnimation: { observer: '_exitAnimationChanged', type: String }
          }, _entryAnimationChanged: function _entryAnimationChanged() { this.animationConfig = this.animationConfig || {}; this.animationConfig['entry'] = [{ name: this.entryAnimation, node: this }]; }, _exitAnimationChanged: function _exitAnimationChanged() { this.animationConfig = this.animationConfig || {}; this.animationConfig['exit'] = [{ name: this.exitAnimation, node: this }]; }, _copyProperties: function _copyProperties(config1, config2) {// shallowly copy properties from config2 to config1
            for (var property in config2) { config1[property] = config2[property]; }
          }, _cloneConfig: function _cloneConfig(config) { var clone = { isClone: true }; this._copyProperties(clone, config); return clone; }, _getAnimationConfigRecursive: function _getAnimationConfigRecursive(type, map, allConfigs) {
            if (!this.animationConfig) { return; } if (this.animationConfig.value && typeof this.animationConfig.value === 'function') { this._warn(this._logf('playAnimation', 'Please put \'animationConfig\' inside of your components \'properties\' object instead of outside of it.')); return; }// type is optional
            var thisConfig; if (type) { thisConfig = this.animationConfig[type]; } else { thisConfig = this.animationConfig; } if (!Array.isArray(thisConfig)) { thisConfig = [thisConfig]; }// iterate animations and recurse to process configurations from child nodes
            if (thisConfig) {
              for (var config, index = 0; config = thisConfig[index]; index++) {
                if (config.animatable) { config.animatable._getAnimationConfigRecursive(config.type || type, map, allConfigs); } else {
                  if (config.id) {
                    var cachedConfig = map[config.id]; if (cachedConfig) {// merge configurations with the same id, making a clone lazily
                      if (!cachedConfig.isClone) { map[config.id] = this._cloneConfig(cachedConfig); cachedConfig = map[config.id]; } this._copyProperties(cachedConfig, config);
                    } else {// put any configs with an id into a map
                      map[config.id] = config;
                    }
                  } else { allConfigs.push(config); }
                }
              }
            }
          },/**
     * An element implementing `NeonAnimationRunnerBehavior` calls this
     * method to configure an animation with an optional type. Elements
     * implementing `NeonAnimatableBehavior` should define the property
     * `animationConfig`, which is either a configuration object or a map of
     * animation type to array of configuration objects.
     */getAnimationConfig: function getAnimationConfig(type) {
            var map = {}; var allConfigs = []; this._getAnimationConfigRecursive(type, map, allConfigs);// append the configurations saved in the map to the array
            for (var key in map) { allConfigs.push(map[key]); } return allConfigs;
          }
        }; var NeonAnimationRunnerBehaviorImpl = {
          _configureAnimations: function _configureAnimations(configs) {
            var results = []; var resultsToPlay = []; if (configs.length > 0) {
              for (var _config, index = 0; _config = configs[index]; index++) {
                var neonAnimation = document.createElement(_config.name);// is this element actually a neon animation?
                if (neonAnimation.isNeonAnimation) {
                  var result = null;// Closure compiler does not work well with a try / catch here.
                  // .configure needs to be explicitly defined
                  if (!neonAnimation.configure) {/**
               * @param {Object} config
               * @return {AnimationEffectReadOnly}
               */neonAnimation.configure = function (config) { return null; };
                  } result = neonAnimation.configure(_config); resultsToPlay.push({ result: result, config: _config, neonAnimation: neonAnimation });
                } else { console.warn(this.is + ':', _config.name, 'not found!'); }
              }
            } for (var i = 0; i < resultsToPlay.length; i++) {
              var _result = resultsToPlay[i].result; var _config2 = resultsToPlay[i].config; var _neonAnimation = resultsToPlay[i].neonAnimation;// configuration or play could fail if polyfills aren't loaded
              try {// Check if we have an Effect rather than an Animation
                if (typeof _result.cancel != 'function') { _result = document.timeline.play(_result); }
              } catch (e) { _result = null; console.warn('Couldnt play', '(', _config2.name, ').', e); } if (_result) { results.push({ neonAnimation: _neonAnimation, config: _config2, animation: _result }); }
            } return results;
          }, _shouldComplete: function _shouldComplete(activeEntries) { var finished = true; for (var i = 0; i < activeEntries.length; i++) { if (activeEntries[i].animation.playState != 'finished') { finished = false; break; } } return finished; }, _complete: function _complete(activeEntries) { for (var i = 0; i < activeEntries.length; i++) { activeEntries[i].neonAnimation.complete(activeEntries[i].config); } for (var i = 0; i < activeEntries.length; i++) { activeEntries[i].animation.cancel(); } },/**
     * Plays an animation with an optional `type`.
     * @param {string=} type
     * @param {!Object=} cookie
     */playAnimation: function playAnimation(type, cookie) { var configs = this.getAnimationConfig(type); if (!configs) { return; } this._active = this._active || {}; if (this._active[type]) { this._complete(this._active[type]); delete this._active[type]; } var activeEntries = this._configureAnimations(configs); if (activeEntries.length == 0) { this.fire('neon-animation-finish', cookie, { bubbles: false }); return; } this._active[type] = activeEntries; for (var i = 0; i < activeEntries.length; i++) { activeEntries[i].animation.onfinish = function () { if (this._shouldComplete(activeEntries)) { this._complete(activeEntries); delete this._active[type]; this.fire('neon-animation-finish', cookie, { bubbles: false }); } }.bind(this); } },/**
     * Cancels the currently running animations.
     */cancelAnimation: function cancelAnimation() { for (var k in this._active) { var entries = this._active[k]; for (var j in entries) { entries[j].animation.cancel(); } } this._active = {}; }
        };/** @polymerBehavior */var NeonAnimationRunnerBehavior = [NeonAnimatableBehavior, NeonAnimationRunnerBehaviorImpl]; Polymer({
          _template: html(_templateObject18_e13d1b4010eb11ec83cd7fddb4847b33()), is: 'iron-dropdown', behaviors: [IronControlState, IronA11yKeysBehavior, IronOverlayBehavior, NeonAnimationRunnerBehavior], properties: {/**
       * The orientation against which to align the dropdown content
       * horizontally relative to the dropdown trigger.
       * Overridden from `Polymer.IronFitBehavior`.
       */horizontalAlign: { type: String, value: 'left', reflectToAttribute: true },/**
       * The orientation against which to align the dropdown content
       * vertically relative to the dropdown trigger.
       * Overridden from `Polymer.IronFitBehavior`.
       */verticalAlign: { type: String, value: 'top', reflectToAttribute: true },/**
       * An animation config. If provided, this will be used to animate the
       * opening of the dropdown. Pass an Array for multiple animations.
       * See `neon-animation` documentation for more animation configuration
       * details.
       */openAnimationConfig: { type: Object },/**
       * An animation config. If provided, this will be used to animate the
       * closing of the dropdown. Pass an Array for multiple animations.
       * See `neon-animation` documentation for more animation configuration
       * details.
       */closeAnimationConfig: { type: Object },/**
       * If provided, this will be the element that will be focused when
       * the dropdown opens.
       */focusTarget: { type: Object },/**
       * Set to true to disable animations when opening and closing the
       * dropdown.
       */noAnimations: { type: Boolean, value: false },/**
       * By default, the dropdown will constrain scrolling on the page
       * to itself when opened.
       * Set to true in order to prevent scroll from being constrained
       * to the dropdown when it opens.
       * This property is a shortcut to set `scrollAction` to lock or refit.
       * Prefer directly setting the `scrollAction` property.
       */allowOutsideScroll: { type: Boolean, value: false, observer: '_allowOutsideScrollChanged' }
          }, listeners: { 'neon-animation-finish': '_onNeonAnimationFinish' }, observers: ['_updateOverlayPosition(positionTarget, verticalAlign, horizontalAlign, verticalOffset, horizontalOffset)'],/**
     * The element that is contained by the dropdown, if any.
     */get containedElement() {// Polymer 2.x returns slot.assignedNodes which can contain text nodes.
            var nodes = dom(this.$.content).getDistributedNodes(); for (var i = 0, l = nodes.length; i < l; i++) { if (nodes[i].nodeType === Node.ELEMENT_NODE) { return nodes[i]; } }
          }, ready: function ready() {// Ensure scrollAction is set.
            if (!this.scrollAction) { this.scrollAction = this.allowOutsideScroll ? 'refit' : 'lock'; } this._readied = true;
          }, attached: function attached() { if (!this.sizingTarget || this.sizingTarget === this) { this.sizingTarget = this.containedElement || this; } }, detached: function detached() { this.cancelAnimation(); },/**
     * Called when the value of `opened` changes.
     * Overridden from `IronOverlayBehavior`
     */_openedChanged: function _openedChanged() { if (this.opened && this.disabled) { this.cancel(); } else { this.cancelAnimation(); this._updateAnimationConfig(); IronOverlayBehaviorImpl._openedChanged.apply(this, arguments); } },/**
     * Overridden from `IronOverlayBehavior`.
     */_renderOpened: function _renderOpened() { if (!this.noAnimations && this.animationConfig.open) { this.$.contentWrapper.classList.add('animating'); this.playAnimation('open'); } else { IronOverlayBehaviorImpl._renderOpened.apply(this, arguments); } },/**
     * Overridden from `IronOverlayBehavior`.
     */_renderClosed: function _renderClosed() { if (!this.noAnimations && this.animationConfig.close) { this.$.contentWrapper.classList.add('animating'); this.playAnimation('close'); } else { IronOverlayBehaviorImpl._renderClosed.apply(this, arguments); } },/**
     * Called when animation finishes on the dropdown (when opening or
     * closing). Responsible for "completing" the process of opening or
     * closing the dropdown by positioning it or setting its display to
     * none.
     */_onNeonAnimationFinish: function _onNeonAnimationFinish() { this.$.contentWrapper.classList.remove('animating'); if (this.opened) { this._finishRenderOpened(); } else { this._finishRenderClosed(); } },/**
     * Constructs the final animation config from different properties used
     * to configure specific parts of the opening and closing animations.
     */_updateAnimationConfig: function _updateAnimationConfig() {// Update the animation node to be the containedElement.
            var animationNode = this.containedElement; var animations = [].concat(this.openAnimationConfig || []).concat(this.closeAnimationConfig || []); for (var i = 0; i < animations.length; i++) { animations[i].node = animationNode; } this.animationConfig = { open: this.openAnimationConfig, close: this.closeAnimationConfig };
          },/**
     * Updates the overlay position based on configured horizontal
     * and vertical alignment.
     */_updateOverlayPosition: function _updateOverlayPosition() {
            if (this.isAttached) {// This triggers iron-resize, and iron-overlay-behavior will call refit if
              // needed.
              this.notifyResize();
            }
          },/**
     * Sets scrollAction according to the value of allowOutsideScroll.
     * Prefer setting directly scrollAction.
     */_allowOutsideScrollChanged: function _allowOutsideScrollChanged(allowOutsideScroll) {// Wait until initial values are all set.
            if (!this._readied) { return; } if (!allowOutsideScroll) { this.scrollAction = 'lock'; } else if (!this.scrollAction || this.scrollAction === 'lock') { this.scrollAction = 'refit'; }
          },/**
     * Apply focus to focusTarget or containedElement
     */_applyFocus: function _applyFocus() { var focusTarget = this.focusTarget || this.containedElement; if (focusTarget && this.opened && !this.noAutoFocus) { focusTarget.focus(); } else { IronOverlayBehaviorImpl._applyFocus.apply(this, arguments); } }
        }); var NeonAnimationBehavior = {
          properties: {/**
       * Defines the animation timing.
       */animationTiming: { type: Object, value: function value() { return { duration: 500, easing: 'cubic-bezier(0.4, 0, 0.2, 1)', fill: 'both' }; } }
          },/**
     * Can be used to determine that elements implement this behavior.
     */isNeonAnimation: true,/**
     * Do any animation configuration here.
     */ // configure: function(config) {
          // },
          created: function created() { if (!document.body.animate) { console.warn('No web animations detected. This element will not' + ' function without a web animations polyfill.'); } },/**
     * Returns the animation timing by mixing in properties from `config` to the
     * defaults defined by the animation.
     */timingFromConfig: function timingFromConfig(config) { if (config.timing) { for (var property in config.timing) { this.animationTiming[property] = config.timing[property]; } } return this.animationTiming; },/**
     * Sets `transform` and `transformOrigin` properties along with the prefixed
     * versions.
     */setPrefixedProperty: function setPrefixedProperty(node, property, value) { var map = { 'transform': ['webkitTransform'], 'transformOrigin': ['mozTransformOrigin', 'webkitTransformOrigin'] }; var prefixes = map[property]; for (var prefix, index = 0; prefix = prefixes[index]; index++) { node.style[prefix] = value; } node.style[property] = value; },/**
     * Called when the animation finishes.
     */complete: function complete(config) { }
        }; Polymer({ is: 'fade-in-animation', behaviors: [NeonAnimationBehavior], configure: function configure(config) { var node = config.node; this._effect = new KeyframeEffect(node, [{ 'opacity': '0' }, { 'opacity': '1' }], this.timingFromConfig(config)); return this._effect; } }); Polymer({ is: 'fade-out-animation', behaviors: [NeonAnimationBehavior], configure: function configure(config) { var node = config.node; this._effect = new KeyframeEffect(node, [{ 'opacity': '1' }, { 'opacity': '0' }], this.timingFromConfig(config)); return this._effect; } }); var template$5 = html(_templateObject19_e13d1b4010eb11ec83cd7fddb4847b33()); template$5.setAttribute('style', 'display: none;'); document.head.appendChild(template$5.content); Polymer({ is: 'paper-menu-grow-height-animation', behaviors: [NeonAnimationBehavior], configure: function configure(config) { var node = config.node; var rect = node.getBoundingClientRect(); var height = rect.height; this._effect = new KeyframeEffect(node, [{ height: height / 2 + 'px' }, { height: height + 'px' }], this.timingFromConfig(config)); return this._effect; } }); Polymer({ is: 'paper-menu-grow-width-animation', behaviors: [NeonAnimationBehavior], configure: function configure(config) { var node = config.node; var rect = node.getBoundingClientRect(); var width = rect.width; this._effect = new KeyframeEffect(node, [{ width: width / 2 + 'px' }, { width: width + 'px' }], this.timingFromConfig(config)); return this._effect; } }); Polymer({ is: 'paper-menu-shrink-width-animation', behaviors: [NeonAnimationBehavior], configure: function configure(config) { var node = config.node; var rect = node.getBoundingClientRect(); var width = rect.width; this._effect = new KeyframeEffect(node, [{ width: width + 'px' }, { width: width - width / 20 + 'px' }], this.timingFromConfig(config)); return this._effect; } }); Polymer({ is: 'paper-menu-shrink-height-animation', behaviors: [NeonAnimationBehavior], configure: function configure(config) { var node = config.node; var rect = node.getBoundingClientRect(); var height = rect.height; this.setPrefixedProperty(node, 'transformOrigin', '0 0'); this._effect = new KeyframeEffect(node, [{ height: height + 'px', transform: 'translateY(0)' }, { height: height / 2 + 'px', transform: 'translateY(-20px)' }], this.timingFromConfig(config)); return this._effect; } }); var config = { ANIMATION_CUBIC_BEZIER: 'cubic-bezier(.3,.95,.5,1)', MAX_ANIMATION_TIME_MS: 400 };/**
     Material design: [Dropdown
     buttons](https://www.google.com/design/spec/components/buttons.html#buttons-dropdown-buttons)
     
     `paper-menu-button` allows one to compose a designated "trigger" element with
     another element that represents "content", to create a dropdown menu that
     displays the "content" when the "trigger" is clicked.
     
     The child element assigned to the `dropdown-trigger` slot will be used as the
     "trigger" element. The child element assigned to the `dropdown-content` slot
     will be used as the "content" element.
     
     The `paper-menu-button` is sensitive to its content's `iron-select` events. If
     the "content" element triggers an `iron-select` event, the `paper-menu-button`
     will close automatically.
     
     Example:
     
         <paper-menu-button>
           <paper-icon-button icon="menu"
     slot="dropdown-trigger"></paper-icon-button> <paper-listbox
     slot="dropdown-content"> <paper-item>Share</paper-item>
             <paper-item>Settings</paper-item>
             <paper-item>Help</paper-item>
           </paper-listbox>
         </paper-menu-button>
     
     ### Styling
     
     The following custom properties and mixins are also available for styling:
     
     Custom property | Description | Default
     ----------------|-------------|----------
     `--paper-menu-button-dropdown-background` | Background color of the paper-menu-button dropdown | `--primary-background-color`
     `--paper-menu-button` | Mixin applied to the paper-menu-button | `{}`
     `--paper-menu-button-disabled` | Mixin applied to the paper-menu-button when disabled | `{}`
     `--paper-menu-button-dropdown` | Mixin applied to the paper-menu-button dropdown | `{}`
     `--paper-menu-button-content` | Mixin applied to the paper-menu-button content | `{}`
     
     @hero hero.svg
     @demo demo/index.html
     */var PaperMenuButton = Polymer({
          _template: html(_templateObject20_e13d1b4010eb11ec83cd7fddb4847b33()), is: 'paper-menu-button',/**
     * Fired when the dropdown opens.
     *
     * @event paper-dropdown-open
     */ /**
         * Fired when the dropdown closes.
         *
         * @event paper-dropdown-close
         */behaviors: [IronA11yKeysBehavior, IronControlState], properties: {/**
       * True if the content is currently displayed.
       */opened: { type: Boolean, value: false, notify: true, observer: '_openedChanged' },/**
       * The orientation against which to align the menu dropdown
       * horizontally relative to the dropdown trigger.
       */horizontalAlign: { type: String, value: 'left', reflectToAttribute: true },/**
       * The orientation against which to align the menu dropdown
       * vertically relative to the dropdown trigger.
       */verticalAlign: { type: String, value: 'top', reflectToAttribute: true },/**
       * If true, the `horizontalAlign` and `verticalAlign` properties will
       * be considered preferences instead of strict requirements when
       * positioning the dropdown and may be changed if doing so reduces
       * the area of the dropdown falling outside of `fitInto`.
       */dynamicAlign: { type: Boolean },/**
       * A pixel value that will be added to the position calculated for the
       * given `horizontalAlign`. Use a negative value to offset to the
       * left, or a positive value to offset to the right.
       */horizontalOffset: { type: Number, value: 0, notify: true },/**
       * A pixel value that will be added to the position calculated for the
       * given `verticalAlign`. Use a negative value to offset towards the
       * top, or a positive value to offset towards the bottom.
       */verticalOffset: { type: Number, value: 0, notify: true },/**
       * If true, the dropdown will be positioned so that it doesn't overlap
       * the button.
       */noOverlap: { type: Boolean },/**
       * Set to true to disable animations when opening and closing the
       * dropdown.
       */noAnimations: { type: Boolean, value: false },/**
       * Set to true to disable automatically closing the dropdown after
       * a selection has been made.
       */ignoreSelect: { type: Boolean, value: false },/**
       * Set to true to enable automatically closing the dropdown after an
       * item has been activated, even if the selection did not change.
       */closeOnActivate: { type: Boolean, value: false },/**
       * An animation config. If provided, this will be used to animate the
       * opening of the dropdown.
       */openAnimationConfig: { type: Object, value: function value() { return [{ name: 'fade-in-animation', timing: { delay: 100, duration: 200 } }, { name: 'paper-menu-grow-width-animation', timing: { delay: 100, duration: 150, easing: config.ANIMATION_CUBIC_BEZIER } }, { name: 'paper-menu-grow-height-animation', timing: { delay: 100, duration: 275, easing: config.ANIMATION_CUBIC_BEZIER } }]; } },/**
       * An animation config. If provided, this will be used to animate the
       * closing of the dropdown.
       */closeAnimationConfig: { type: Object, value: function value() { return [{ name: 'fade-out-animation', timing: { duration: 150 } }, { name: 'paper-menu-shrink-width-animation', timing: { delay: 100, duration: 50, easing: config.ANIMATION_CUBIC_BEZIER } }, { name: 'paper-menu-shrink-height-animation', timing: { duration: 200, easing: 'ease-in' } }]; } },/**
       * By default, the dropdown will constrain scrolling on the page
       * to itself when opened.
       * Set to true in order to prevent scroll from being constrained
       * to the dropdown when it opens.
       */allowOutsideScroll: { type: Boolean, value: false },/**
       * Whether focus should be restored to the button when the menu closes.
       */restoreFocusOnClose: { type: Boolean, value: true },/**
       * This is the element intended to be bound as the focus target
       * for the `iron-dropdown` contained by `paper-menu-button`.
       */_dropdownContent: { type: Object }
          }, hostAttributes: { role: 'group', 'aria-haspopup': 'true' }, listeners: { 'iron-activate': '_onIronActivate', 'iron-select': '_onIronSelect' },/**
     * The content element that is contained by the menu button, if any.
     */get contentElement() {// Polymer 2.x returns slot.assignedNodes which can contain text nodes.
            var nodes = dom(this.$.content).getDistributedNodes(); for (var i = 0, l = nodes.length; i < l; i++) { if (nodes[i].nodeType === Node.ELEMENT_NODE) { return nodes[i]; } }
          },/**
     * Toggles the dropdown content between opened and closed.
     */toggle: function toggle() { if (this.opened) { this.close(); } else { this.open(); } },/**
     * Make the dropdown content appear as an overlay positioned relative
     * to the dropdown trigger.
     */open: function open() { if (this.disabled) { return; } this.$.dropdown.open(); },/**
     * Hide the dropdown content.
     */close: function close() { this.$.dropdown.close(); },/**
     * When an `iron-select` event is received, the dropdown should
     * automatically close on the assumption that a value has been chosen.
     *
     * @param {CustomEvent} event A CustomEvent instance with type
     * set to `"iron-select"`.
     */_onIronSelect: function _onIronSelect(event) { if (!this.ignoreSelect) { this.close(); } },/**
     * Closes the dropdown when an `iron-activate` event is received if
     * `closeOnActivate` is true.
     *
     * @param {CustomEvent} event A CustomEvent of type 'iron-activate'.
     */_onIronActivate: function _onIronActivate(event) { if (this.closeOnActivate) { this.close(); } },/**
     * When the dropdown opens, the `paper-menu-button` fires `paper-open`.
     * When the dropdown closes, the `paper-menu-button` fires `paper-close`.
     *
     * @param {boolean} opened True if the dropdown is opened, otherwise false.
     * @param {boolean} oldOpened The previous value of `opened`.
     */_openedChanged: function _openedChanged(opened, oldOpened) {
            if (opened) {// TODO(cdata): Update this when we can measure changes in distributed
              // children in an idiomatic way.
              // We poke this property in case the element has changed. This will
              // cause the focus target for the `iron-dropdown` to be updated as
              // necessary:
              this._dropdownContent = this.contentElement; this.fire('paper-dropdown-open');
            } else if (oldOpened != null) { this.fire('paper-dropdown-close'); }
          },/**
     * If the dropdown is open when disabled becomes true, close the
     * dropdown.
     *
     * @param {boolean} disabled True if disabled, otherwise false.
     */_disabledChanged: function _disabledChanged(disabled) { IronControlState._disabledChanged.apply(this, arguments); if (disabled && this.opened) { this.close(); } }, __onIronOverlayCanceled: function __onIronOverlayCanceled(event) { var uiEvent = event.detail; var trigger = this.$.trigger; var path = dom(uiEvent).path; if (path.indexOf(trigger) > -1) { event.preventDefault(); } }
        }); Object.keys(config).forEach(function (key) { PaperMenuButton[key] = config[key]; }); var Utility = { distance: function distance(x1, y1, x2, y2) { var xDelta = x1 - x2; var yDelta = y1 - y2; return Math.sqrt(xDelta * xDelta + yDelta * yDelta); }, now: window.performance && window.performance.now ? window.performance.now.bind(window.performance) : Date.now };/**
      * @param {HTMLElement} element
      * @constructor
      */function ElementMetrics(element) { this.element = element; this.width = this.boundingRect.width; this.height = this.boundingRect.height; this.size = Math.max(this.width, this.height); } ElementMetrics.prototype = { get boundingRect() { return this.element.getBoundingClientRect(); }, furthestCornerDistanceFrom: function furthestCornerDistanceFrom(x, y) { var topLeft = Utility.distance(x, y, 0, 0); var topRight = Utility.distance(x, y, this.width, 0); var bottomLeft = Utility.distance(x, y, 0, this.height); var bottomRight = Utility.distance(x, y, this.width, this.height); return Math.max(topLeft, topRight, bottomLeft, bottomRight); } };/**
      * @param {HTMLElement} element
      * @constructor
      */function Ripple(element) { this.element = element; this.color = window.getComputedStyle(element).color; this.wave = document.createElement('div'); this.waveContainer = document.createElement('div'); this.wave.style.backgroundColor = this.color; this.wave.classList.add('wave'); this.waveContainer.classList.add('wave-container'); dom(this.waveContainer).appendChild(this.wave); this.resetInteractionState(); } Ripple.MAX_RADIUS = 300; Ripple.prototype = {
          get recenters() { return this.element.recenters; }, get center() { return this.element.center; }, get mouseDownElapsed() { var elapsed; if (!this.mouseDownStart) { return 0; } elapsed = Utility.now() - this.mouseDownStart; if (this.mouseUpStart) { elapsed -= this.mouseUpElapsed; } return elapsed; }, get mouseUpElapsed() { return this.mouseUpStart ? Utility.now() - this.mouseUpStart : 0; }, get mouseDownElapsedSeconds() { return this.mouseDownElapsed / 1000; }, get mouseUpElapsedSeconds() { return this.mouseUpElapsed / 1000; }, get mouseInteractionSeconds() { return this.mouseDownElapsedSeconds + this.mouseUpElapsedSeconds; }, get initialOpacity() { return this.element.initialOpacity; }, get opacityDecayVelocity() { return this.element.opacityDecayVelocity; }, get radius() { var width2 = this.containerMetrics.width * this.containerMetrics.width; var height2 = this.containerMetrics.height * this.containerMetrics.height; var waveRadius = Math.min(Math.sqrt(width2 + height2), Ripple.MAX_RADIUS) * 1.1 + 5; var duration = 1.1 - 0.2 * (waveRadius / Ripple.MAX_RADIUS); var timeNow = this.mouseInteractionSeconds / duration; var size = waveRadius * (1 - Math.pow(80, -timeNow)); return Math.abs(size); }, get opacity() { if (!this.mouseUpStart) { return this.initialOpacity; } return Math.max(0, this.initialOpacity - this.mouseUpElapsedSeconds * this.opacityDecayVelocity); }, get outerOpacity() {// Linear increase in background opacity, capped at the opacity
            // of the wavefront (waveOpacity).
            var outerOpacity = this.mouseUpElapsedSeconds * 0.3; var waveOpacity = this.opacity; return Math.max(0, Math.min(outerOpacity, waveOpacity));
          }, get isOpacityFullyDecayed() { return this.opacity < 0.01 && this.radius >= Math.min(this.maxRadius, Ripple.MAX_RADIUS); }, get isRestingAtMaxRadius() { return this.opacity >= this.initialOpacity && this.radius >= Math.min(this.maxRadius, Ripple.MAX_RADIUS); }, get isAnimationComplete() { return this.mouseUpStart ? this.isOpacityFullyDecayed : this.isRestingAtMaxRadius; }, get translationFraction() { return Math.min(1, this.radius / this.containerMetrics.size * 2 / Math.sqrt(2)); }, get xNow() { if (this.xEnd) { return this.xStart + this.translationFraction * (this.xEnd - this.xStart); } return this.xStart; }, get yNow() { if (this.yEnd) { return this.yStart + this.translationFraction * (this.yEnd - this.yStart); } return this.yStart; }, get isMouseDown() { return this.mouseDownStart && !this.mouseUpStart; }, resetInteractionState: function resetInteractionState() { this.maxRadius = 0; this.mouseDownStart = 0; this.mouseUpStart = 0; this.xStart = 0; this.yStart = 0; this.xEnd = 0; this.yEnd = 0; this.slideDistance = 0; this.containerMetrics = new ElementMetrics(this.element); }, draw: function draw() {
            var scale; var dx; var dy; this.wave.style.opacity = this.opacity; scale = this.radius / (this.containerMetrics.size / 2); dx = this.xNow - this.containerMetrics.width / 2; dy = this.yNow - this.containerMetrics.height / 2;// 2d transform for safari because of border-radius and overflow:hidden
            // clipping bug. https://bugs.webkit.org/show_bug.cgi?id=98538
            this.waveContainer.style.webkitTransform = 'translate(' + dx + 'px, ' + dy + 'px)'; this.waveContainer.style.transform = 'translate3d(' + dx + 'px, ' + dy + 'px, 0)'; this.wave.style.webkitTransform = 'scale(' + scale + ',' + scale + ')'; this.wave.style.transform = 'scale3d(' + scale + ',' + scale + ',1)';
          },/** @param {Event=} event */downAction: function downAction(event) { var xCenter = this.containerMetrics.width / 2; var yCenter = this.containerMetrics.height / 2; this.resetInteractionState(); this.mouseDownStart = Utility.now(); if (this.center) { this.xStart = xCenter; this.yStart = yCenter; this.slideDistance = Utility.distance(this.xStart, this.yStart, this.xEnd, this.yEnd); } else { this.xStart = event ? event.detail.x - this.containerMetrics.boundingRect.left : this.containerMetrics.width / 2; this.yStart = event ? event.detail.y - this.containerMetrics.boundingRect.top : this.containerMetrics.height / 2; } if (this.recenters) { this.xEnd = xCenter; this.yEnd = yCenter; this.slideDistance = Utility.distance(this.xStart, this.yStart, this.xEnd, this.yEnd); } this.maxRadius = this.containerMetrics.furthestCornerDistanceFrom(this.xStart, this.yStart); this.waveContainer.style.top = (this.containerMetrics.height - this.containerMetrics.size) / 2 + 'px'; this.waveContainer.style.left = (this.containerMetrics.width - this.containerMetrics.size) / 2 + 'px'; this.waveContainer.style.width = this.containerMetrics.size + 'px'; this.waveContainer.style.height = this.containerMetrics.size + 'px'; },/** @param {Event=} event */upAction: function upAction(event) { if (!this.isMouseDown) { return; } this.mouseUpStart = Utility.now(); }, remove: function remove() { dom(dom(this.waveContainer).parentNode).removeChild(this.waveContainer); }
        };/**
     Material design: [Surface
     reaction](https://www.google.com/design/spec/animation/responsive-interaction.html#responsive-interaction-surface-reaction)
     
     `paper-ripple` provides a visual effect that other paper elements can
     use to simulate a rippling effect emanating from the point of contact.  The
     effect can be visualized as a concentric circle with motion.
     
     Example:
     
         <div style="position:relative">
           <paper-ripple></paper-ripple>
         </div>
     
     Note, it's important that the parent container of the ripple be relative
     position, otherwise the ripple will emanate outside of the desired container.
     
     `paper-ripple` listens to "mousedown" and "mouseup" events so it would display
     ripple effect when touches on it.  You can also defeat the default behavior and
     manually route the down and up actions to the ripple element.  Note that it is
     important if you call `downAction()` you will have to make sure to call
     `upAction()` so that `paper-ripple` would end the animation loop.
     
     Example:
     
         <paper-ripple id="ripple" style="pointer-events: none;"></paper-ripple>
         ...
         downAction: function(e) {
           this.$.ripple.downAction(e.detail);
         },
         upAction: function(e) {
           this.$.ripple.upAction();
         }
     
     Styling ripple effect:
     
       Use CSS color property to style the ripple:
     
         paper-ripple {
           color: #4285f4;
         }
     
       Note that CSS color property is inherited so it is not required to set it on
       the `paper-ripple` element directly.
     
     By default, the ripple is centered on the point of contact.  Apply the
     `recenters` attribute to have the ripple grow toward the center of its
     container.
     
         <paper-ripple recenters></paper-ripple>
     
     You can also  center the ripple inside its container from the start.
     
         <paper-ripple center></paper-ripple>
     
     Apply `circle` class to make the rippling effect within a circle.
     
         <paper-ripple class="circle"></paper-ripple>
     
     @element paper-ripple
     @demo demo/index.html
     */Polymer({/** @override */_template: html(_templateObject21_e13d1b4010eb11ec83cd7fddb4847b33()), is: 'paper-ripple', behaviors: [IronA11yKeysBehavior], properties: {/**
       * The initial opacity set on the wave.
       * @type number
       * @default 0.25
       */initialOpacity: { type: Number, value: 0.25 },/**
       * How fast (opacity per second) the wave fades out.
       *
       * @type number
       * @default 0.8
       */opacityDecayVelocity: { type: Number, value: 0.8 },/**
       * If true, ripples will exhibit a gravitational pull towards
       * the center of their container as they fade away.
       *
       * @type boolean
       * @default false
       */recenters: { type: Boolean, value: false },/**
       * If true, ripples will center inside its container
       *
       * @type boolean
       * @default false
       */center: { type: Boolean, value: false },/**
       * A list of the visual ripples.
       *
       * @type Array
       * @default []
       */ripples: { type: Array, value: function value() { return []; } },/**
       * True when there are visible ripples animating within the
       * element.
       */animating: { type: Boolean, readOnly: true, reflectToAttribute: true, value: false },/**
       * If true, the ripple will remain in the "down" state until `holdDown`
       * is set to false again.
       */holdDown: { type: Boolean, value: false, observer: '_holdDownChanged' },/**
       * If true, the ripple will not generate a ripple effect
       * via pointer interaction.
       * Calling ripple's imperative api like `simulatedRipple` will
       * still generate the ripple effect.
       */noink: { type: Boolean, value: false }, _animating: { type: Boolean }, _boundAnimate: { type: Function, value: function value() { return this.animate.bind(this); } }
        }, get target() { return this.keyEventTarget; },/**
     * @type {!Object}
     */keyBindings: { 'enter:keydown': '_onEnterKeydown', 'space:keydown': '_onSpaceKeydown', 'space:keyup': '_onSpaceKeyup' },/** @override */attached: function attached() {// Set up a11yKeysBehavior to listen to key events on the target,
            // so that space and enter activate the ripple even if the target doesn't
            // handle key events. The key handlers deal with `noink` themselves.
            if (dom(this).parentNode.nodeType == 11) {// DOCUMENT_FRAGMENT_NODE
              this.keyEventTarget = dom(this).getOwnerRoot().host;
            } else { this.keyEventTarget = dom(this).parentNode; } var keyEventTarget =/** @type {!EventTarget} */this.keyEventTarget; this.listen(keyEventTarget, 'up', 'uiUpAction'); this.listen(keyEventTarget, 'down', 'uiDownAction');
          },/** @override */detached: function detached() { this.unlisten(this.keyEventTarget, 'up', 'uiUpAction'); this.unlisten(this.keyEventTarget, 'down', 'uiDownAction'); this.keyEventTarget = null; }, get shouldKeepAnimating() { for (var index = 0; index < this.ripples.length; ++index) { if (!this.ripples[index].isAnimationComplete) { return true; } } return false; }, simulatedRipple: function simulatedRipple() {
            this.downAction(null);// Please see polymer/polymer#1305
            this.async(function () { this.upAction(); }, 1);
          },/**
     * Provokes a ripple down effect via a UI event,
     * respecting the `noink` property.
     * @param {Event=} event
     */uiDownAction: function uiDownAction(event) { if (!this.noink) { this.downAction(event); } },/**
     * Provokes a ripple down effect via a UI event,
     * *not* respecting the `noink` property.
     * @param {Event=} event
     */downAction: function downAction(event) { if (this.holdDown && this.ripples.length > 0) { return; } var ripple = this.addRipple(); ripple.downAction(event); if (!this._animating) { this._animating = true; this.animate(); } },/**
     * Provokes a ripple up effect via a UI event,
     * respecting the `noink` property.
     * @param {Event=} event
     */uiUpAction: function uiUpAction(event) { if (!this.noink) { this.upAction(event); } },/**
     * Provokes a ripple up effect via a UI event,
     * *not* respecting the `noink` property.
     * @param {Event=} event
     */upAction: function upAction(event) { if (this.holdDown) { return; } this.ripples.forEach(function (ripple) { ripple.upAction(event); }); this._animating = true; this.animate(); }, onAnimationComplete: function onAnimationComplete() { this._animating = false; this.$.background.style.backgroundColor = ''; this.fire('transitionend'); }, addRipple: function addRipple() { var ripple = new Ripple(this); dom(this.$.waves).appendChild(ripple.waveContainer); this.$.background.style.backgroundColor = ripple.color; this.ripples.push(ripple); this._setAnimating(true); return ripple; }, removeRipple: function removeRipple(ripple) { var rippleIndex = this.ripples.indexOf(ripple); if (rippleIndex < 0) { return; } this.ripples.splice(rippleIndex, 1); ripple.remove(); if (!this.ripples.length) { this._setAnimating(false); } },/**
     * Deprecated. Please use animateRipple() instead.
     *
     * This method name conflicts with Element#animate().
     * https://developer.mozilla.org/en-US/docs/Web/API/Element/animate.
     *
     * @suppress {checkTypes}
     * @override
     */animate: function animate() { if (!this._animating) { return; } var index; var ripple; for (index = 0; index < this.ripples.length; ++index) { ripple = this.ripples[index]; ripple.draw(); this.$.background.style.opacity = ripple.outerOpacity; if (ripple.isOpacityFullyDecayed && !ripple.isRestingAtMaxRadius) { this.removeRipple(ripple); } } if (!this.shouldKeepAnimating && this.ripples.length === 0) { this.onAnimationComplete(); } else { window.requestAnimationFrame(this._boundAnimate); } },/**
     * An alias for animate() whose name does not conflict with the platform
     * Element.animate() method.
     */animateRipple: function animateRipple() { return this.animate(); }, _onEnterKeydown: function _onEnterKeydown() { this.uiDownAction(); this.async(this.uiUpAction, 1); }, _onSpaceKeydown: function _onSpaceKeydown() { this.uiDownAction(); }, _onSpaceKeyup: function _onSpaceKeyup() { this.uiUpAction(); },// note: holdDown does not respect noink since it can be a focus based
          // effect.
          _holdDownChanged: function _holdDownChanged(newVal, oldVal) { if (oldVal === undefined) { return; } if (newVal) { this.downAction(); } else { this.upAction(); } }/**
      Fired when the animation finishes.
      This is useful if you want to wait until
      the ripple animation finishes to perform some action.
       @event transitionend
      @param {{node: Object}} detail Contains the animated node.
      */}); Polymer({
            is: 'iron-iconset-svg', properties: {/**
       * The name of the iconset.
       */name: { type: String, observer: '_nameChanged' },/**
       * The size of an individual icon. Note that icons must be square.
       */size: { type: Number, value: 24 },/**
       * Set to true to enable mirroring of icons where specified when they are
       * stamped. Icons that should be mirrored should be decorated with a
       * `mirror-in-rtl` attribute.
       *
       * NOTE: For performance reasons, direction will be resolved once per
       * document per iconset, so moving icons in and out of RTL subtrees will
       * not cause their mirrored state to change.
       */rtlMirroring: { type: Boolean, value: false },/**
       * Set to true to measure RTL based on the dir attribute on the body or
       * html elements (measured on document.body or document.documentElement as
       * available).
       */useGlobalRtlAttribute: { type: Boolean, value: false }
            }, created: function created() { this._meta = new IronMeta({ type: 'iconset', key: null, value: null }); }, attached: function attached() { this.style.display = 'none'; },/**
     * Construct an array of all icon names in this iconset.
     *
     * @return {!Array} Array of icon names.
     */getIconNames: function getIconNames() { this._icons = this._createIconMap(); return Object.keys(this._icons).map(function (n) { return this.name + ':' + n; }, this); },/**
     * Applies an icon to the given element.
     *
     * An svg icon is prepended to the element's shadowRoot if it exists,
     * otherwise to the element itself.
     *
     * If RTL mirroring is enabled, and the icon is marked to be mirrored in
     * RTL, the element will be tested (once and only once ever for each
     * iconset) to determine the direction of the subtree the element is in.
     * This direction will apply to all future icon applications, although only
     * icons marked to be mirrored will be affected.
     *
     * @method applyIcon
     * @param {Element} element Element to which the icon is applied.
     * @param {string} iconName Name of the icon to apply.
     * @return {?Element} The svg element which renders the icon.
     */applyIcon: function applyIcon(element, iconName) {// Remove old svg element
              this.removeIcon(element);// install new svg element
              var svg = this._cloneIcon(iconName, this.rtlMirroring && this._targetIsRTL(element)); if (svg) {// insert svg element into shadow root, if it exists
                var pde = dom(element.root || element); pde.insertBefore(svg, pde.childNodes[0]); return element._svgIcon = svg;
              } return null;
            },/**
     * Remove an icon from the given element by undoing the changes effected
     * by `applyIcon`.
     *
     * @param {Element} element The element from which the icon is removed.
     */removeIcon: function removeIcon(element) {// Remove old svg element
              if (element._svgIcon) { dom(element.root || element).removeChild(element._svgIcon); element._svgIcon = null; }
            },/**
     * Measures and memoizes the direction of the element. Note that this
     * measurement is only done once and the result is memoized for future
     * invocations.
     */_targetIsRTL: function _targetIsRTL(target) { if (this.__targetIsRTL == null) { if (this.useGlobalRtlAttribute) { var globalElement = document.body && document.body.hasAttribute('dir') ? document.body : document.documentElement; this.__targetIsRTL = globalElement.getAttribute('dir') === 'rtl'; } else { if (target && target.nodeType !== Node.ELEMENT_NODE) { target = target.host; } this.__targetIsRTL = target && window.getComputedStyle(target)['direction'] === 'rtl'; } } return this.__targetIsRTL; },/**
     *
     * When name is changed, register iconset metadata
     *
     */_nameChanged: function _nameChanged() { this._meta.value = null; this._meta.key = this.name; this._meta.value = this; this.async(function () { this.fire('iron-iconset-added', this, { node: window }); }); },/**
     * Create a map of child SVG elements by id.
     *
     * @return {!Object} Map of id's to SVG elements.
     */_createIconMap: function _createIconMap() {// Objects chained to Object.prototype (`{}`) have members. Specifically,
              // on FF there is a `watch` method that confuses the icon map, so we
              // need to use a null-based object here.
              var icons = Object.create(null); dom(this).querySelectorAll('[id]').forEach(function (icon) { icons[icon.id] = icon; }); return icons;
            },/**
     * Produce installable clone of the SVG element matching `id` in this
     * iconset, or `undefined` if there is no matching element.
     *
     * @return {Element} Returns an installable clone of the SVG element
     * matching `id`.
     */_cloneIcon: function _cloneIcon(id, mirrorAllowed) {// create the icon map on-demand, since the iconset itself has no discrete
              // signal to know when it's children are fully parsed
              this._icons = this._icons || this._createIconMap(); return this._prepareSvgClone(this._icons[id], this.size, mirrorAllowed);
            },/**
     * @param {Element} sourceSvg
     * @param {number} size
     * @param {Boolean} mirrorAllowed
     * @return {Element}
     */_prepareSvgClone: function _prepareSvgClone(sourceSvg, size, mirrorAllowed) {
              if (sourceSvg) {
                var content = sourceSvg.cloneNode(true), svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg'), viewBox = content.getAttribute('viewBox') || '0 0 ' + size + ' ' + size, cssText = 'pointer-events: none; display: block; width: 100%; height: 100%;'; if (mirrorAllowed && content.hasAttribute('mirror-in-rtl')) { cssText += '-webkit-transform:scale(-1,1);transform:scale(-1,1);transform-origin:center;'; } svg.setAttribute('viewBox', viewBox); svg.setAttribute('preserveAspectRatio', 'xMidYMid meet'); svg.setAttribute('focusable', 'false');// TODO(dfreedm): `pointer-events: none` works around
                // https://crbug.com/370136
                // TODO(sjmiles): inline style may not be ideal, but avoids requiring a
                // shadow-root
                svg.style.cssText = cssText; svg.appendChild(content).removeAttribute('id'); return svg;
              } return null;
            }
          }); var $_documentContainer = document.createElement('template'); $_documentContainer.setAttribute('style', 'display: none;'); $_documentContainer.innerHTML = "<iron-iconset-svg name=\"paper-dropdown-menu\" size=\"24\">\n<svg><defs>\n<g id=\"arrow-drop-down\"><path d=\"M7 10l5 5 5-5z\"></path></g>\n</defs></svg>\n</iron-iconset-svg>"; document.head.appendChild($_documentContainer.content); var $_documentContainer$1 = document.createElement('template'); $_documentContainer$1.setAttribute('style', 'display: none;'); $_documentContainer$1.innerHTML = "<dom-module id=\"paper-dropdown-menu-shared-styles\">\n  <template>\n    <style>\n      :host {\n        display: inline-block;\n        position: relative;\n        text-align: left;\n\n        /* NOTE(cdata): Both values are needed, since some phones require the\n         * value to be `transparent`.\n         */\n        -webkit-tap-highlight-color: rgba(0,0,0,0);\n        -webkit-tap-highlight-color: transparent;\n\n        --paper-input-container-input: {\n          overflow: hidden;\n          white-space: nowrap;\n          text-overflow: ellipsis;\n          max-width: 100%;\n          box-sizing: border-box;\n          cursor: pointer;\n        };\n\n        @apply --paper-dropdown-menu;\n      }\n\n      /* paper-dropdown-menu and paper-dropdown-menu-light both delegate focus\n       * to other internal elements which manage focus styling. */\n      :host(:focus) {\n        outline: none;\n      }\n\n      :host(:dir(rtl)) {\n        text-align: right;\n\n        @apply(--paper-dropdown-menu);\n      }\n\n      :host([disabled]) {\n        @apply --paper-dropdown-menu-disabled;\n      }\n\n      :host([noink]) paper-ripple {\n        display: none;\n      }\n\n      :host([no-label-float]) paper-ripple {\n        top: 8px;\n      }\n\n      paper-ripple {\n        top: 12px;\n        left: 0px;\n        bottom: 8px;\n        right: 0px;\n\n        @apply --paper-dropdown-menu-ripple;\n      }\n\n      paper-menu-button {\n        display: block;\n        padding: 0;\n\n        @apply --paper-dropdown-menu-button;\n      }\n\n      paper-input {\n        @apply --paper-dropdown-menu-input;\n      }\n\n      iron-icon {\n        color: var(--disabled-text-color);\n\n        @apply --paper-dropdown-menu-icon;\n      }\n    </style>\n  </template>\n</dom-module>"; document.head.appendChild($_documentContainer$1.content); var IronButtonStateImpl = {
            properties: {/**
       * If true, the user is currently holding down the button.
       */pressed: { type: Boolean, readOnly: true, value: false, reflectToAttribute: true, observer: '_pressedChanged' },/**
       * If true, the button toggles the active state with each tap or press
       * of the spacebar.
       */toggles: { type: Boolean, value: false, reflectToAttribute: true },/**
       * If true, the button is a toggle and is currently in the active state.
       */active: { type: Boolean, value: false, notify: true, reflectToAttribute: true },/**
       * True if the element is currently being pressed by a "pointer," which
       * is loosely defined as mouse or touch input (but specifically excluding
       * keyboard input).
       */pointerDown: { type: Boolean, readOnly: true, value: false },/**
       * True if the input device that caused the element to receive focus
       * was a keyboard.
       */receivedFocusFromKeyboard: { type: Boolean, readOnly: true },/**
       * The aria attribute to be set if the button is a toggle and in the
       * active state.
       */ariaActiveAttribute: { type: String, value: 'aria-pressed', observer: '_ariaActiveAttributeChanged' }
            }, listeners: { down: '_downHandler', up: '_upHandler', tap: '_tapHandler' }, observers: ['_focusChanged(focused)', '_activeChanged(active, ariaActiveAttribute)'],/**
     * @type {!Object}
     */keyBindings: { 'enter:keydown': '_asyncClick', 'space:keydown': '_spaceKeyDownHandler', 'space:keyup': '_spaceKeyUpHandler' }, _mouseEventRe: /^mouse/, _tapHandler: function _tapHandler() {
              if (this.toggles) {// a tap is needed to toggle the active state
                this._userActivate(!this.active);
              } else { this.active = false; }
            }, _focusChanged: function _focusChanged(focused) { this._detectKeyboardFocus(focused); if (!focused) { this._setPressed(false); } }, _detectKeyboardFocus: function _detectKeyboardFocus(focused) { this._setReceivedFocusFromKeyboard(!this.pointerDown && focused); },// to emulate native checkbox, (de-)activations from a user interaction fire
            // 'change' events
            _userActivate: function _userActivate(active) { if (this.active !== active) { this.active = active; this.fire('change'); } }, _downHandler: function _downHandler(event) { this._setPointerDown(true); this._setPressed(true); this._setReceivedFocusFromKeyboard(false); }, _upHandler: function _upHandler() { this._setPointerDown(false); this._setPressed(false); },/**
     * @param {!KeyboardEvent} event .
     */_spaceKeyDownHandler: function _spaceKeyDownHandler(event) {
              var keyboardEvent = event.detail.keyboardEvent; var target = dom(keyboardEvent).localTarget;// Ignore the event if this is coming from a focused light child, since that
              // element will deal with it.
              if (this.isLightDescendant(/** @type {Node} */target)) return; keyboardEvent.preventDefault(); keyboardEvent.stopImmediatePropagation(); this._setPressed(true);
            },/**
     * @param {!KeyboardEvent} event .
     */_spaceKeyUpHandler: function _spaceKeyUpHandler(event) {
              var keyboardEvent = event.detail.keyboardEvent; var target = dom(keyboardEvent).localTarget;// Ignore the event if this is coming from a focused light child, since that
              // element will deal with it.
              if (this.isLightDescendant(/** @type {Node} */target)) return; if (this.pressed) { this._asyncClick(); } this._setPressed(false);
            },// trigger click asynchronously, the asynchrony is useful to allow one
            // event handler to unwind before triggering another event
            _asyncClick: function _asyncClick() { this.async(function () { this.click(); }, 1); },// any of these changes are considered a change to button state
            _pressedChanged: function _pressedChanged(pressed) { this._changedButtonState(); }, _ariaActiveAttributeChanged: function _ariaActiveAttributeChanged(value, oldValue) { if (oldValue && oldValue != value && this.hasAttribute(oldValue)) { this.removeAttribute(oldValue); } }, _activeChanged: function _activeChanged(active, ariaActiveAttribute) { if (this.toggles) { this.setAttribute(this.ariaActiveAttribute, active ? 'true' : 'false'); } else { this.removeAttribute(this.ariaActiveAttribute); } this._changedButtonState(); }, _controlStateChanged: function _controlStateChanged() { if (this.disabled) { this._setPressed(false); } else { this._changedButtonState(); } },// provide hook for follow-on behaviors to react to button-state
            _changedButtonState: function _changedButtonState() {
              if (this._buttonStateChanged) {
                this._buttonStateChanged();// abstract
              }
            }
          };/** @polymerBehavior */var IronButtonState = [IronA11yKeysBehavior, IronButtonStateImpl];// with the `Polymer` function, so this is only a cache lookup.
        // https://github.com/Polymer/polymer/blob/640bc80ac7177b761d46b2fa9c455c318f2b85c6/lib/legacy/class.js#L533-L534
        var LegacyPolymerElementBase = LegacyElementMixin(HTMLElement);/**
                                                                    Material design: [Dropdown
                                                                    menus](https://www.google.com/design/spec/components/buttons.html#buttons-dropdown-buttons)
                                                                    
                                                                    `paper-dropdown-menu` is similar to a native browser select element.
                                                                    `paper-dropdown-menu` works with selectable content. The currently selected
                                                                    item is displayed in the control. If no item is selected, the `label` is
                                                                    displayed instead.
                                                                    
                                                                    Example:
                                                                    
                                                                        <paper-dropdown-menu label="Your favourite pastry">
                                                                          <paper-listbox slot="dropdown-content">
                                                                            <paper-item>Croissant</paper-item>
                                                                            <paper-item>Donut</paper-item>
                                                                            <paper-item>Financier</paper-item>
                                                                            <paper-item>Madeleine</paper-item>
                                                                          </paper-listbox>
                                                                        </paper-dropdown-menu>
                                                                    
                                                                    This example renders a dropdown menu with 4 options.
                                                                    
                                                                    The child element with the slot `dropdown-content` is used as the dropdown
                                                                    menu. This can be a [`paper-listbox`](paper-listbox), or any other or
                                                                    element that acts like an [`iron-selector`](iron-selector).
                                                                    
                                                                    Specifically, the menu child must fire an
                                                                    [`iron-select`](iron-selector#event-iron-select) event when one of its
                                                                    children is selected, and an
                                                                    [`iron-deselect`](iron-selector#event-iron-deselect) event when a child is
                                                                    deselected. The selected or deselected item must be passed as the event's
                                                                    `detail.item` property.
                                                                    
                                                                    Applications can listen for the `iron-select` and `iron-deselect` events
                                                                    to react when options are selected and deselected.
                                                                    
                                                                    ### Styling
                                                                    
                                                                    The following custom properties and mixins are also available for styling:
                                                                    
                                                                    Custom property | Description | Default
                                                                    ----------------|-------------|----------
                                                                    `--paper-dropdown-menu` | A mixin that is applied to the element host | `{}`
                                                                    `--paper-dropdown-menu-disabled` | A mixin that is applied to the element host when disabled | `{}`
                                                                    `--paper-dropdown-menu-ripple` | A mixin that is applied to the internal ripple | `{}`
                                                                    `--paper-dropdown-menu-button` | A mixin that is applied to the internal menu button | `{}`
                                                                    `--paper-dropdown-menu-input` | A mixin that is applied to the internal paper input | `{}`
                                                                    `--paper-dropdown-menu-icon` | A mixin that is applied to the internal icon | `{}`
                                                                    
                                                                    You can also use any of the `paper-input-container` and `paper-menu-button`
                                                                    style mixins and custom properties to style the internal input and menu button
                                                                    respectively.
                                                                    
                                                                    @element paper-dropdown-menu
                                                                    @demo demo/index.html
                                                                    */Polymer({/** @override */_template: html(_templateObject22_e13d1b4010eb11ec83cd7fddb4847b33()), is: 'paper-dropdown-menu', behaviors: [IronButtonState, IronControlState, IronFormElementBehavior, IronValidatableBehavior], properties: {/**
       * The derived "label" of the currently selected item. This value
       * is the `label` property on the selected item if set, or else the
       * trimmed text content of the selected item.
       */selectedItemLabel: { type: String, notify: true, readOnly: true },/**
       * The last selected item. An item is selected if the dropdown menu has
       * a child with slot `dropdown-content`, and that child triggers an
       * `iron-select` event with the selected `item` in the `detail`.
       *
       * @type {?Object}
       */selectedItem: { type: Object, notify: true, readOnly: true },/**
       * The value for this element that will be used when submitting in
       * a form. It reflects the value of `selectedItemLabel`. If set directly,
       * it will not update the `selectedItemLabel` value.
       */value: { type: String, notify: true },/**
       * The label for the dropdown.
       */label: { type: String },/**
       * The placeholder for the dropdown.
       */placeholder: { type: String },/**
       * The error message to display when invalid.
       */errorMessage: { type: String },/**
       * True if the dropdown is open. Otherwise, false.
       */opened: { type: Boolean, notify: true, value: false, observer: '_openedChanged' },/**
       * By default, the dropdown will constrain scrolling on the page
       * to itself when opened.
       * Set to true in order to prevent scroll from being constrained
       * to the dropdown when it opens.
       */allowOutsideScroll: { type: Boolean, value: false },/**
       * Set to true to disable the floating label. Bind this to the
       * `<paper-input-container>`'s `noLabelFloat` property.
       */noLabelFloat: { type: Boolean, value: false, reflectToAttribute: true },/**
       * Set to true to always float the label. Bind this to the
       * `<paper-input-container>`'s `alwaysFloatLabel` property.
       */alwaysFloatLabel: { type: Boolean, value: false },/**
       * Set to true to disable animations when opening and closing the
       * dropdown.
       */noAnimations: { type: Boolean, value: false },/**
       * The orientation against which to align the menu dropdown
       * horizontally relative to the dropdown trigger.
       */horizontalAlign: { type: String, value: 'right' },/**
       * The orientation against which to align the menu dropdown
       * vertically relative to the dropdown trigger.
       */verticalAlign: { type: String, value: 'top' },/**
       * Overrides the vertical offset computed in
       * _computeMenuVerticalOffset.
       */verticalOffset: Number,/**
       * If true, the `horizontalAlign` and `verticalAlign` properties will
       * be considered preferences instead of strict requirements when
       * positioning the dropdown and may be changed if doing so reduces
       * the area of the dropdown falling outside of `fitInto`.
       */dynamicAlign: { type: Boolean },/**
       * Whether focus should be restored to the dropdown when the menu closes.
       */restoreFocusOnClose: { type: Boolean, value: true }
        }, listeners: { 'tap': '_onTap' },/**
     * @type {!Object}
     */keyBindings: { 'up down': 'open', 'esc': 'close' }, observers: ['_selectedItemChanged(selectedItem)'],/**
     * Override `_attachDom` so that we can pass `delegatesFocus`. The overridden
     * implementation of `_attachDom` specifically skips the steps performed here
     * if the node already hosts a shadow root:
     * https://github.com/Polymer/polymer/blob/640bc80ac7177b761d46b2fa9c455c318f2b85c6/lib/mixins/element-mixin.js#L691-L694
     * @override
     */_attachDom: function _attachDom(dom) { var wrappedThis = wrap(this); wrappedThis.attachShadow({ mode: 'open', delegatesFocus: true, shadyUpgradeFragment: dom }); wrappedThis.shadowRoot.appendChild(dom); return LegacyPolymerElementBase.prototype._attachDom.call(this, dom); },/** @override */focus: function focus() {// When using Shady DOM and in browsers that don't support
            // `delegatesFocus`, attempting to focus this element with the browser's
            // native `HTMLElement#focus` will cause focus to be lost because this
            // element isn't focusable in those situations. To work around this, the
            // element in the shadow root that this element intends to delegate focus
            // to is manually focused instead.
            this.$.input._focusableElement.focus();
          },/** @override */attached: function attached() {// NOTE(cdata): Due to timing, a preselected value in a `IronSelectable`
            // child will cause an `iron-select` event to fire while the element is
            // still in a `DocumentFragment`. This has the effect of causing
            // handlers not to fire. So, we double check this value on attached:
            var contentElement = this.contentElement; if (contentElement && contentElement.selectedItem) { this._setSelectedItem(contentElement.selectedItem); }
          },/**
     * The content element that is contained by the dropdown menu, if any.
     */get contentElement() {// Polymer 2.x returns slot.assignedNodes which can contain text nodes.
            var nodes = dom(this.$.content).getDistributedNodes(); for (var i = 0, l = nodes.length; i < l; i++) { if (nodes[i].nodeType === Node.ELEMENT_NODE) { return nodes[i]; } }
          },/**
     * Show the dropdown content.
     */open: function open() { this.$.menuButton.open(); },/**
     * Hide the dropdown content.
     */close: function close() { this.$.menuButton.close(); },/**
     * A handler that is called when `iron-select` is fired.
     *
     * @param {CustomEvent} event An `iron-select` event.
     */_onIronSelect: function _onIronSelect(event) { this._setSelectedItem(event.detail.item); },/**
     * A handler that is called when `iron-deselect` is fired.
     *
     * @param {CustomEvent} event An `iron-deselect` event.
     */_onIronDeselect: function _onIronDeselect(event) { this._setSelectedItem(null); },/**
     * A handler that is called when the dropdown is tapped.
     *
     * @param {CustomEvent} event A tap event.
     */_onTap: function _onTap(event) { if (findOriginalTarget(event) === this) { this.open(); } },/**
     * Compute the label for the dropdown given a selected item.
     *
     * @param {Element} selectedItem A selected Element item, with an
     * optional `label` property.
     */_selectedItemChanged: function _selectedItemChanged(selectedItem) { var value = ''; if (!selectedItem) { value = ''; } else { value = selectedItem.label || selectedItem.getAttribute('label') || selectedItem.textContent.trim(); } this.value = value; this._setSelectedItemLabel(value); },/**
     * Compute the vertical offset of the menu based on the value of
     * `noLabelFloat`.
     *
     * @param {boolean} noLabelFloat True if the label should not float
     * @param {number=} opt_verticalOffset Optional offset from the user
     * above the input, otherwise false.
     */_computeMenuVerticalOffset: function _computeMenuVerticalOffset(noLabelFloat, opt_verticalOffset) {// Override offset if it's passed from the user.
            if (opt_verticalOffset) { return opt_verticalOffset; }// NOTE(cdata): These numbers are somewhat magical because they are
            // derived from the metrics of elements internal to `paper-input`'s
            // template. The metrics will change depending on whether or not the
            // input has a floating label.
            return noLabelFloat ? -4 : 8;
          },/**
     * Returns false if the element is required and does not have a selection,
     * and true otherwise.
     * @param {*=} _value Ignored.
     * @return {boolean} true if `required` is false, or if `required` is true
     * and the element has a valid selection.
     */_getValidity: function _getValidity(_value) { return this.disabled || !this.required || this.required && !!this.value; }, _openedChanged: function _openedChanged() { var openState = this.opened ? 'true' : 'false'; var e = this.contentElement; if (e) { e.setAttribute('aria-expanded', openState); } }
        }); var $_documentContainer$2 = document.createElement('template'); $_documentContainer$2.setAttribute('style', 'display: none;'); $_documentContainer$2.innerHTML = "<dom-module id=\"paper-item-shared-styles\">\n  <template>\n    <style>\n      :host, .paper-item {\n        display: block;\n        position: relative;\n        min-height: var(--paper-item-min-height, 48px);\n        padding: 0px 16px;\n      }\n\n      .paper-item {\n        @apply --paper-font-subhead;\n        border:none;\n        outline: none;\n        background: white;\n        width: 100%;\n        text-align: left;\n      }\n\n      :host([hidden]), .paper-item[hidden] {\n        display: none !important;\n      }\n\n      :host(.iron-selected), .paper-item.iron-selected {\n        font-weight: var(--paper-item-selected-weight, bold);\n\n        @apply --paper-item-selected;\n      }\n\n      :host([disabled]), .paper-item[disabled] {\n        color: var(--paper-item-disabled-color, var(--disabled-text-color));\n\n        @apply --paper-item-disabled;\n      }\n\n      :host(:focus), .paper-item:focus {\n        position: relative;\n        outline: 0;\n\n        @apply --paper-item-focused;\n      }\n\n      :host(:focus):before, .paper-item:focus:before {\n        @apply --layout-fit;\n\n        background: currentColor;\n        content: '';\n        opacity: var(--dark-divider-opacity);\n        pointer-events: none;\n\n        @apply --paper-item-focused-before;\n      }\n    </style>\n  </template>\n</dom-module>"; document.head.appendChild($_documentContainer$2.content); var PaperItemBehaviorImpl = { hostAttributes: { role: 'option', tabindex: '0' } };/** @polymerBehavior */var PaperItemBehavior = [IronButtonState, IronControlState, PaperItemBehaviorImpl]; Polymer({ _template: html(_templateObject23_e13d1b4010eb11ec83cd7fddb4847b33()), is: 'paper-item', behaviors: [PaperItemBehavior] }); var PaperRippleBehavior = {
          properties: {/**
       * If true, the element will not produce a ripple effect when interacted
       * with via the pointer.
       */noink: { type: Boolean, observer: '_noinkChanged' },/**
       * @type {Element|undefined}
       */_rippleContainer: { type: Object }
          },/**
     * Ensures a `<paper-ripple>` element is available when the element is
     * focused.
     */_buttonStateChanged: function _buttonStateChanged() { if (this.focused) { this.ensureRipple(); } },/**
     * In addition to the functionality provided in `IronButtonState`, ensures
     * a ripple effect is created when the element is in a `pressed` state.
     */_downHandler: function _downHandler(event) { IronButtonStateImpl._downHandler.call(this, event); if (this.pressed) { this.ensureRipple(event); } },/**
     * Ensures this element contains a ripple effect. For startup efficiency
     * the ripple effect is dynamically on demand when needed.
     * @param {!Event=} optTriggeringEvent (optional) event that triggered the
     * ripple.
     */ensureRipple: function ensureRipple(optTriggeringEvent) {
            if (!this.hasRipple()) {
              this._ripple = this._createRipple(); this._ripple.noink = this.noink; var rippleContainer = this._rippleContainer || this.root; if (rippleContainer) { dom(rippleContainer).appendChild(this._ripple); } if (optTriggeringEvent) {// Check if the event happened inside of the ripple container
                // Fall back to host instead of the root because distributed text
                // nodes are not valid event targets
                var domContainer = dom(this._rippleContainer || this); var target = dom(optTriggeringEvent).rootTarget; if (domContainer.deepContains(/** @type {Node} */target)) { this._ripple.uiDownAction(optTriggeringEvent); }
              }
            }
          },/**
     * Returns the `<paper-ripple>` element used by this element to create
     * ripple effects. The element's ripple is created on demand, when
     * necessary, and calling this method will force the
     * ripple to be created.
     */getRipple: function getRipple() { this.ensureRipple(); return this._ripple; },/**
     * Returns true if this element currently contains a ripple effect.
     * @return {boolean}
     */hasRipple: function hasRipple() { return Boolean(this._ripple); },/**
     * Create the element's ripple effect via creating a `<paper-ripple>`.
     * Override this method to customize the ripple element.
     * @return {!PaperRippleElement} Returns a `<paper-ripple>` element.
     */_createRipple: function _createRipple() { var element =/** @type {!PaperRippleElement} */document.createElement('paper-ripple'); return element; }, _noinkChanged: function _noinkChanged(noink) { if (this.hasRipple()) { this._ripple.noink = noink; } }
        }; var PaperInkyFocusBehaviorImpl = { observers: ['_focusedChanged(receivedFocusFromKeyboard)'], _focusedChanged: function _focusedChanged(receivedFocusFromKeyboard) { if (receivedFocusFromKeyboard) { this.ensureRipple(); } if (this.hasRipple()) { this._ripple.holdDown = receivedFocusFromKeyboard; } }, _createRipple: function _createRipple() { var ripple = PaperRippleBehavior._createRipple(); ripple.id = 'ink'; ripple.setAttribute('center', ''); ripple.classList.add('circle'); return ripple; } };/** @polymerBehavior */var PaperInkyFocusBehavior = [IronButtonState, IronControlState, PaperRippleBehavior, PaperInkyFocusBehaviorImpl]; Polymer({
          is: 'paper-icon-button', _template: html(_templateObject24_e13d1b4010eb11ec83cd7fddb4847b33()), hostAttributes: { role: 'button', tabindex: '0' }, behaviors: [PaperInkyFocusBehavior], registered: function registered() { this._template.setAttribute('strip-whitespace', ''); }, properties: {/**
       * The URL of an image for the icon. If the src property is specified,
       * the icon property should not be.
       */src: { type: String },/**
       * Specifies the icon name or index in the set of icons available in
       * the icon's icon set. If the icon property is specified,
       * the src property should not be.
       */icon: { type: String },/**
       * Specifies the alternate text for the button, for accessibility.
       */alt: { type: String, observer: '_altChanged' }
          }, _altChanged: function _altChanged(newValue, oldValue) {
            var label = this.getAttribute('aria-label');// Don't stomp over a user-set aria-label.
            if (!label || oldValue == label) { this.setAttribute('aria-label', newValue); }
          }
        }); var IronSelection =/*#__PURE__*/function () {/**
     * @param {!Function} selectCallback
     * @suppress {missingProvide}
     */function IronSelection(selectCallback) { babelHelpers.classCallCheck(this, IronSelection); this.selection = []; this.selectCallback = selectCallback; }/**
       * Retrieves the selected item(s).
       *
       * @returns Returns the selected item(s). If the multi property is true,
       * `get` will return an array, otherwise it will return
       * the selected item or undefined if there is no selection.
       */babelHelpers.createClass(IronSelection, [{
          key: "get", value: function get() { return this.multi ? this.selection.slice() : this.selection[0]; }/**
       * Clears all the selection except the ones indicated.
       *
       * @param {Array} excludes items to be excluded.
       */}, {
          key: "clear", value: function clear(excludes) { this.selection.slice().forEach(function (item) { if (!excludes || excludes.indexOf(item) < 0) { this.setItemSelected(item, false); } }, this); }/**
       * Indicates if a given item is selected.
       *
       * @param {*} item The item whose selection state should be checked.
       * @return {boolean} Returns true if `item` is selected.
       */}, {
          key: "isSelected", value: function isSelected(item) { return this.selection.indexOf(item) >= 0; }/**
       * Sets the selection state for a given item to either selected or deselected.
       *
       * @param {*} item The item to select.
       * @param {boolean} isSelected True for selected, false for deselected.
       */}, {
          key: "setItemSelected", value: function setItemSelected(item, isSelected) {
            if (item != null) {
              if (isSelected !== this.isSelected(item)) {// proceed to update selection only if requested state differs from
                // current
                if (isSelected) { this.selection.push(item); } else { var i = this.selection.indexOf(item); if (i >= 0) { this.selection.splice(i, 1); } } if (this.selectCallback) { this.selectCallback(item, isSelected); }
              }
            }
          }/**
       * Sets the selection state for a given item. If the `multi` property
       * is true, then the selected state of `item` will be toggled; otherwise
       * the `item` will be selected.
       *
       * @param {*} item The item to select.
       */}, {
          key: "select", value: function select(item) { if (this.multi) { this.toggle(item); } else if (this.get() !== item) { this.setItemSelected(this.get(), false); this.setItemSelected(item, true); } }/**
       * Toggles the selection state for `item`.
       *
       * @param {*} item The item to toggle.
       */}, { key: "toggle", value: function toggle(item) { this.setItemSelected(item, !this.isSelected(item)); } }]); return IronSelection;
        }();; var IronSelectableBehavior = {/**
     * Fired when iron-selector is activated (selected or deselected).
     * It is fired before the selected items are changed.
     * Cancel the event to abort selection.
     *
     * @event iron-activate
     */ /**
         * Fired when an item is selected
         *
         * @event iron-select
         */ /**
             * Fired when an item is deselected
             *
             * @event iron-deselect
             */ /**
                 * Fired when the list of selectable items changes (e.g., items are
                 * added or removed). The detail of the event is a mutation record that
                 * describes what changed.
                 *
                 * @event iron-items-changed
                 */properties: {/**
       * If you want to use an attribute value or property of an element for
       * `selected` instead of the index, set this to the name of the attribute
       * or property. Hyphenated values are converted to camel case when used to
       * look up the property of a selectable element. Camel cased values are
       * *not* converted to hyphenated values for attribute lookup. It's
       * recommended that you provide the hyphenated form of the name so that
       * selection works in both cases. (Use `attr-or-property-name` instead of
       * `attrOrPropertyName`.)
       */attrForSelected: { type: String, value: null },/**
       * Gets or sets the selected element. The default is to use the index of the
       * item.
       * @type {string|number}
       */selected: { type: String, notify: true },/**
       * Returns the currently selected item.
       *
       * @type {?Object}
       */selectedItem: { type: Object, readOnly: true, notify: true },/**
       * The event that fires from items when they are selected. Selectable
       * will listen for this event from items and update the selection state.
       * Set to empty string to listen to no events.
       */activateEvent: { type: String, value: 'tap', observer: '_activateEventChanged' },/**
       * This is a CSS selector string.  If this is set, only items that match the
       * CSS selector are selectable.
       */selectable: String,/**
       * The class to set on elements when selected.
       */selectedClass: { type: String, value: 'iron-selected' },/**
       * The attribute to set on elements when selected.
       */selectedAttribute: { type: String, value: null },/**
       * Default fallback if the selection based on selected with
       * `attrForSelected` is not found.
       */fallbackSelection: { type: String, value: null },/**
       * The list of items from which a selection can be made.
       */items: { type: Array, readOnly: true, notify: true, value: function value() { return []; } },/**
       * The set of excluded elements where the key is the `localName`
       * of the element that will be ignored from the item list.
       *
       * @default {template: 1}
       */_excludedLocalNames: { type: Object, value: function value() { return { 'template': 1, 'dom-bind': 1, 'dom-if': 1, 'dom-repeat': 1 }; } }
          }, observers: ['_updateAttrForSelected(attrForSelected)', '_updateSelected(selected)', '_checkFallback(fallbackSelection)'], created: function created() { this._bindFilterItem = this._filterItem.bind(this); this._selection = new IronSelection(this._applySelection.bind(this)); }, attached: function attached() { this._observer = this._observeItems(this); this._addListener(this.activateEvent); }, detached: function detached() { if (this._observer) { dom(this).unobserveNodes(this._observer); } this._removeListener(this.activateEvent); },/**
     * Returns the index of the given item.
     *
     * @method indexOf
     * @param {Object} item
     * @returns Returns the index of the item
     */indexOf: function indexOf(item) { return this.items ? this.items.indexOf(item) : -1; },/**
     * Selects the given value.
     *
     * @method select
     * @param {string|number} value the value to select.
     */select: function select(value) { this.selected = value; },/**
     * Selects the previous item.
     *
     * @method selectPrevious
     */selectPrevious: function selectPrevious() { var length = this.items.length; var index = length - 1; if (this.selected !== undefined) { index = (Number(this._valueToIndex(this.selected)) - 1 + length) % length; } this.selected = this._indexToValue(index); },/**
     * Selects the next item.
     *
     * @method selectNext
     */selectNext: function selectNext() { var index = 0; if (this.selected !== undefined) { index = (Number(this._valueToIndex(this.selected)) + 1) % this.items.length; } this.selected = this._indexToValue(index); },/**
     * Selects the item at the given index.
     *
     * @method selectIndex
     */selectIndex: function selectIndex(index) { this.select(this._indexToValue(index)); },/**
     * Force a synchronous update of the `items` property.
     *
     * NOTE: Consider listening for the `iron-items-changed` event to respond to
     * updates to the set of selectable items after updates to the DOM list and
     * selection state have been made.
     *
     * WARNING: If you are using this method, you should probably consider an
     * alternate approach. Synchronously querying for items is potentially
     * slow for many use cases. The `items` property will update asynchronously
     * on its own to reflect selectable items in the DOM.
     */forceSynchronousItemUpdate: function forceSynchronousItemUpdate() {
            if (this._observer && typeof this._observer.flush === 'function') {// NOTE(bicknellr): `dom.flush` above is no longer sufficient to trigger
              // `observeNodes` callbacks. Polymer 2.x returns an object from
              // `observeNodes` with a `flush` that synchronously gives the callback any
              // pending MutationRecords (retrieved with `takeRecords`). Any case where
              // ShadyDOM flushes were expected to synchronously trigger item updates
              // will now require calling `forceSynchronousItemUpdate`.
              this._observer.flush();
            } else { this._updateItems(); }
          },// UNUSED, FOR API COMPATIBILITY
          get _shouldUpdateSelection() { return this.selected != null; }, _checkFallback: function _checkFallback() { this._updateSelected(); }, _addListener: function _addListener(eventName) { this.listen(this, eventName, '_activateHandler'); }, _removeListener: function _removeListener(eventName) { this.unlisten(this, eventName, '_activateHandler'); }, _activateEventChanged: function _activateEventChanged(eventName, old) { this._removeListener(old); this._addListener(eventName); }, _updateItems: function _updateItems() { var nodes = dom(this).queryDistributedElements(this.selectable || '*'); nodes = Array.prototype.filter.call(nodes, this._bindFilterItem); this._setItems(nodes); }, _updateAttrForSelected: function _updateAttrForSelected() { if (this.selectedItem) { this.selected = this._valueForItem(this.selectedItem); } }, _updateSelected: function _updateSelected() { this._selectSelected(this.selected); }, _selectSelected: function _selectSelected(selected) {
            if (!this.items) { return; } var item = this._valueToItem(this.selected); if (item) { this._selection.select(item); } else { this._selection.clear(); }// Check for items, since this array is populated only when attached
            // Since Number(0) is falsy, explicitly check for undefined
            if (this.fallbackSelection && this.items.length && this._selection.get() === undefined) { this.selected = this.fallbackSelection; }
          }, _filterItem: function _filterItem(node) { return !this._excludedLocalNames[node.localName]; }, _valueToItem: function _valueToItem(value) { return value == null ? null : this.items[this._valueToIndex(value)]; }, _valueToIndex: function _valueToIndex(value) { if (this.attrForSelected) { for (var i = 0, item; item = this.items[i]; i++) { if (this._valueForItem(item) == value) { return i; } } } else { return Number(value); } }, _indexToValue: function _indexToValue(index) { if (this.attrForSelected) { var item = this.items[index]; if (item) { return this._valueForItem(item); } } else { return index; } }, _valueForItem: function _valueForItem(item) { if (!item) { return null; } if (!this.attrForSelected) { var i = this.indexOf(item); return i === -1 ? null : i; } var propValue = item[dashToCamelCase(this.attrForSelected)]; return propValue != undefined ? propValue : item.getAttribute(this.attrForSelected); }, _applySelection: function _applySelection(item, isSelected) { if (this.selectedClass) { this.toggleClass(this.selectedClass, isSelected, item); } if (this.selectedAttribute) { this.toggleAttribute(this.selectedAttribute, isSelected, item); } this._selectionChange(); this.fire('iron-' + (isSelected ? 'select' : 'deselect'), { item: item }); }, _selectionChange: function _selectionChange() { this._setSelectedItem(this._selection.get()); },// observe items change under the given node.
          _observeItems: function _observeItems(node) {
            return dom(node).observeNodes(function (mutation) {
              this._updateItems(); this._updateSelected();// Let other interested parties know about the change so that
              // we don't have to recreate mutation observers everywhere.
              this.fire('iron-items-changed', mutation, { bubbles: false, cancelable: false });
            });
          }, _activateHandler: function _activateHandler(e) { var t = e.target; var items = this.items; while (t && t != this) { var i = items.indexOf(t); if (i >= 0) { var value = this._indexToValue(i); this._itemActivate(value, t); return; } t = t.parentNode; } }, _itemActivate: function _itemActivate(value, item) { if (!this.fire('iron-activate', { selected: value, item: item }, { cancelable: true }).defaultPrevented) { this.select(value); } }
        }; var IronMultiSelectableBehaviorImpl = {
          properties: {/**
       * If true, multiple selections are allowed.
       */multi: { type: Boolean, value: false, observer: 'multiChanged' },/**
       * Gets or sets the selected elements. This is used instead of `selected`
       * when `multi` is true.
       */selectedValues: { type: Array, notify: true, value: function value() { return []; } },/**
       * Returns an array of currently selected items.
       */selectedItems: { type: Array, readOnly: true, notify: true, value: function value() { return []; } }
          }, observers: ['_updateSelected(selectedValues.splices)'],/**
     * Selects the given value. If the `multi` property is true, then the selected
     * state of the `value` will be toggled; otherwise the `value` will be
     * selected.
     *
     * @method select
     * @param {string|number} value the value to select.
     */select: function select(value) { if (this.multi) { this._toggleSelected(value); } else { this.selected = value; } }, multiChanged: function multiChanged(multi) { this._selection.multi = multi; this._updateSelected(); },// UNUSED, FOR API COMPATIBILITY
          get _shouldUpdateSelection() { return this.selected != null || this.selectedValues != null && this.selectedValues.length; }, _updateAttrForSelected: function _updateAttrForSelected() { if (!this.multi) { IronSelectableBehavior._updateAttrForSelected.apply(this); } else if (this.selectedItems && this.selectedItems.length > 0) { this.selectedValues = this.selectedItems.map(function (selectedItem) { return this._indexToValue(this.indexOf(selectedItem)); }, this).filter(function (unfilteredValue) { return unfilteredValue != null; }, this); } }, _updateSelected: function _updateSelected() { if (this.multi) { this._selectMulti(this.selectedValues); } else { this._selectSelected(this.selected); } }, _selectMulti: function _selectMulti(values) {
            values = values || []; var selectedItems = (this._valuesToItems(values) || []).filter(function (item) { return item !== null && item !== undefined; });// clear all but the current selected items
            this._selection.clear(selectedItems);// select only those not selected yet
            for (var i = 0; i < selectedItems.length; i++) { this._selection.setItemSelected(selectedItems[i], true); }// Check for items, since this array is populated only when attached
            if (this.fallbackSelection && !this._selection.get().length) { var fallback = this._valueToItem(this.fallbackSelection); if (fallback) { this.select(this.fallbackSelection); } }
          }, _selectionChange: function _selectionChange() { var s = this._selection.get(); if (this.multi) { this._setSelectedItems(s); this._setSelectedItem(s.length ? s[0] : null); } else { if (s !== null && s !== undefined) { this._setSelectedItems([s]); this._setSelectedItem(s); } else { this._setSelectedItems([]); this._setSelectedItem(null); } } }, _toggleSelected: function _toggleSelected(value) { var i = this.selectedValues.indexOf(value); var unselected = i < 0; if (unselected) { this.push('selectedValues', value); } else { this.splice('selectedValues', i, 1); } }, _valuesToItems: function _valuesToItems(values) { return values == null ? null : values.map(function (value) { return this._valueToItem(value); }, this); }
        };/** @polymerBehavior */var IronMultiSelectableBehavior = [IronSelectableBehavior, IronMultiSelectableBehaviorImpl]; var IronMenuBehaviorImpl = {
          properties: {/**
       * Returns the currently focused item.
       * @type {?Object}
       */focusedItem: { observer: '_focusedItemChanged', readOnly: true, type: Object },/**
       * The attribute to use on menu items to look up the item title. Typing the
       * first letter of an item when the menu is open focuses that item. If
       * unset, `textContent` will be used.
       */attrForItemTitle: { type: String },/**
       * @type {boolean}
       */disabled: { type: Boolean, value: false, observer: '_disabledChanged' }
          },/**
     * The list of keys has been taken from
     * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/getModifierState
     * @private
     */_MODIFIER_KEYS: ['Alt', 'AltGraph', 'CapsLock', 'Control', 'Fn', 'FnLock', 'Hyper', 'Meta', 'NumLock', 'OS', 'ScrollLock', 'Shift', 'Super', 'Symbol', 'SymbolLock'],/** @private */_SEARCH_RESET_TIMEOUT_MS: 1000,/** @private */_previousTabIndex: 0, hostAttributes: { 'role': 'menu' }, observers: ['_updateMultiselectable(multi)'], listeners: { 'focus': '_onFocus', 'keydown': '_onKeydown', 'iron-items-changed': '_onIronItemsChanged' },/**
     * @type {!Object}
     */keyBindings: { 'up': '_onUpKey', 'down': '_onDownKey', 'esc': '_onEscKey', 'shift+tab:keydown': '_onShiftTabDown' }, attached: function attached() { this._resetTabindices(); },/**
     * Selects the given value. If the `multi` property is true, then the selected
     * state of the `value` will be toggled; otherwise the `value` will be
     * selected.
     *
     * @param {string|number} value the value to select.
     */select: function select(value) {// Cancel automatically focusing a default item if the menu received focus
            // through a user action selecting a particular item.
            if (this._defaultFocusAsync) { this.cancelAsync(this._defaultFocusAsync); this._defaultFocusAsync = null; } var item = this._valueToItem(value); if (item && item.hasAttribute('disabled')) return; this._setFocusedItem(item); IronMultiSelectableBehaviorImpl.select.apply(this, arguments);
          },/**
     * Resets all tabindex attributes to the appropriate value based on the
     * current selection state. The appropriate value is `0` (focusable) for
     * the default selected item, and `-1` (not keyboard focusable) for all
     * other items. Also sets the correct initial values for aria-selected
     * attribute, true for default selected item and false for others.
     */_resetTabindices: function _resetTabindices() { var firstSelectedItem = this.multi ? this.selectedItems && this.selectedItems[0] : this.selectedItem; this.items.forEach(function (item) { item.setAttribute('tabindex', item === firstSelectedItem ? '0' : '-1'); item.setAttribute('aria-selected', this._selection.isSelected(item)); }, this); },/**
     * Sets appropriate ARIA based on whether or not the menu is meant to be
     * multi-selectable.
     *
     * @param {boolean} multi True if the menu should be multi-selectable.
     */_updateMultiselectable: function _updateMultiselectable(multi) { if (multi) { this.setAttribute('aria-multiselectable', 'true'); } else { this.removeAttribute('aria-multiselectable'); } },/**
     * Given a KeyboardEvent, this method will focus the appropriate item in the
     * menu (if there is a relevant item, and it is possible to focus it).
     *
     * @param {KeyboardEvent} event A KeyboardEvent.
     */_focusWithKeyboardEvent: function _focusWithKeyboardEvent(event) {// Make sure that the key pressed is not a modifier key.
            // getModifierState is not being used, as it is not available in Safari
            // earlier than 10.0.2 (https://trac.webkit.org/changeset/206725/webkit)
            if (this._MODIFIER_KEYS.indexOf(event.key) !== -1) return; this.cancelDebouncer('_clearSearchText'); var searchText = this._searchText || ''; var key = event.key && event.key.length == 1 ? event.key : String.fromCharCode(event.keyCode); searchText += key.toLocaleLowerCase(); var searchLength = searchText.length; for (var i = 0, item; item = this.items[i]; i++) { if (item.hasAttribute('disabled')) { continue; } var attr = this.attrForItemTitle || 'textContent'; var title = (item[attr] || item.getAttribute(attr) || '').trim(); if (title.length < searchLength) { continue; } if (title.slice(0, searchLength).toLocaleLowerCase() == searchText) { this._setFocusedItem(item); break; } } this._searchText = searchText; this.debounce('_clearSearchText', this._clearSearchText, this._SEARCH_RESET_TIMEOUT_MS);
          }, _clearSearchText: function _clearSearchText() { this._searchText = ''; },/**
     * Focuses the previous item (relative to the currently focused item) in the
     * menu, disabled items will be skipped.
     * Loop until length + 1 to handle case of single item in menu.
     */_focusPrevious: function _focusPrevious() {
            var length = this.items.length; var curFocusIndex = Number(this.indexOf(this.focusedItem)); for (var i = 1; i < length + 1; i++) {
              var item = this.items[(curFocusIndex - i + length) % length]; if (!item.hasAttribute('disabled')) {
                var owner = dom(item).getOwnerRoot() || document; this._setFocusedItem(item);// Focus might not have worked, if the element was hidden or not
                // focusable. In that case, try again.
                if (dom(owner).activeElement == item) { return; }
              }
            }
          },/**
     * Focuses the next item (relative to the currently focused item) in the
     * menu, disabled items will be skipped.
     * Loop until length + 1 to handle case of single item in menu.
     */_focusNext: function _focusNext() {
            var length = this.items.length; var curFocusIndex = Number(this.indexOf(this.focusedItem)); for (var i = 1; i < length + 1; i++) {
              var item = this.items[(curFocusIndex + i) % length]; if (!item.hasAttribute('disabled')) {
                var owner = dom(item).getOwnerRoot() || document; this._setFocusedItem(item);// Focus might not have worked, if the element was hidden or not
                // focusable. In that case, try again.
                if (dom(owner).activeElement == item) { return; }
              }
            }
          },/**
     * Mutates items in the menu based on provided selection details, so that
     * all items correctly reflect selection state.
     *
     * @param {Element} item An item in the menu.
     * @param {boolean} isSelected True if the item should be shown in a
     * selected state, otherwise false.
     */_applySelection: function _applySelection(item, isSelected) { if (isSelected) { item.setAttribute('aria-selected', 'true'); } else { item.setAttribute('aria-selected', 'false'); } IronSelectableBehavior._applySelection.apply(this, arguments); },/**
     * Discretely updates tabindex values among menu items as the focused item
     * changes.
     *
     * @param {Element} focusedItem The element that is currently focused.
     * @param {?Element} old The last element that was considered focused, if
     * applicable.
     */_focusedItemChanged: function _focusedItemChanged(focusedItem, old) { old && old.setAttribute('tabindex', '-1'); if (focusedItem && !focusedItem.hasAttribute('disabled') && !this.disabled) { focusedItem.setAttribute('tabindex', '0'); focusedItem.focus(); } },/**
     * A handler that responds to mutation changes related to the list of items
     * in the menu.
     *
     * @param {CustomEvent} event An event containing mutation records as its
     * detail.
     */_onIronItemsChanged: function _onIronItemsChanged(event) { if (event.detail.addedNodes.length) { this._resetTabindices(); } },/**
     * Handler that is called when a shift+tab keypress is detected by the menu.
     *
     * @param {CustomEvent} event A key combination event.
     */_onShiftTabDown: function _onShiftTabDown(event) {
            var oldTabIndex = this.getAttribute('tabindex'); IronMenuBehaviorImpl._shiftTabPressed = true; this._setFocusedItem(null); this.setAttribute('tabindex', '-1'); this.async(function () {
              this.setAttribute('tabindex', oldTabIndex); IronMenuBehaviorImpl._shiftTabPressed = false;// NOTE(cdata): polymer/polymer#1305
            }, 1);
          },/**
     * Handler that is called when the menu receives focus.
     *
     * @param {FocusEvent} event A focus event.
     */_onFocus: function _onFocus(event) {
            if (IronMenuBehaviorImpl._shiftTabPressed) {// do not focus the menu itself
              return;
            }// Do not focus the selected tab if the deepest target is part of the
            // menu element's local DOM and is focusable.
            var rootTarget =/** @type {?HTMLElement} */dom(event).rootTarget; if (rootTarget !== this && typeof rootTarget.tabIndex !== 'undefined' && !this.isLightDescendant(rootTarget)) { return; }// clear the cached focus item
            this._defaultFocusAsync = this.async(function () {// focus the selected item when the menu receives focus, or the first item
              // if no item is selected
              var firstSelectedItem = this.multi ? this.selectedItems && this.selectedItems[0] : this.selectedItem; this._setFocusedItem(null); if (firstSelectedItem) { this._setFocusedItem(firstSelectedItem); } else if (this.items[0]) {// We find the first none-disabled item (if one exists)
                this._focusNext();
              }
            });
          },/**
     * Handler that is called when the up key is pressed.
     *
     * @param {CustomEvent} event A key combination event.
     */_onUpKey: function _onUpKey(event) {// up and down arrows moves the focus
            this._focusPrevious(); event.detail.keyboardEvent.preventDefault();
          },/**
     * Handler that is called when the down key is pressed.
     *
     * @param {CustomEvent} event A key combination event.
     */_onDownKey: function _onDownKey(event) { this._focusNext(); event.detail.keyboardEvent.preventDefault(); },/**
     * Handler that is called when the esc key is pressed.
     *
     * @param {CustomEvent} event A key combination event.
     */_onEscKey: function _onEscKey(event) { var focusedItem = this.focusedItem; if (focusedItem) { focusedItem.blur(); } },/**
     * Handler that is called when a keydown event is detected.
     *
     * @param {KeyboardEvent} event A keyboard event.
     */_onKeydown: function _onKeydown(event) {
            if (!this.keyboardEventMatchesKeys(event, 'up down esc')) {// all other keys focus the menu item starting with that character
              this._focusWithKeyboardEvent(event);
            } event.stopPropagation();
          },// override _activateHandler
          _activateHandler: function _activateHandler(event) { IronSelectableBehavior._activateHandler.call(this, event); event.stopPropagation(); },/**
     * Updates this element's tab index when it's enabled/disabled.
     * @param {boolean} disabled
     */_disabledChanged: function _disabledChanged(disabled) {
            if (disabled) {
              this._previousTabIndex = this.hasAttribute('tabindex') ? this.tabIndex : 0; this.removeAttribute('tabindex');// No tabindex means not tab-able or select-able.
            } else if (!this.hasAttribute('tabindex')) { this.setAttribute('tabindex', this._previousTabIndex); }
          }
        }; IronMenuBehaviorImpl._shiftTabPressed = false;/** @polymerBehavior */var IronMenuBehavior = [IronMultiSelectableBehavior, IronA11yKeysBehavior, IronMenuBehaviorImpl]; Polymer({ _template: html(_templateObject25_e13d1b4010eb11ec83cd7fddb4847b33()), is: 'paper-listbox', behaviors: [IronMenuBehavior],/** @private */hostAttributes: { role: 'listbox' } }); var template$6 = html(_templateObject26_e13d1b4010eb11ec83cd7fddb4847b33()); template$6.setAttribute('style', 'display: none;'); document.head.appendChild(template$6.content); var PaperButtonBehaviorImpl = {
          properties: {/**
       * The z-depth of this element, from 0-5. Setting to 0 will remove the
       * shadow, and each increasing number greater than 0 will be "deeper"
       * than the last.
       *
       * @attribute elevation
       * @type number
       * @default 1
       */elevation: { type: Number, reflectToAttribute: true, readOnly: true }
          }, observers: ['_calculateElevation(focused, disabled, active, pressed, receivedFocusFromKeyboard)', '_computeKeyboardClass(receivedFocusFromKeyboard)'], hostAttributes: { role: 'button', tabindex: '0', animated: true }, _calculateElevation: function _calculateElevation() { var e = 1; if (this.disabled) { e = 0; } else if (this.active || this.pressed) { e = 4; } else if (this.receivedFocusFromKeyboard) { e = 3; } this._setElevation(e); }, _computeKeyboardClass: function _computeKeyboardClass(receivedFocusFromKeyboard) { this.toggleClass('keyboard-focus', receivedFocusFromKeyboard); },/**
     * In addition to `IronButtonState` behavior, when space key goes down,
     * create a ripple down effect.
     *
     * @param {!KeyboardEvent} event .
     */_spaceKeyDownHandler: function _spaceKeyDownHandler(event) {
            IronButtonStateImpl._spaceKeyDownHandler.call(this, event);// Ensure that there is at most one ripple when the space key is held down.
            if (this.hasRipple() && this.getRipple().ripples.length < 1) { this._ripple.uiDownAction(); }
          },/**
     * In addition to `IronButtonState` behavior, when space key goes up,
     * create a ripple up effect.
     *
     * @param {!KeyboardEvent} event .
     */_spaceKeyUpHandler: function _spaceKeyUpHandler(event) { IronButtonStateImpl._spaceKeyUpHandler.call(this, event); if (this.hasRipple()) { this._ripple.uiUpAction(); } }
        };/** @polymerBehavior */var PaperButtonBehavior = [IronButtonState, IronControlState, PaperRippleBehavior, PaperButtonBehaviorImpl]; var template$7 = html(_templateObject27_e13d1b4010eb11ec83cd7fddb4847b33()); template$7.setAttribute('strip-whitespace', '');/**
                                                   Material design:
                                                   [Buttons](https://www.google.com/design/spec/components/buttons.html)
                                                                                                 `paper-button` is a button. When the user touches the button, a ripple effect
                                                   emanates from the point of contact. It may be flat or raised. A raised button is
                                                   styled with a shadow.
                                                                                                 Example:
                                                                                                     <paper-button>Flat button</paper-button>
                                                     <paper-button raised>Raised button</paper-button>
                                                     <paper-button noink>No ripple effect</paper-button>
                                                     <paper-button toggles>Toggle-able button</paper-button>
                                                                                                 A button that has `toggles` true will remain `active` after being clicked (and
                                                   will have an `active` attribute set). For more information, see the
                                                   `IronButtonState` behavior.
                                                                                                 You may use custom DOM in the button body to create a variety of buttons. For
                                                   example, to create a button with an icon and some text:
                                                                                                     <paper-button>
                                                       <iron-icon icon="favorite"></iron-icon>
                                                       custom button content
                                                     </paper-button>
                                                                                                 To use `paper-button` as a link, wrap it in an anchor tag. Since `paper-button`
                                                   will already receive focus, you may want to prevent the anchor tag from
                                                   receiving focus as well by setting its tabindex to -1.
                                                                                                     <a href="https://www.polymer-project.org/" tabindex="-1">
                                                       <paper-button raised>Polymer Project</paper-button>
                                                     </a>
                                                                                                 ### Styling
                                                                                                 Style the button with CSS as you would a normal DOM element.
                                                                                                     paper-button.fancy {
                                                       background: green;
                                                       color: yellow;
                                                     }
                                                                                                     paper-button.fancy:hover {
                                                       background: lime;
                                                     }
                                                                                                     paper-button[disabled],
                                                     paper-button[toggles][active] {
                                                       background: red;
                                                     }
                                                                                                 By default, the ripple is the same color as the foreground at 25% opacity. You
                                                   may customize the color using the `--paper-button-ink-color` custom property.
                                                                                                 The following custom properties and mixins are also available for styling:
                                                                                                 Custom property | Description | Default
                                                   ----------------|-------------|----------
                                                   `--paper-button-ink-color` | Background color of the ripple | `Based on the button's color`
                                                   `--paper-button` | Mixin applied to the button | `{}`
                                                   `--paper-button-disabled` | Mixin applied to the disabled button. Note that you can also use the `paper-button[disabled]` selector | `{}`
                                                   `--paper-button-flat-keyboard-focus` | Mixin applied to a flat button after it's been focused using the keyboard | `{}`
                                                   `--paper-button-raised-keyboard-focus` | Mixin applied to a raised button after it's been focused using the keyboard | `{}`
                                                                                                 @demo demo/index.html
                                                   */Polymer({
          _template: template$7, is: 'paper-button', behaviors: [PaperButtonBehavior], properties: {/**
       * If true, the button should be styled with a shadow.
       */raised: { type: Boolean, reflectToAttribute: true, value: false, observer: '_calculateElevation' }
          }, _calculateElevation: function _calculateElevation() { if (!this.raised) { this._setElevation(0); } else { PaperButtonBehaviorImpl._calculateElevation.apply(this); } }/**
      Fired when the animation finishes.
      This is useful if you want to wait until
      the ripple animation finishes to perform some action.
       @event transitionend
      Event param: {{node: Object}} detail Contains the animated node.
      */}); var lang = { "it": { "language": "Lingua", "it": "Italiano", "en": "Inglese" }, "en": { "language": "Language", "en": "English", "it": "Italian" } }; var PaperSelectLanguage =/*#__PURE__*/function (_LocalizeMixin) {
          babelHelpers.inherits(PaperSelectLanguage, _LocalizeMixin); babelHelpers.createClass(PaperSelectLanguage, null, [{ key: "template", get: function get() { return html(_templateObject28_e13d1b4010eb11ec83cd7fddb4847b33()); } }, { key: "properties", get: function get() { return { services: { value: { _localizeService: 'Localize' } } }; } }]); function PaperSelectLanguage() { var _this40; babelHelpers.classCallCheck(this, PaperSelectLanguage); _this40 = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(PaperSelectLanguage).call(this)); _this40.resources = lang; return _this40; } babelHelpers.createClass(PaperSelectLanguage, [{
            key: "ready", value: function ready() { babelHelpers.get(babelHelpers.getPrototypeOf(PaperSelectLanguage.prototype), "ready", this).call(this); }/**
       * @param evt
       * @private
       */}, {
            key: "_selectLanguage", value: function _selectLanguage(evt) { this._localizeService.setDefaultLang(evt.detail.item.value); }/**
       * @param {Localize} localizeService
       */}, { key: "changedLocalizeService", value: function changedLocalizeService(localizeService) { babelHelpers.get(babelHelpers.getPrototypeOf(PaperSelectLanguage.prototype), "changedLocalizeService", this).call(this, localizeService); this.languages = this._localizeService.getLanguages(); for (var cont = 0; this.languages.length > cont; cont++) { if (this.languages[cont] === this.language) { this.$.listbox.selected = cont; break; } } } }]); return PaperSelectLanguage;
        }(LocalizeMixin(ServiceInjectorMixin(PolymerElement))); window.customElements.define('paper-select-language', PaperSelectLanguage); Polymer({
          _template: html(_templateObject29_e13d1b4010eb11ec83cd7fddb4847b33()), is: 'iron-image', properties: {/**
       * The URL of an image.
       */src: { type: String, value: '' },/**
       * A short text alternative for the image.
       */alt: { type: String, value: null },/**
       * CORS enabled images support:
       * https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image
       */crossorigin: { type: String, value: null },/**
       * When true, the image is prevented from loading and any placeholder is
       * shown.  This may be useful when a binding to the src property is known to
       * be invalid, to prevent 404 requests.
       */preventLoad: { type: Boolean, value: false },/**
       * Sets a sizing option for the image.  Valid values are `contain` (full
       * aspect ratio of the image is contained within the element and
       * letterboxed) or `cover` (image is cropped in order to fully cover the
       * bounds of the element), or `null` (default: image takes natural size).
       */sizing: { type: String, value: null, reflectToAttribute: true },/**
       * When a sizing option is used (`cover` or `contain`), this determines
       * how the image is aligned within the element bounds.
       */position: { type: String, value: 'center' },/**
       * When `true`, any change to the `src` property will cause the
       * `placeholder` image to be shown until the new image has loaded.
       */preload: { type: Boolean, value: false },/**
       * This image will be used as a background/placeholder until the src image
       * has loaded.  Use of a data-URI for placeholder is encouraged for instant
       * rendering.
       */placeholder: { type: String, value: null, observer: '_placeholderChanged' },/**
       * When `preload` is true, setting `fade` to true will cause the image to
       * fade into place.
       */fade: { type: Boolean, value: false },/**
       * Read-only value that is true when the image is loaded.
       */loaded: { notify: true, readOnly: true, type: Boolean, value: false },/**
       * Read-only value that tracks the loading state of the image when the
       * `preload` option is used.
       */loading: { notify: true, readOnly: true, type: Boolean, value: false },/**
       * Read-only value that indicates that the last set `src` failed to load.
       */error: { notify: true, readOnly: true, type: Boolean, value: false },/**
       * Can be used to set the width of image (e.g. via binding); size may also
       * be set via CSS.
       */width: { observer: '_widthChanged', type: Number, value: null },/**
       * Can be used to set the height of image (e.g. via binding); size may also
       * be set via CSS.
       *
       * @attribute height
       * @type number
       * @default null
       */height: { observer: '_heightChanged', type: Number, value: null }
          }, observers: ['_transformChanged(sizing, position)', '_loadStateObserver(src, preventLoad)'], created: function created() { this._resolvedSrc = ''; }, _imgOnLoad: function _imgOnLoad() { if (this.$.img.src !== this._resolveSrc(this.src)) { return; } this._setLoading(false); this._setLoaded(true); this._setError(false); }, _imgOnError: function _imgOnError() { if (this.$.img.src !== this._resolveSrc(this.src)) { return; } this.$.img.removeAttribute('src'); this.$.sizedImgDiv.style.backgroundImage = ''; this._setLoading(false); this._setLoaded(false); this._setError(true); }, _computePlaceholderHidden: function _computePlaceholderHidden() { return !this.preload || !this.fade && !this.loading && this.loaded; }, _computePlaceholderClassName: function _computePlaceholderClassName() { return this.preload && this.fade && !this.loading && this.loaded ? 'faded-out' : ''; }, _computeImgDivHidden: function _computeImgDivHidden() { return !this.sizing; }, _computeImgDivARIAHidden: function _computeImgDivARIAHidden() { return this.alt === '' ? 'true' : undefined; }, _computeImgDivARIALabel: function _computeImgDivARIALabel() {
            if (this.alt !== null) { return this.alt; }// Polymer.ResolveUrl.resolveUrl will resolve '' relative to a URL x to
            // that URL x, but '' is the default for src.
            if (this.src === '') { return ''; }// NOTE: Use of `URL` was removed here because IE11 doesn't support
            // constructing it. If this ends up being problematic, we should
            // consider reverting and adding the URL polyfill as a dev dependency.
            var resolved = this._resolveSrc(this.src);// Remove query parts, get file name.
            return resolved.replace(/[?|#].*/g, '').split('/').pop();
          }, _computeImgHidden: function _computeImgHidden() { return !!this.sizing; }, _widthChanged: function _widthChanged() { this.style.width = isNaN(this.width) ? this.width : this.width + 'px'; }, _heightChanged: function _heightChanged() { this.style.height = isNaN(this.height) ? this.height : this.height + 'px'; }, _loadStateObserver: function _loadStateObserver(src, preventLoad) { var newResolvedSrc = this._resolveSrc(src); if (newResolvedSrc === this._resolvedSrc) { return; } this._resolvedSrc = ''; this.$.img.removeAttribute('src'); this.$.sizedImgDiv.style.backgroundImage = ''; if (src === '' || preventLoad) { this._setLoading(false); this._setLoaded(false); this._setError(false); } else { this._resolvedSrc = newResolvedSrc; this.$.img.src = this._resolvedSrc; this.$.sizedImgDiv.style.backgroundImage = 'url("' + this._resolvedSrc + '")'; this._setLoading(true); this._setLoaded(false); this._setError(false); } }, _placeholderChanged: function _placeholderChanged() { this.$.placeholder.style.backgroundImage = this.placeholder ? 'url("' + this.placeholder + '")' : ''; }, _transformChanged: function _transformChanged() { var sizedImgDivStyle = this.$.sizedImgDiv.style; var placeholderStyle = this.$.placeholder.style; sizedImgDivStyle.backgroundSize = placeholderStyle.backgroundSize = this.sizing; sizedImgDivStyle.backgroundPosition = placeholderStyle.backgroundPosition = this.sizing ? this.position : ''; sizedImgDivStyle.backgroundRepeat = placeholderStyle.backgroundRepeat = this.sizing ? 'no-repeat' : ''; }, _resolveSrc: function _resolveSrc(testSrc) {
            var resolved = _resolveUrl(testSrc, this.$.baseURIAnchor.href);// NOTE: Use of `URL` was removed here because IE11 doesn't support
            // constructing it. If this ends up being problematic, we should
            // consider reverting and adding the URL polyfill as a dev dependency.
            if (resolved.length >= 2 && resolved[0] === '/' && resolved[1] !== '/') {// In IE location.origin might not work
              // https://connect.microsoft.com/IE/feedback/details/1763802/location-origin-is-undefined-in-ie-11-on-windows-10-but-works-on-windows-7
              resolved = (location.origin || location.protocol + '//' + location.host) + resolved;
            } return resolved;
          }
        }); Polymer({
          _template: html(_templateObject30_e13d1b4010eb11ec83cd7fddb4847b33()), is: 'paper-card', properties: {/**
       * The title of the card.
       */heading: { type: String, value: '', observer: '_headingChanged' },/**
       * The url of the title image of the card.
       */image: { type: String, value: '' },/**
       * The text alternative of the card's title image.
       */alt: { type: String },/**
       * When `true`, any change to the image url property will cause the
       * `placeholder` image to be shown until the image is fully rendered.
       */preloadImage: { type: Boolean, value: false },/**
       * When `preloadImage` is true, setting `fadeImage` to true will cause the
       * image to fade into place.
       */fadeImage: { type: Boolean, value: false },/**
       * This image will be used as a background/placeholder until the src image
       * has loaded. Use of a data-URI for placeholder is encouraged for instant
       * rendering.
       */placeholderImage: { type: String, value: null },/**
       * The z-depth of the card, from 0-5.
       */elevation: { type: Number, value: 1, reflectToAttribute: true },/**
       * Set this to true to animate the card shadow when setting a new
       * `z` value.
       */animatedShadow: { type: Boolean, value: false },/**
       * Read-only property used to pass down the `animatedShadow` value to
       * the underlying paper-material style (since they have different names).
       */animated: { type: Boolean, reflectToAttribute: true, readOnly: true, computed: '_computeAnimated(animatedShadow)' }
          },/**
     * Format function for aria-hidden. Use the ! operator results in the
     * empty string when given a falsy value.
     */_isHidden: function _isHidden(image) { return image ? 'false' : 'true'; }, _headingChanged: function _headingChanged(heading) { var currentHeading = this.getAttribute('heading'), currentLabel = this.getAttribute('aria-label'); if (typeof currentLabel !== 'string' || currentLabel === currentHeading) { this.setAttribute('aria-label', heading); } }, _computeHeadingClass: function _computeHeadingClass(image) { return image ? ' over-image' : ''; }, _computeAnimated: function _computeAnimated(animatedShadow) { return animatedShadow; }
        }); Polymer({
          _template: html(_templateObject31_e13d1b4010eb11ec83cd7fddb4847b33()), is: 'neon-animated-pages', behaviors: [IronResizableBehavior, IronSelectableBehavior, NeonAnimationRunnerBehavior], properties: {
            activateEvent: { type: String, value: '' },// if true, the initial page selection will also be animated according to
            // its animation config.
            animateInitialSelection: { type: Boolean, value: false }
          }, listeners: { 'iron-select': '_onIronSelect', 'neon-animation-finish': '_onNeonAnimationFinish' }, _onIronSelect: function _onIronSelect(event) {
            var selectedPage = event.detail.item;// Only consider child elements.
            if (this.items.indexOf(selectedPage) < 0) { return; } var oldPage = this._valueToItem(this._prevSelected) || false; this._prevSelected = this.selected;// on initial load and if animateInitialSelection is negated, simply display
            // selectedPage.
            if (!oldPage && !this.animateInitialSelection) { this._completeSelectedChanged(); return; } this.animationConfig = [];// configure selectedPage animations.
            if (this.entryAnimation) { this.animationConfig.push({ name: this.entryAnimation, node: selectedPage }); } else { if (selectedPage.getAnimationConfig) { this.animationConfig.push({ animatable: selectedPage, type: 'entry' }); } }// configure oldPage animations iff exists.
            if (oldPage) {// cancel the currently running animation if one is ongoing.
              if (oldPage.classList.contains('neon-animating')) { this._squelchNextFinishEvent = true; this.cancelAnimation(); this._completeSelectedChanged(); this._squelchNextFinishEvent = false; }// configure the animation.
              if (this.exitAnimation) { this.animationConfig.push({ name: this.exitAnimation, node: oldPage }); } else { if (oldPage.getAnimationConfig) { this.animationConfig.push({ animatable: oldPage, type: 'exit' }); } }// display the oldPage during the transition.
              oldPage.classList.add('neon-animating');
            }// display the selectedPage during the transition.
            selectedPage.classList.add('neon-animating');// actually run the animations.
            if (this.animationConfig.length >= 1) {// on first load, ensure we run animations only after element is attached.
              if (!this.isAttached) { this.async(function () { this.playAnimation(undefined, { fromPage: null, toPage: selectedPage }); }); } else { this.playAnimation(undefined, { fromPage: oldPage, toPage: selectedPage }); }
            } else { this._completeSelectedChanged(oldPage, selectedPage); }
          },/**
     * @param {Object=} oldPage
     * @param {Object=} selectedPage
     */_completeSelectedChanged: function _completeSelectedChanged(oldPage, selectedPage) { if (selectedPage) { selectedPage.classList.remove('neon-animating'); } if (oldPage) { oldPage.classList.remove('neon-animating'); } if (!selectedPage || !oldPage) { var nodes = dom(this.$.content).getDistributedNodes(); for (var node, index = 0; node = nodes[index]; index++) { node.classList && node.classList.remove('neon-animating'); } } this.async(this._notifyPageResize); }, _onNeonAnimationFinish: function _onNeonAnimationFinish(event) { if (this._squelchNextFinishEvent) { this._squelchNextFinishEvent = false; return; } this._completeSelectedChanged(event.detail.fromPage, event.detail.toPage); }, _notifyPageResize: function _notifyPageResize() { var selectedPage = this.selectedItem || this._valueToItem(this.selected); this.resizerShouldNotify = function (element) { return element == selectedPage; }; this.notifyResize(); }
        }); Polymer({ _template: html(_templateObject32_e13d1b4010eb11ec83cd7fddb4847b33()), is: 'neon-animatable', behaviors: [NeonAnimatableBehavior, IronResizableBehavior] }); Polymer({
          is: 'cascaded-animation', behaviors: [NeonAnimationBehavior],/**
     * @param {{
     *   animation: string,
     *   nodes: !Array<!Element>,
     *   nodeDelay: (number|undefined),
     *   timing: (Object|undefined)
     *  }} config
     */configure: function configure(config) {
            this._animations = []; var nodes = config.nodes; var effects = []; var nodeDelay = config.nodeDelay || 50; config.timing = config.timing || {}; config.timing.delay = config.timing.delay || 0; var oldDelay = config.timing.delay; var abortedConfigure; for (var node, index = 0; node = nodes[index]; index++) { config.timing.delay += nodeDelay; config.node = node; var animation = document.createElement(config.animation); if (animation.isNeonAnimation) { var effect = animation.configure(config); this._animations.push(animation); effects.push(effect); } else { console.warn(this.is + ':', config.animation, 'not found!'); abortedConfigure = true; break; } } config.timing.delay = oldDelay; config.node = null;// if a bad animation was configured, abort config.
            if (abortedConfigure) { return; } this._effect = new GroupEffect(effects); return this._effect;
          }, complete: function complete() { for (var animation, index = 0; animation = this._animations[index]; index++) { animation.complete(animation.config); } }
        }); var NeonSharedElementAnimationBehaviorImpl = {
          properties: {/**
       * Cached copy of shared elements.
       */sharedElements: { type: Object }
          },/**
     * Finds shared elements based on `config`.
     */findSharedElements: function findSharedElements(config) { var fromPage = config.fromPage; var toPage = config.toPage; if (!fromPage || !toPage) { console.warn(this.is + ':', !fromPage ? 'fromPage' : 'toPage', 'is undefined!'); return null; }; if (!fromPage.sharedElements || !toPage.sharedElements) { console.warn(this.is + ':', 'sharedElements are undefined for', !fromPage.sharedElements ? fromPage : toPage); return null; }; var from = fromPage.sharedElements[config.id]; var to = toPage.sharedElements[config.id]; if (!from || !to) { console.warn(this.is + ':', 'sharedElement with id', config.id, 'not found in', !from ? fromPage : toPage); return null; } this.sharedElements = { from: from, to: to }; return this.sharedElements; }
        };/** @polymerBehavior */var NeonSharedElementAnimationBehavior = [NeonAnimationBehavior, NeonSharedElementAnimationBehaviorImpl]; Polymer({ is: 'hero-animation', behaviors: [NeonSharedElementAnimationBehavior], configure: function configure(config) { var shared = this.findSharedElements(config); if (!shared) { return; } var fromRect = shared.from.getBoundingClientRect(); var toRect = shared.to.getBoundingClientRect(); var deltaLeft = fromRect.left - toRect.left; var deltaTop = fromRect.top - toRect.top; var deltaWidth = fromRect.width / toRect.width; var deltaHeight = fromRect.height / toRect.height; this._effect = new KeyframeEffect(shared.to, [{ 'transform': 'translate(' + deltaLeft + 'px,' + deltaTop + 'px) scale(' + deltaWidth + ',' + deltaHeight + ')' }, { 'transform': 'none' }], this.timingFromConfig(config)); this.setPrefixedProperty(shared.to, 'transformOrigin', '0 0'); shared.to.style.zIndex = 10000; shared.from.style.visibility = 'hidden'; return this._effect; }, complete: function complete(config) { var shared = this.findSharedElements(config); if (!shared) { return null; } shared.to.style.zIndex = ''; shared.from.style.visibility = ''; } }); Polymer({ is: 'opaque-animation', behaviors: [NeonAnimationBehavior], configure: function configure(config) { var node = config.node; this._effect = new KeyframeEffect(node, [{ 'opacity': '1' }, { 'opacity': '1' }], this.timingFromConfig(config)); node.style.opacity = '0'; return this._effect; }, complete: function complete(config) { config.node.style.opacity = ''; } }); Polymer({ is: 'ripple-animation', behaviors: [NeonSharedElementAnimationBehavior], configure: function configure(config) { var shared = this.findSharedElements(config); if (!shared) { return null; } var translateX, translateY; var toRect = shared.to.getBoundingClientRect(); if (config.gesture) { translateX = config.gesture.x - (toRect.left + toRect.width / 2); translateY = config.gesture.y - (toRect.top + toRect.height / 2); } else { var fromRect = shared.from.getBoundingClientRect(); translateX = fromRect.left + fromRect.width / 2 - (toRect.left + toRect.width / 2); translateY = fromRect.top + fromRect.height / 2 - (toRect.top + toRect.height / 2); } var translate = 'translate(' + translateX + 'px,' + translateY + 'px)'; var size = Math.max(toRect.width + Math.abs(translateX) * 2, toRect.height + Math.abs(translateY) * 2); var diameter = Math.sqrt(2 * size * size); var scaleX = diameter / toRect.width; var scaleY = diameter / toRect.height; var scale = 'scale(' + scaleX + ',' + scaleY + ')'; this._effect = new KeyframeEffect(shared.to, [{ 'transform': translate + ' scale(0)' }, { 'transform': translate + ' ' + scale }], this.timingFromConfig(config)); this.setPrefixedProperty(shared.to, 'transformOrigin', '50% 50%'); shared.to.style.borderRadius = '50%'; return this._effect; }, complete: function complete() { if (this.sharedElements) { this.setPrefixedProperty(this.sharedElements.to, 'transformOrigin', ''); this.sharedElements.to.style.borderRadius = ''; } } }); Polymer({ is: 'reverse-ripple-animation', behaviors: [NeonSharedElementAnimationBehavior], configure: function configure(config) { var shared = this.findSharedElements(config); if (!shared) { return null; } var translateX, translateY; var fromRect = shared.from.getBoundingClientRect(); if (config.gesture) { translateX = config.gesture.x - (fromRect.left + fromRect.width / 2); translateY = config.gesture.y - (fromRect.top + fromRect.height / 2); } else { var toRect = shared.to.getBoundingClientRect(); translateX = toRect.left + toRect.width / 2 - (fromRect.left + fromRect.width / 2); translateY = toRect.top + toRect.height / 2 - (fromRect.top + fromRect.height / 2); } var translate = 'translate(' + translateX + 'px,' + translateY + 'px)'; var size = Math.max(fromRect.width + Math.abs(translateX) * 2, fromRect.height + Math.abs(translateY) * 2); var diameter = Math.sqrt(2 * size * size); var scaleX = diameter / fromRect.width; var scaleY = diameter / fromRect.height; var scale = 'scale(' + scaleX + ',' + scaleY + ')'; this._effect = new KeyframeEffect(shared.from, [{ 'transform': translate + ' ' + scale }, { 'transform': translate + ' scale(0)' }], this.timingFromConfig(config)); this.setPrefixedProperty(shared.from, 'transformOrigin', '50% 50%'); shared.from.style.borderRadius = '50%'; return this._effect; }, complete: function complete() { if (this.sharedElements) { this.setPrefixedProperty(this.sharedElements.from, 'transformOrigin', ''); this.sharedElements.from.style.borderRadius = ''; } } }); Polymer({ is: 'scale-down-animation', behaviors: [NeonAnimationBehavior], configure: function configure(config) { var node = config.node; var scaleProperty = 'scale(0, 0)'; if (config.axis === 'x') { scaleProperty = 'scale(0, 1)'; } else if (config.axis === 'y') { scaleProperty = 'scale(1, 0)'; } this._effect = new KeyframeEffect(node, [{ 'transform': 'scale(1,1)' }, { 'transform': scaleProperty }], this.timingFromConfig(config)); if (config.transformOrigin) { this.setPrefixedProperty(node, 'transformOrigin', config.transformOrigin); } return this._effect; } }); Polymer({ is: 'scale-up-animation', behaviors: [NeonAnimationBehavior], configure: function configure(config) { var node = config.node; var scaleProperty = 'scale(0)'; if (config.axis === 'x') { scaleProperty = 'scale(0, 1)'; } else if (config.axis === 'y') { scaleProperty = 'scale(1, 0)'; } this._effect = new KeyframeEffect(node, [{ 'transform': scaleProperty }, { 'transform': 'scale(1, 1)' }], this.timingFromConfig(config)); if (config.transformOrigin) { this.setPrefixedProperty(node, 'transformOrigin', config.transformOrigin); } return this._effect; } }); Polymer({ is: 'slide-from-left-animation', behaviors: [NeonAnimationBehavior], configure: function configure(config) { var node = config.node; this._effect = new KeyframeEffect(node, [{ 'transform': 'translateX(-100%)' }, { 'transform': 'none' }], this.timingFromConfig(config)); if (config.transformOrigin) { this.setPrefixedProperty(node, 'transformOrigin', config.transformOrigin); } else { this.setPrefixedProperty(node, 'transformOrigin', '0 50%'); } return this._effect; } }); Polymer({ is: 'slide-from-right-animation', behaviors: [NeonAnimationBehavior], configure: function configure(config) { var node = config.node; this._effect = new KeyframeEffect(node, [{ 'transform': 'translateX(100%)' }, { 'transform': 'none' }], this.timingFromConfig(config)); if (config.transformOrigin) { this.setPrefixedProperty(node, 'transformOrigin', config.transformOrigin); } else { this.setPrefixedProperty(node, 'transformOrigin', '0 50%'); } return this._effect; } }); Polymer({ is: 'slide-from-top-animation', behaviors: [NeonAnimationBehavior], configure: function configure(config) { var node = config.node; this._effect = new KeyframeEffect(node, [{ 'transform': 'translateY(-100%)' }, { 'transform': 'translateY(0%)' }], this.timingFromConfig(config)); if (config.transformOrigin) { this.setPrefixedProperty(node, 'transformOrigin', config.transformOrigin); } else { this.setPrefixedProperty(node, 'transformOrigin', '50% 0'); } return this._effect; } }); Polymer({ is: 'slide-from-bottom-animation', behaviors: [NeonAnimationBehavior], configure: function configure(config) { var node = config.node; this._effect = new KeyframeEffect(node, [{ 'transform': 'translateY(100%)' }, { 'transform': 'translateY(0)' }], this.timingFromConfig(config)); if (config.transformOrigin) { this.setPrefixedProperty(node, 'transformOrigin', config.transformOrigin); } else { this.setPrefixedProperty(node, 'transformOrigin', '50% 0'); } return this._effect; } }); Polymer({ is: 'slide-left-animation', behaviors: [NeonAnimationBehavior], configure: function configure(config) { var node = config.node; this._effect = new KeyframeEffect(node, [{ 'transform': 'none' }, { 'transform': 'translateX(-100%)' }], this.timingFromConfig(config)); if (config.transformOrigin) { this.setPrefixedProperty(node, 'transformOrigin', config.transformOrigin); } else { this.setPrefixedProperty(node, 'transformOrigin', '0 50%'); } return this._effect; } }); Polymer({ is: 'slide-right-animation', behaviors: [NeonAnimationBehavior], configure: function configure(config) { var node = config.node; this._effect = new KeyframeEffect(node, [{ 'transform': 'none' }, { 'transform': 'translateX(100%)' }], this.timingFromConfig(config)); if (config.transformOrigin) { this.setPrefixedProperty(node, 'transformOrigin', config.transformOrigin); } else { this.setPrefixedProperty(node, 'transformOrigin', '0 50%'); } return this._effect; } }); Polymer({ is: 'slide-up-animation', behaviors: [NeonAnimationBehavior], configure: function configure(config) { var node = config.node; this._effect = new KeyframeEffect(node, [{ 'transform': 'translate(0)' }, { 'transform': 'translateY(-100%)' }], this.timingFromConfig(config)); if (config.transformOrigin) { this.setPrefixedProperty(node, 'transformOrigin', config.transformOrigin); } else { this.setPrefixedProperty(node, 'transformOrigin', '50% 0'); } return this._effect; } }); Polymer({ is: 'slide-down-animation', behaviors: [NeonAnimationBehavior], configure: function configure(config) { var node = config.node; this._effect = new KeyframeEffect(node, [{ 'transform': 'translateY(0%)' }, { 'transform': 'translateY(100%)' }], this.timingFromConfig(config)); if (config.transformOrigin) { this.setPrefixedProperty(node, 'transformOrigin', config.transformOrigin); } else { this.setPrefixedProperty(node, 'transformOrigin', '50% 0'); } return this._effect; } }); Polymer({
          is: 'transform-animation', behaviors: [NeonAnimationBehavior],/**
     * @param {{
     *   node: !Element,
     *   transformOrigin: (string|undefined),
     *   transformFrom: (string|undefined),
     *   transformTo: (string|undefined),
     *   timing: (Object|undefined)
     * }} config
     */configure: function configure(config) { var node = config.node; var transformFrom = config.transformFrom || 'none'; var transformTo = config.transformTo || 'none'; this._effect = new KeyframeEffect(node, [{ 'transform': transformFrom }, { 'transform': transformTo }], this.timingFromConfig(config)); if (config.transformOrigin) { this.setPrefixedProperty(node, 'transformOrigin', config.transformOrigin); } return this._effect; }
        }); var NeonSharedElementAnimatableBehaviorImpl = {
          properties: {/**
       * A map of shared element id to node.
       */sharedElements: { type: Object, value: {} }
          }
        };/** @polymerBehavior */var NeonSharedElementAnimatableBehavior = [NeonAnimatableBehavior, NeonSharedElementAnimatableBehaviorImpl];/**
                                                                                                                  * @type {Function}
                                                                                                                  */var NotifyMixin = function NotifyMixin(superClass) {
          return (/*#__PURE__*/function (_superClass8) {
            babelHelpers.inherits(_class5, _superClass8); function _class5() { babelHelpers.classCallCheck(this, _class5); return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(_class5).apply(this, arguments)); } babelHelpers.createClass(_class5, [{
              key: "notify",/**
         * @param notify
         */value: function notify(_notify) { if (!this._notifyService) { return; } this._notifyService.notify(_notify); }
            }], [{
              key: "properties", get: function get() {
                return {/**
           * @type Notify
           */_notifyService: { type: Object, readOnly: true, notify: true }
                };
              }
            }]); return _class5;
          }(superClass));
        }; var ItemFavorite = function ItemFavorite(superClass) {
          return (/*#__PURE__*/function (_mixinBehaviors3) {
            babelHelpers.inherits(_class6, _mixinBehaviors3); function _class6() { babelHelpers.classCallCheck(this, _class6); return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(_class6).apply(this, arguments)); } babelHelpers.createClass(_class6, [{
              key: "initDishCount",/**
         * @param menuItem
         */value: function initDishCount(menuItem) { var _this41 = this; if (!this._menuStorage) { return; } this._menuStorage.get(menuItem._id).then(function (data) { if (!data) { return; } _this41.dishCount = data.totalCount; }); }/**
         * @param menuItem
         * @private
         */}, {
              key: "_menuItemChanged", value: function _menuItemChanged(menuItem) { if (!menuItem || !menuItem.price || !menuItem.price.value) { this._setHasPrice(false); } else { this._setHasPrice(true); } }/**
         * @param evt
         */}, {
              key: "updateDishCount", value: function updateDishCount(evt) { if (evt.data._id !== this.menuItem._id) { return; } switch (evt.name) { case _shared_bundle_.Storage.POST_SAVE: case _shared_bundle_.Storage.POST_UPDATE: this.dishCount = evt.data.totalCount; break; case _shared_bundle_.Storage.POST_REMOVE: this.dishCount = 0; break; } }/**
         * @param evt
         */}, {
              key: "addFavorite", value: function addFavorite(evt) { var _this42 = this; if (!this._menuStorage || !this.menuItem || !this.restaurant) { return; } this._menuStorage.get(this.menuItem._id).then(function (data) { var method = 'update'; if (!data) { data = JSON.parse(JSON.stringify(_this42.menuItem)); data.totalCount = 1; data.restaurantId = _this42.restaurant._id; method = 'save'; } else { data.totalCount = data.totalCount + 1; } _this42._menuStorage[method](data); }).catch(function (error) { console.error(error); }); }/**
         * @param evt
         */}, {
              key: "addOneFavorite", value: function addOneFavorite(evt) { if (!this._menuStorage || !this.menuItem) { return; } this.menuItem.totalCount = this.menuItem.totalCount + 1; this._menuStorage.update(this.menuItem); }/**
         * @param evt
         */}, {
              key: "removeFavorite", value: function removeFavorite(evt) { var _this43 = this; if (!this._menuStorage || !this.menuItem) { return; } this._menuStorage.get(this.menuItem._id).then(function (data) { if (!data) { return; } var method = 'delete'; if (data.totalCount > 1) { data.totalCount = data.totalCount - 1; method = 'update'; } _this43._menuStorage[method](data); }).catch(function (error) { console.error(error); }); }/**
         * @param value
         * @private
         */}, { key: "_showOrderChanged", value: function _showOrderChanged(value) { if (!this.$.action) { return; } if (value) { this.$.action.style.display = 'block'; } else { this.$.action.style.display = 'none'; } } }], [{
              key: "properties", get: function get() {
                return {
                  restaurant: {}, hasPrice: { type: Boolean, readOnly: true, notify: true, value: true },/**
           * @type object
           */menuItem: { observer: '_menuItemChanged' },/**
           * @type Number
           */dishCount: { value: 0 },/**
           * @type Storage
           */_menuStorage: { readOnly: true }, showOrder: { value: true, notify: true, observer: '_showOrderChanged' }
                };
              }
            }]); return _class6;
          }(mixinBehaviors([NotifyMixin, LocalizeMixin], superClass)));
        }; var lang$1 = { "it": { "search": "Cerca", "category": "Categoria", 'all': "Tutti", 'plate-add': "Piatto aggiunto", "off-the-menu": "Fuori menù", "finished": "Finito" }, "en": { "search": "Search", "category": "Category", 'all': "All", 'plate-add': "plate add", "off-the-menu": "Off the menu", "finished": "finished" } }; var DsignMenuItemImage =/*#__PURE__*/function (_MergeCategory) {
          babelHelpers.inherits(DsignMenuItemImage, _MergeCategory); babelHelpers.createClass(DsignMenuItemImage, null, [{ key: "template", get: function get() { return html(_templateObject33_e13d1b4010eb11ec83cd7fddb4847b33()); } }]); function DsignMenuItemImage() { var _this44; babelHelpers.classCallCheck(this, DsignMenuItemImage); _this44 = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(DsignMenuItemImage).call(this)); _this44.resources = lang$1; return _this44; } babelHelpers.createClass(DsignMenuItemImage, [{
            key: "ready",/**
       *
       */value: function ready() { babelHelpers.get(babelHelpers.getPrototypeOf(DsignMenuItemImage.prototype), "ready", this).call(this); this.$.image.style.backgroundImage = 'url(https://dsign-asset.s3.eu-central-1.amazonaws.com/dish-not-found.png)'; }/**
       * @param dishCount
       */}, {
            key: "changeDishCount", value: function changeDishCount(dishCount) { if (!dishCount) { this.$.badgeMenu.style.visibility = 'hidden'; return; } this.$.badgeMenu.style.visibility = 'visible'; }/**
       *
       * @param menu
       * @param config
       * @param {Storage} menuStorage
       * @private
       */}, {
            key: "_observeMenu", value: function _observeMenu(menu, config, menuStorage) { if (!menu || !config || !menuStorage) { return; } if (menu.photos && Array.isArray(menu.photos) && menu.photos.length > 0) { this.$.image.style.backgroundImage = "url(".concat(menu.photos[0].src, ")"); } else { this.$.image.style.backgroundSize = "cover"; } menuStorage.getEventManager().on(_shared_bundle_.Storage.POST_REMOVE, this.updateDishCount.bind(this)); menuStorage.getEventManager().on(_shared_bundle_.Storage.POST_UPDATE, this.updateDishCount.bind(this)); menuStorage.getEventManager().on(_shared_bundle_.Storage.POST_SAVE, this.updateDishCount.bind(this)); if (menu) { this.initDishCount(menu); this._changeStatus(menu.status); } }/**
       * @param value
       * @returns {string}
       * @private
       */}, {
            key: "_capitalize", value: function _capitalize(value) { return typeof value === 'string' ? value.charAt(0).toUpperCase() + value.slice(1) : ''; }/**
       * @param price
       * @returns {*}
       * @private
       */}, { key: "_computePrice", value: function _computePrice(price) { if (!price || !price.value) { return; } return price.value; } }, {
            key: "_changeStatus", value: function _changeStatus(status) { switch (status) { case 'available': this.statusLabel = ''; this.shadowRoot.querySelector('.triangle').setAttribute('hidden', ''); this.shadowRoot.querySelector('.status-dish').setAttribute('hidden', ''); this.enableButton(false); break; case 'over': this.statusLabel = 'finished'; this.shadowRoot.querySelector('.triangle').removeAttribute('hidden'); this.shadowRoot.querySelector('.status-dish').removeAttribute('hidden'); this.enableButton(true); break; case 'not-available': this.statusLabel = 'off-the-menu'; this.shadowRoot.querySelector('.triangle').removeAttribute('hidden'); this.shadowRoot.querySelector('.status-dish').removeAttribute('hidden'); this.enableButton(true); break; } }/**
       * @param value
       */}, {
            key: "categoriesChange", value: function categoriesChange(value) { if (!value) { return; } this._mergeCategory(value); this.category = this.menuItem ? this.menuItem.category : ''; }/**
       * @param enable
       */}, { key: "enableButton", value: function enableButton(enable) { this.$['btn-menu'].disabled = enable; } }], [{
            key: "properties", get: function get() {
              return {
                menuItem: {}, categories: { observer: 'categoriesChange' }, services: { value: { _config: 'config', _localizeService: 'Localize', _menuStorage: 'MenuStorage', _notifyService: 'Notify' } }, statusLabel: { notify: true },/**
         * @type Number
         */dishCount: { value: 0, observer: 'changeDishCount' }
              };
            }
          }, { key: "observers", get: function get() { return ['_observeMenu(menuItem, _config, _menuStorage)']; } }]); return DsignMenuItemImage;
        }(MergeCategory(ItemFavorite(LocalizeMixin(ServiceInjectorMixin(PolymerElement))))); window.customElements.define('dsign-menu-item-image', DsignMenuItemImage); Polymer({/** @override */_template: html(_templateObject34_e13d1b4010eb11ec83cd7fddb4847b33()), is: 'dsign-badge',/** @private */hostAttributes: { role: 'status', tabindex: 0 }, behaviors: [IronResizableBehavior], listeners: { 'iron-resize': 'updatePosition' }, properties: {/**
       * The id of the element that the badge is anchored to. This element
       * must be a sibling of the badge.
       */for: { type: String, observer: '_forChanged' },/**
       * The label displayed in the badge. The label is centered, and ideally
       * should have very few characters.
       */label: { type: String, observer: '_labelChanged' },/**
       * An iron-icon ID. When given, the badge content will use an
       * `<iron-icon>` element displaying the given icon ID rather than the
       * label text. However, the label text will still be used for
       * accessibility purposes.
       */icon: { type: String, value: '' }, offsetX: { type: Number, value: 0 }, offsetY: { type: Number, value: 0 }, _boundNotifyResize: { type: Function, value: function value() { return this.notifyResize.bind(this); } }, _boundUpdateTarget: { type: Function, value: function value() { return this._updateTarget.bind(this); } }
        },/** @override */attached: function attached() {// Polymer 2.x does not have this.offsetParent defined by attached
          requestAnimationFrame(this._boundUpdateTarget);
        },/** @override */attributeChanged: function attributeChanged(name) { if (name === 'hidden') { this.updatePosition(); } }, _forChanged: function _forChanged() {// The first time the property is set is before the badge is attached,
          // which means we're not ready to position it yet.
          if (!this.isAttached) { return; } this._updateTarget();
        }, _labelChanged: function _labelChanged() { this.setAttribute('aria-label', this.label); }, _updateTarget: function _updateTarget() { this._target = this.target; requestAnimationFrame(this._boundNotifyResize); }, _computeIsIconBadge: function _computeIsIconBadge(icon) { return icon.length > 0; },/**
     * Returns the target element that this badge is anchored to. It is
     * either the element given by the `for` attribute, or the immediate parent
     * of the badge.
     */get target() {
            var parentNode = dom(this).parentNode;// If the parentNode is a document fragment, then we need to use the host.
            var ownerRoot = dom(this).getOwnerRoot(); var target; if (this.for) { target = dom(ownerRoot).querySelector('#' + this.for); } else { target = parentNode.nodeType == Node.DOCUMENT_FRAGMENT_NODE ? ownerRoot.host : parentNode; } return target;
          },/**
     * Repositions the badge relative to its anchor element. This is called
     * automatically when the badge is attached or an `iron-resize` event is
     * fired (for exmaple if the window has resized, or your target is a
     * custom element that implements IronResizableBehavior).
     *
     * You should call this in all other cases when the achor's position
     * might have changed (for example, if it's visibility has changed, or
     * you've manually done a page re-layout).
     */updatePosition: function updatePosition() { if (!this._target || !this.offsetParent) { return; } var parentRect = this.offsetParent.getBoundingClientRect(); var targetRect = this._target.getBoundingClientRect(); var thisRect = this.getBoundingClientRect(); this.style.left = targetRect.left - parentRect.left + (targetRect.width - thisRect.width + this.offsetX - targetRect.width / 2) + 'px'; this.style.top = targetRect.top - parentRect.top + +this.offsetY - thisRect.height / 2 + 'px'; }
        }); var lang$2 = { "it": { "search": "Cerca", "category": "Categoria", 'all': "Tutti", 'plate-add': "Piatto aggiunto", "off-the-menu": "Fuori menù", "finished": "Finito" }, "en": { "search": "Search", "category": "Category", 'all': "All", 'plate-add': "plate add", "off-the-menu": "Off the menu", "finished": "finished" } }; var DsignMenuItemCompress =/*#__PURE__*/function (_MergeCategory2) {
          babelHelpers.inherits(DsignMenuItemCompress, _MergeCategory2); babelHelpers.createClass(DsignMenuItemCompress, null, [{ key: "template", get: function get() { return html(_templateObject35_e13d1b4010eb11ec83cd7fddb4847b33()); } }]); function DsignMenuItemCompress() { var _this45; babelHelpers.classCallCheck(this, DsignMenuItemCompress); _this45 = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(DsignMenuItemCompress).call(this)); _this45.resources = lang$2; return _this45; } babelHelpers.createClass(DsignMenuItemCompress, [{
            key: "categoriesChange",/**
       * @param value
       */value: function categoriesChange(value) { if (!value) { return; } this._mergeCategory(value); this.category = this.menuItem ? this.menuItem.category : ''; }/**
       * @param dishCount
       */}, {
            key: "changeDishCount", value: function changeDishCount(dishCount) { if (!dishCount) { this.$.badgeMenu.style.visibility = 'hidden'; return; } this.$.badgeMenu.style.visibility = 'visible'; }/**
       * @param value
       * @returns {string}
       * @private
       */}, {
            key: "_capitalize", value: function _capitalize(value) { return typeof value === 'string' ? value.charAt(0).toUpperCase() + value.slice(1) : ''; }/**
       * @param price
       * @returns {*}
       * @private
       */}, {
            key: "_computePrice", value: function _computePrice(price) { if (!price) { return; } return price.value; }/**
       *
       * @param menu
       * @param config
       * @param {Storage} menuStorage
       * @private
       */}, { key: "_observeMenu", value: function _observeMenu(menu, config, menuStorage) { 
         if (!menu || !config || !menuStorage) { return; } 
         this.$.image.style.backgroundImage = `url(${config.bucket}/${menu.category}.png)`;
         this.$.image.style.backgroundSize = `contain`;
         this.$.image.style.backgroundColor = `#eeeeee`;
         menuStorage.getEventManager().on(_shared_bundle_.Storage.POST_REMOVE, this.updateDishCount.bind(this)); menuStorage.getEventManager().on(_shared_bundle_.Storage.POST_UPDATE, this.updateDishCount.bind(this)); menuStorage.getEventManager().on(_shared_bundle_.Storage.POST_SAVE, this.updateDishCount.bind(this)); if (menu) { this.initDishCount(menu); this._changeStatus(menu.status); } } 
        }, {
            key: "_changeStatus", value: function _changeStatus(status) { switch (status) { case 'available': this.statusLabel = ''; this.shadowRoot.querySelector('.triangle').setAttribute('hidden', ''); this.shadowRoot.querySelector('.status-dish').setAttribute('hidden', ''); this.enableButton(false); break; case 'over': this.statusLabel = 'finished'; this.shadowRoot.querySelector('.triangle').removeAttribute('hidden'); this.shadowRoot.querySelector('.status-dish').removeAttribute('hidden'); this.enableButton(true); break; case 'not-available': this.statusLabel = 'off-the-menu'; this.shadowRoot.querySelector('.triangle').removeAttribute('hidden'); this.shadowRoot.querySelector('.status-dish').removeAttribute('hidden'); this.enableButton(true); break; } }/**
       * @param enable
       */}, { key: "enableButton", value: function enableButton(enable) { this.$['btn-menu'].disabled = enable; } }], [{
            key: "properties", get: function get() {
              return {
                menuItem: {}, categories: { observer: 'categoriesChange' }, category: { notify: true }, services: { value: { _config: 'config', _localizeService: 'Localize', _menuStorage: 'MenuStorage', _notifyService: 'Notify' } },/**
         * @type Number
         */dishCount: { value: 0, observer: 'changeDishCount' }
              };
            }
          }, { key: "observers", get: function get() { return ['_observeMenu(menuItem, _config, _menuStorage)']; } }]); return DsignMenuItemCompress;
        }(MergeCategory(ItemFavorite(LocalizeMixin(ServiceInjectorMixin(PolymerElement))))); window.customElements.define('dsign-menu-item-compress', DsignMenuItemCompress); var DsignMenuWrapItem =/*#__PURE__*/function (_LocalizeMixin2) {
          babelHelpers.inherits(DsignMenuWrapItem, _LocalizeMixin2); function DsignMenuWrapItem() { babelHelpers.classCallCheck(this, DsignMenuWrapItem); return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(DsignMenuWrapItem).apply(this, arguments)); } babelHelpers.createClass(DsignMenuWrapItem, [{
            key: "_hideChanged",/**
       * @param hide
       * @private
       */value: function _hideChanged(hide) { switch (hide) { case true: this.style.display = 'none'; break; case false: this.style.display = 'block'; break; default: this.style.display = 'block'; } }
          }, { key: "changeItem", value: function changeItem(type, item, showOrder) { var _this46 = this; if (!type || !item || showOrder === null) { return; } var element = document.createElement(type); element.menuItem = item; element.restaurant = this.restaurant; element.showOrder = showOrder; setTimeout(function () { element.categories = _this46.categories; }, 300); this.$.container.appendChild(element); } }, { key: "_categoriesChanged", value: function _categoriesChanged(value) { if (!value) { return; } var ele = this.shadowRoot.querySelector(this.type); if (ele) { ele.categories = value; } } }, { key: "_showOrderChanged", value: function _showOrderChanged(type, showOrder) { if (!type || !showOrder) { return; } var ele = this.shadowRoot.querySelector(type); if (ele) { ele.showOrder = showOrder; } } }], [{ key: "template", get: function get() { return html(_templateObject36_e13d1b4010eb11ec83cd7fddb4847b33()); } }, { key: "properties", get: function get() { return { type: {}, item: {}, restaurant: { notify: true }, categories: { notify: true, observer: '_categoriesChanged' }, hide: { value: false, observer: '_hideChanged' }, showOrder: { notify: true, observer: '_showOrderChanged' } }; } }, { key: "observers", get: function get() { return ['changeItem(type, item, showOrder)', '_showOrderChanged(type, showOrder)']; } }]); return DsignMenuWrapItem;
        }(LocalizeMixin(ServiceInjectorMixin(PolymerElement))); window.customElements.define('dsign-menu-wrap-item', DsignMenuWrapItem); var lang$3 = { "it": { "selected": "Selezionati", "remove-one-item": "Rimuovine uno", "delete": "Elimina", "off-the-menu": "Fuori menù", "finished": "Finito" }, "en": { "selected": "Selected", "remove-one-item": "Remove one dish", "delete": "Delete", "off-the-menu": "Off the menu", "finished": "finished" } }; var DsignMenuFavorites =/*#__PURE__*/function (_ItemFavorite) {
          babelHelpers.inherits(DsignMenuFavorites, _ItemFavorite); babelHelpers.createClass(DsignMenuFavorites, null, [{ key: "template", get: function get() { return html(_templateObject37_e13d1b4010eb11ec83cd7fddb4847b33()); } }]); function DsignMenuFavorites() { var _this47; babelHelpers.classCallCheck(this, DsignMenuFavorites); _this47 = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(DsignMenuFavorites).call(this)); _this47.resources = lang$3; return _this47; } babelHelpers.createClass(DsignMenuFavorites, [{
            key: "__computeAmount",/**
       * @returns {function(*): *}
       * @private
       */value: function __computeAmount() { return function (menuItem) { if (!menuItem) { return; } var amount = 0; for (var index = 0; menuItem.totalCount > index; index++) { amount = amount + menuItem.price.value; } return new Intl.NumberFormat('it-IT', { style: 'currency', currency: 'EUR' }).format(amount); }; }/**
       * @param value
       * @returns {string}
       * @private
       */}, {
            key: "_capitalize", value: function _capitalize(value) { return typeof value === 'string' ? value.charAt(0).toUpperCase() + value.slice(1) : ''; }/**
       * @param status
       */}, {
            key: "_observeMenuStatus", value: function _observeMenuStatus(status) { if (!status) { return; } switch (status) { case 'available': this.statusLabel = ''; this.shadowRoot.querySelector('.triangle').setAttribute('hidden', ''); this.shadowRoot.querySelector('.status-dish').setAttribute('hidden', ''); this.shadowRoot.querySelector('.status-dish').style.top = '10px'; this.shadowRoot.querySelector('.partial-price').style.textDecoration = 'auto'; this.enableButton(false); break; case 'over': add; this.statusLabel = 'finished'; this.shadowRoot.querySelector('.triangle').removeAttribute('hidden'); this.shadowRoot.querySelector('.status-dish').removeAttribute('hidden'); this.shadowRoot.querySelector('.status-dish').style.top = '16px'; this.shadowRoot.querySelector('.partial-price').style.textDecoration = 'line-through'; this.enableButton(true); break; case 'not-available': this.statusLabel = 'off-the-menu'; this.shadowRoot.querySelector('.triangle').removeAttribute('hidden'); this.shadowRoot.querySelector('.status-dish').removeAttribute('hidden'); this.shadowRoot.querySelector('.partial-price').style.textDecoration = 'line-through'; this.enableButton(true); break; } }/**
       * @param {Storage} menuStorage
       */}, {
            key: "changeMenuStorage", value: function changeMenuStorage(menuStorage) { if (!menuStorage) { return; } this.updateListener = new _shared_bundle_.Listener(function (evt) { if (evt.data['_id'] === this.menuItem['_id']) { this.menuItem = null; this.notifyPath('menuItem'); this.menuItem = evt.data; this._updateView(); } }.bind(this)); menuStorage.getEventManager().on(_shared_bundle_.Storage.POST_UPDATE, this.updateListener); }/**
       * @private
       */}, {
            key: "_updateView", value: function _updateView() { this.notifyPath('menuItem.currentCount'); this.notifyPath('menuItem.totalCount'); }/**
       * @param menu
       * @param config
       * @private
       */}, {
            key: "_observeMenu", value: function _observeMenu(menu, config) { if (!menu || !config) { return; } if (menu.photos && Array.isArray(menu.photos) && menu.photos.length > 0) { this.$.image.style.backgroundImage = "url(".concat(menu.photos[0].src, ")"); } else { this.$.image.style.backgroundImage = 'url(https://dsign-asset.s3.eu-central-1.amazonaws.com/dish-not-found.png)'; this.$.image.style.backgroundSize = "cover"; } }/**
       * @param enable
       */}, { key: "enableButton", value: function enableButton(enable) { this.$.remove.disabled = enable; this.$.add.disabled = enable; } }], [{ key: "properties", get: function get() { return { services: { value: { _config: 'config', _localizeService: 'Localize', _menuStorage: 'MenuStorage' } }, menuItem: { notify: true }, amount: { type: Function, computed: '__computeAmount(menuItem)' }, statusLabel: { notify: true }, _menuStorage: { readOnly: true, observer: 'changeMenuStorage' } }; } }, { key: "observers", get: function get() { return ['_observeMenu(menuItem, _config)', '_observeMenuStatus(menuItem.status)']; } }]); return DsignMenuFavorites;
        }(ItemFavorite(LocalizeMixin(ServiceInjectorMixin(PolymerElement)))); window.customElements.define('dsign-menu-favorites', DsignMenuFavorites); var DsignLogo =/*#__PURE__*/function (_PolymerElement2) { babelHelpers.inherits(DsignLogo, _PolymerElement2); function DsignLogo() { babelHelpers.classCallCheck(this, DsignLogo); return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(DsignLogo).apply(this, arguments)); } babelHelpers.createClass(DsignLogo, [{ key: "changeOrganization", value: function changeOrganization(organization) { if (!organization) { return; } if (organization.logo && organization.logo.src) { this.shadowRoot.querySelector('.logo').style.backgroundImage = "url(\"".concat(organization.logo.src, "\")"); } if (!!organization["site_url"]) { var element = document.createElement('a'); element.href = organization["site_url"]; element.target = "_blank"; element.appendChild(this.shadowRoot.querySelector('div.logo')); this.shadowRoot.querySelector('div.container').appendChild(element); } } }], [{ key: "template", get: function get() { return html(_templateObject38_e13d1b4010eb11ec83cd7fddb4847b33()); } }, { key: "properties", get: function get() { return { logoSrc: { value: ['all', 'first', 'second'] }, organization: { observer: 'changeOrganization' } }; } }]); return DsignLogo; }(PolymerElement); window.customElements.define('dsign-logo', DsignLogo); var DsignInfo =/*#__PURE__*/function (_PolymerElement3) {
          babelHelpers.inherits(DsignInfo, _PolymerElement3); function DsignInfo() { babelHelpers.classCallCheck(this, DsignInfo); return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(DsignInfo).apply(this, arguments)); } babelHelpers.createClass(DsignInfo, [{
            key: "toggle",/**
       * @param evt
       */value: function toggle(evt) { if (this.shadowRoot.querySelector('paper-icon-button').style.animation && this.shadowRoot.querySelector('paper-icon-button').style.animation.includes('rotate-right')) { this.open(); } else { this.close(); } }
          }, {
            key: "textChanged", value: function textChanged(value) { if (!value) { return; } this.$.content.style.height = "".concat(this.$.content.offsetHeight, "px"); this.$.content.style.maxHeight = "".concat(this.$.content.offsetHeight, "px"); }/**
       *
       */}, {
            key: "close", value: function close() { this.shadowRoot.querySelector('paper-icon-button').style.animation = 'rotate-right 0.8s linear both'; this.$.content.style.animation = 'close 0.8s linear both'; }/**
       *
       */}, { key: "open", value: function open() { this.shadowRoot.querySelector('paper-icon-button').style.animation = 'rotate-left 0.8s linear both'; this.$.content.style.animation = 'open 0.8s linear both'; } }], [{ key: "template", get: function get() { return html(_templateObject39_e13d1b4010eb11ec83cd7fddb4847b33()); } }, { key: "properties", get: function get() { return { text: { notify: true, observer: 'textChanged' } }; } }]); return DsignInfo;
        }(PolymerElement); window.customElements.define('dsign-info', DsignInfo); var lang$4 = { "it": { "search": "Cerca", "category": "Categoria", 'all': "Tutti", "reset-dishes-arrived": "Resetta piatti arrivati", "plate-copy-on-clipboard": "Ordine copiato", "order-whatsapp": "Ordina su whatsapp" }, "en": { "search": "Search", "category": "Category", 'all': "All", 'first': "First", 'second': "Main courses", "reset-dishes-arrived": "Reset arrived dishes", "plate-copy-on-clipboard": "Order copied", "order-whatsapp": "Order on whatsapp" } };// preventable, allowing for better scrolling performance.
        setPassiveTouchGestures(true);/**
                                  * @class DsignMenu
                                  */var DsignMenu =/*#__PURE__*/function (_MergeCategory3) {
          babelHelpers.inherits(DsignMenu, _MergeCategory3); babelHelpers.createClass(DsignMenu, null, [{ key: "template", get: function get() { return html(_templateObject40_e13d1b4010eb11ec83cd7fddb4847b33()); } }, {
            key: "properties", get: function get() {
              return {
                menu: { observer: 'changeMenu' }, organization: { notify: true, observer: 'changeOrganization' }, items: { notify: true }, services: { value: { _localizeService: 'Localize', _config: 'config', _menuStorage: 'MenuStorage', _notifyService: 'Notify' } }, totalOrder: { value: 0, observer: 'changeTotalOrder' }, amount: { notify: true }, layoutType: { value: 'dsign-menu-item-image', readOnly: true }, apiUrl: {}, menuUrl: { observer: 'changeMenuUrl' }, favorites: { notify: true, value: [] }, _menuStorage: { readOnly: true, observer: 'changeMenuStorage' }, _config: { readOnly: true, observer: 'changeConfig' }, categories: { notify: true }, allCategory: {}, hasLogo: { value: false },/**
         *
         */interval: { type: Number, readOnly: true, value: 30000 }
              };
            }
          }, {
            key: "observers", get: function get() { return ['_observeCategory(items, apiUrl)', '_observeMenuStorage(_menuStorage, organization, allCategory)']; }/**
       * @inheritDoc
       */}]); function DsignMenu() { var _this48; babelHelpers.classCallCheck(this, DsignMenu); _this48 = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(DsignMenu).call(this)); _this48.resources = lang$4; var param = _this48.parseUrlParam(); if (param && param['menu'] && param['menu'] === 'compress') { _this48._setLayoutType('dsign-menu-item-compress'); } return _this48; }/**
       * TODO config url and create service
       * @returns array
       */babelHelpers.createClass(DsignMenu, [{
              key: "getCategory", value: function getCategory() { var _this49 = this; return new Promise(function (resolve, reject) { var request = new XMLHttpRequest(); request.addEventListener("load", function (data) { if (request.status >= 300) { var response = { status: request.status, message: request.responseText }; return reject(response); } resolve(JSON.parse(request.response)); }); request.open("GET", "".concat(_this49.apiUrl, "menu-category")); request.setRequestHeader('Accept', 'application/json'); request.send(); }); }/**
       * @param totalOrder
       */}, {
              key: "changeTotalOrder", value: function changeTotalOrder(totalOrder) { if (!totalOrder) { this.$.badgeMenu.style.visibility = 'hidden'; return; } this.$.badgeMenu.style.visibility = 'visible'; }/**
       * @param {object} config
       */}, {
              key: "changeConfig", value: function changeConfig(config) { if (!config) { return; } this.apiUrl = config.apiUrl; this.menuUrl = config.menuUrl; this.menu = config.menu; }/**
       * @param organization
       */}, {
              key: "changeOrganization", value: function changeOrganization(organization) { if (babelHelpers.typeof(organization.whatsapp_phone) === 'object' && !!organization.whatsapp_phone.number && !!organization.whatsapp_phone.prefix) { this.$.order.style.display = 'flex'; } else { this.$.order.style.display = 'none'; } if (organization && organization["logo"] && organization["logo"]["_id"]) { this.hasLogo = true; } }/**
       *
       * @param menuStorage
       * @param organization
       * @param allCategory
       * @private
       */}, {
              key: "_observeMenuStorage", value: function _observeMenuStorage(menuStorage, organization, allCategory) { if (!menuStorage || !organization || !allCategory) { return; } this._getFavorites(); }/**
       * @private
       */}, {
              key: "_getFavorites", value: function _getFavorites() { var _this50 = this; this._menuStorage.getAll({ restaurantId: this.organization._id }).then(function (data) { _this50.favorites = _this50.sortFavorites(_this50.checkStatusFavorite(data)); _this50._updateAmount(); _this50._updateTotalCount(); }); }/**
       * @param {Storage} menuStorage
       */}, {
              key: "changeMenuStorage", value: function changeMenuStorage(menuStorage) { if (!menuStorage) { return; } menuStorage.getEventManager().on(_shared_bundle_.Storage.POST_REMOVE, new _shared_bundle_.Listener(this.deleteFavoriteEvt.bind(this))); menuStorage.getEventManager().on(_shared_bundle_.Storage.POST_UPDATE, new _shared_bundle_.Listener(this.updateFavoriteEvt.bind(this))); menuStorage.getEventManager().on(_shared_bundle_.Storage.POST_SAVE, new _shared_bundle_.Listener(this.saveFavoriteEvt.bind(this))); }/**
       * @param evt
       */}, {
              key: "deleteFavoriteEvt", value: function deleteFavoriteEvt(evt) { for (var index = 0; this.favorites.length > index; index++) { if (this.favorites[index]._id === evt.data._id) { this.splice('favorites', index, 1); break; } } this._updateAmount(); this._updateTotalCount(); }/**
       * @param evt
       */}, {
              key: "updateFavoriteEvt", value: function updateFavoriteEvt(evt) { this._updateAmount(); this._updateTotalCount(); }/**
       * @param evt
       */}, {
              key: "saveFavoriteEvt", value: function saveFavoriteEvt(evt) { this.push('favorites', evt.data); this._updateAmount(); this._updateTotalCount(); }/**
       *
       * @param favorites
       * @returns {*}
       */}, {
              key: "checkStatusFavorite", value: function checkStatusFavorite(favorites) { var _this51 = this; var _loop6 = function _loop6(index) { var dish = _this51.items.find(function (element) { return element._id === favorites[index]._id; }); switch (true) { case dish === undefined && favorites[index].status !== 'not-available': favorites[index].status = 'not-available'; _this51._menuStorage.update(favorites[index]); break; case dish !== undefined && favorites[index].status !== dish.status: favorites[index].status = dish.status; _this51._menuStorage.update(favorites[index]); break; } }; for (var index = 0; favorites.length > index; index++) { _loop6(index); } return favorites; }/**
       * @param favorites
       * @returns {[]}
       */}, {
              key: "sortFavorites", value: function sortFavorites(favorites) { var tmpFavorites = []; for (var property in this.allCategory) { for (var index = 0; favorites.length > index; index++) { if (favorites[index].category === property) { tmpFavorites.push(favorites[index]); } } } return tmpFavorites; }/**
       * @param a
       * @param b
       */}, {
              key: "sortArrayFavorites", value: function sortArrayFavorites(a, b) { if (!this.allCategory || !a || !b) { return -1; } for (var property in this.allCategory) { if (a.category === property) { return -1; } if (b.category === property) { return 1; } } return 0; }/**
       * @private
       */}, {
              key: "_updateAmount", value: function _updateAmount() { var _this52 = this; setTimeout(function () { var amount = 0; for (var index = 0; _this52.favorites.length > index; index++) { if (_this52.favorites[index].status !== 'available') { continue; } amount = amount + _this52.favorites[index].price.value * _this52.favorites[index].totalCount; } _this52.amount = new Intl.NumberFormat('it-IT', { style: 'currency', currency: 'EUR' }).format(amount); }, 100); }/**
       * @private
       */}, {
              key: "_updateTotalCount", value: function _updateTotalCount() { var _this53 = this; setTimeout(function () { var total = 0; for (var index = 0; _this53.favorites.length > index; index++) { if (_this53.favorites[index].status !== 'available') { continue; } total = total + _this53.favorites[index].totalCount; } _this53.totalOrder = total; }, 100); }/**
       * @param evt
       */}, {
              key: "updateAmountEvt", value: function updateAmountEvt(evt) { this._updateAmount(); this._updateTotalCount(); }/**
       * @returns {string}
       * @private
       */}, {
              key: "_getOrder", value: function _getOrder() { var order = ''; order = order + this.amount + '\n'; for (var index = 0; this.favorites.length > index; index++) { if (this.favorites[index].status !== 'available') { continue; } order += "".concat(this.favorites[index].totalCount, " - ").concat(this.favorites[index].name.it, "\n"); } return order; }/**
       * @private
       */}, {
              key: "_sendOrder", value: function _sendOrder() { var ele = document.createElement('a'); ele.href = "https://api.whatsapp.com/send?phone=".concat(this.organization.whatsapp_phone.prefix).concat(this.organization.whatsapp_phone.number, "&text=").concat(encodeURIComponent(this._getOrder())); ele.target = "_blank"; ele.click(); }/**
       * @param items
       * @param apiUrl
       * @private
       */}, {
              key: "_observeCategory", value: function _observeCategory(items, apiUrl) { var _this54 = this; if (!items || !apiUrl) { return; } if (!this.allCategory) { this.getCategory().then(function (category) { _this54._attachCategory([]); _this54.allCategory = category; _this54._attachCategory(_this54._distinctCategory(_this54.items, _this54.allCategory)); }); } else { this._attachCategory(this._distinctCategory(this.items, this.allCategory)); } }/**
       * @return object
       */}, {
              key: "parseUrlParam", value: function parseUrlParam() {
                var match, pl = /\+/g,// Regex for replacing addition symbol with a space
                search = /([^&=]+)=?([^&]*)/g, decode = function decode(s) { return decodeURIComponent(s.replace(pl, " ")); }, query = window.location.search.substring(1); var urlParams = {}; while (match = search.exec(query)) { urlParams[decode(match[1])] = decode(match[2]); } return urlParams;
              }/**
       * @param menu
       */}, {
              key: "changeMenu", value: function changeMenu(menu) {
                var _this55 = this; if (!menu) { this.items = []; this.organization = {}; return; } this.items = []; this.notifyPath('items'); this.$.list.render(); var tmpMenu = []; for (var index = 0; menu.items.length > index; index++) { if (menu.items[index].status === 'not-available') { continue; } tmpMenu.push(menu.items[index]); } menu.items = tmpMenu; this.items = menu.items;//delete this.menu.items;
                setTimeout(function () { _this55.search(_this55.$.search.value, _this55.$.category.selectedItem ? _this55.$.category.selectedItem.value : null); }, 50); this.organization = menu.organization; if (menu.background_header) { this._changeBackgroundColorHeader(menu.background_header); } if (menu.color_header) { this._changeColorHeader(menu.color_header); } if (menu.enable_order === true) { this.$.orderButtonContainer.style.display = 'block'; } else { this.$.orderButtonContainer.style.display = 'none'; } if (menu.layout_type) { this._setLayoutType(menu.layout_type); } if (menu.note) { var ele = document.querySelector('dsign-info'); if (!ele) { ele = document.createElement('dsign-info'); document.body.appendChild(ele); } ele.text = menu.note; } else { var _ele = document.querySelector('dsign-info'); if (_ele) { _ele.remove(); } } this.appendStylesheetColor();
              }/**
       * @param evt
       */}, {
              key: "tapMenu", value: function tapMenu(evt) { this.$.drawer.toggle(); }/**
       * @param color
       * @private
       */}, {
              key: "_changeBackgroundColorHeader", value: function _changeBackgroundColorHeader(color) { this.shadowRoot.querySelector('app-toolbar').style.backgroundColor = color; }/**
       * @param entities
       * @param categories
       * @returns {*}
       * @private
       */}, {
              key: "_distinctCategory", value: function _distinctCategory(entities, categories) { var accumulatorCategories = []; var categoriesToReturn = {}; for (var index = 0; entities.length > index; index++) { if (!accumulatorCategories.includes(entities[index].category)) { accumulatorCategories.push(entities[index].category); } } for (var property in categories) { if (accumulatorCategories.includes(property)) { categoriesToReturn[property] = categories[property]; } } return categoriesToReturn; }/**
       *
       * @param color
       * @private
       */}, {
              key: "_changeColorHeader", value: function _changeColorHeader(color) {
                var icons = this.shadowRoot.querySelectorAll('paper-icon-button'); for (var index = 0; icons.length > index; index++) { icons[index].style.color = color; }/**
         * paper input style
         */this.$.search.shadowRoot.querySelector('label').style.color = color; this.$.search.shadowRoot.querySelector('input').style.color = color; this.$.search.shadowRoot.querySelector('paper-input-container').shadowRoot.querySelector('div.unfocused-line').style.borderColor = color; this.$.category.shadowRoot.querySelector('paper-input').shadowRoot.querySelector('label').style.color = color; this.$.category.shadowRoot.querySelector('paper-input').shadowRoot.querySelector('input').style.color = color; this.$.category.shadowRoot.querySelector('paper-input').shadowRoot.querySelector('paper-input-container').shadowRoot.querySelector('div.unfocused-line').style.borderColor = color;
              }/**
       * @param evt
       */}, {
              key: "searchByName", value: function searchByName(evt) { this.search(evt.target.value, this.$.category.selectedItem ? this.$.category.selectedItem.value : null); }/**
       * @param evt
       */}, {
              key: "searchByCategory", value: function searchByCategory(evt) { this.search(this.$.search.value ? this.$.search.value : null, evt.detail.item.value); }/**
       * @param evt
       */}, {
              key: "clearCategory", value: function clearCategory(evt) { this.$.category.value = null; this.$.category.selectedItem = null; this.$.categories.selected = null; this.search(this.$.search.value ? this.$.search.value : null, null); }/**
       * @param name
       * @param category
       */}, {
              key: "search", value: function search(name, category) { var nodes = this.shadowRoot.querySelectorAll('dsign-menu-wrap-item '); var lang = this._localizeService.getDefaultLang(); var hide = false; for (var index = 0; nodes.length > index; index++) { switch (true) { case !name === false && nodes[index].item.name[lang].toLowerCase().includes(name.toLowerCase()) === false: hide = true; case !category === false && nodes[index].item.category !== category: hide = true; break; }nodes[index].hide = hide; hide = false; } }/**
       * @param categoryDocument
       * @private
       */}, {
              key: "_attachCategory", value: function _attachCategory(categoryDocument) { this._mergeCategory(categoryDocument); var categories = []; if (babelHelpers.typeof(categoryDocument) === 'object' && categoryDocument !== null) { for (var property1 in categoryDocument) { categories.push(property1); } } this.categories = categories; }/**
       * @param apiUrl
       */}, {
              key: "changeMenuUrl", value: function changeMenuUrl(apiUrl) { if (!apiUrl) { return; } this.pollingMenu(); }/**
       *
       */}, {
              key: "pollingMenu", value: function pollingMenu() { var _this56 = this; setInterval(function () { var request = new XMLHttpRequest(); request.onload = function (event) { if (request.status >= 300) { console.warn(request.response); return; } _this56.menu = JSON.parse(request.response); }; request.open("GET", window.location.href); request.setRequestHeader('accept', 'application/json'); request.send(); }, this.interval); }/**
       *
       */}, { key: "appendStylesheetColor", value: function appendStylesheetColor() { var css = ":root { --munu-background-color: ".concat(this.menu.background_header, "; --munu-color: ").concat(this.menu.color_header, "; } body { overflow-x: hidden; } * { padding: 0; margin: 0; } paper-toast { padding: 16px 24px !important; margin: 12px !important; }}"); var style = document.createElement('style'); style.setAttribute('is', "custom-style"); style.setAttribute('id', 'colorCustomStyle'); style.appendChild(document.createTextNode(css)); var oldElement = document.head.querySelector('colorCustomStyle'); if (oldElement) { oldElement.remove(); } document.head.appendChild(style); } }]); return DsignMenu;
        }(MergeCategory(LocalizeMixin(ServiceInjectorMixin(PolymerElement)))); window.customElements.define('dsign-menu', DsignMenu); var $_documentContainer$3 = document.createElement('template'); $_documentContainer$3.innerHTML = "<iron-iconset-svg name=\"icons\" size=\"24\">\n  <svg>\n    <defs>\n      <g id=\"add\">\n        <path d=\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"></path>\n      </g>\n      <g id=\"arrow-left\">\n        <path d=\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\"></path>\n      </g>\n      <g id=\"search\">\n        <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"></path>\n      </g>\n      <g id=\"v-menu\">\n        <path d=\"M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\"></path>\n      </g>\n      <g id=\"clear\">\n        <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"></path>\n      </g>\n      <g id=\"remove\">\n        <path d=\"M19 13H5v-2h14v2z\"></path>\n      </g>\n      <g id=\"copy\">\n         <path d=\"M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z\"></path>\n      </g>\n      <g id=\"whatsapp\">\n          <path d=\"M.057 24l1.687-6.163c-1.041-1.804-1.588-3.849-1.587-5.946.003-6.556 5.338-11.891 11.893-11.891 3.181.001 6.167 1.24 8.413 3.488 2.245 2.248 3.481 5.236 3.48 8.414-.003 6.557-5.338 11.892-11.893 11.892-1.99-.001-3.951-.5-5.688-1.448l-6.305 1.654zm6.597-3.807c1.676.995 3.276 1.591 5.392 1.592 5.448 0 9.886-4.434 9.889-9.885.002-5.462-4.415-9.89-9.881-9.892-5.452 0-9.887 4.434-9.889 9.884-.001 2.225.651 3.891 1.746 5.634l-.999 3.648 3.742-.981zm11.387-5.464c-.074-.124-.272-.198-.57-.347-.297-.149-1.758-.868-2.031-.967-.272-.099-.47-.149-.669.149-.198.297-.768.967-.941 1.165-.173.198-.347.223-.644.074-.297-.149-1.255-.462-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.297-.347.446-.521.151-.172.2-.296.3-.495.099-.198.05-.372-.025-.521-.075-.148-.669-1.611-.916-2.206-.242-.579-.487-.501-.669-.51l-.57-.01c-.198 0-.52.074-.792.372s-1.04 1.016-1.04 2.479 1.065 2.876 1.213 3.074c.149.198 2.095 3.2 5.076 4.487.709.306 1.263.489 1.694.626.712.226 1.36.194 1.872.118.571-.085 1.758-.719 2.006-1.413.248-.695.248-1.29.173-1.414z\"/>   \n      </g id=\"facebook\">\n         <path d=\"M12 0c-6.627 0-12 5.373-12 12s5.373 12 12 12 12-5.373 12-12-5.373-12-12-12zm3 8h-1.35c-.538 0-.65.221-.65.778v1.222h2l-.209 2h-1.791v7h-3v-7h-2v-2h2v-2.308c0-1.769.931-2.692 3.029-2.692h1.971v3z\"></path>\n      <g>\n      <g id=\"instagram\">\n        <path d=\"M14.829 6.302c-.738-.034-.96-.04-2.829-.04s-2.09.007-2.828.04c-1.899.087-2.783.986-2.87 2.87-.033.738-.041.959-.041 2.828s.008 2.09.041 2.829c.087 1.879.967 2.783 2.87 2.87.737.033.959.041 2.828.041 1.87 0 2.091-.007 2.829-.041 1.899-.086 2.782-.988 2.87-2.87.033-.738.04-.96.04-2.829s-.007-2.09-.04-2.828c-.088-1.883-.973-2.783-2.87-2.87zm-2.829 9.293c-1.985 0-3.595-1.609-3.595-3.595 0-1.985 1.61-3.594 3.595-3.594s3.595 1.609 3.595 3.594c0 1.985-1.61 3.595-3.595 3.595zm3.737-6.491c-.464 0-.84-.376-.84-.84 0-.464.376-.84.84-.84.464 0 .84.376.84.84 0 .463-.376.84-.84.84zm-1.404 2.896c0 1.289-1.045 2.333-2.333 2.333s-2.333-1.044-2.333-2.333c0-1.289 1.045-2.333 2.333-2.333s2.333 1.044 2.333 2.333zm-2.333-12c-6.627 0-12 5.373-12 12s5.373 12 12 12 12-5.373 12-12-5.373-12-12-12zm6.958 14.886c-.115 2.545-1.532 3.955-4.071 4.072-.747.034-.986.042-2.887.042s-2.139-.008-2.886-.042c-2.544-.117-3.955-1.529-4.072-4.072-.034-.746-.042-.985-.042-2.886 0-1.901.008-2.139.042-2.886.117-2.544 1.529-3.955 4.072-4.071.747-.035.985-.043 2.886-.043s2.14.008 2.887.043c2.545.117 3.957 1.532 4.071 4.071.034.747.042.985.042 2.886 0 1.901-.008 2.14-.042 2.886z\"></path>\n      </g>\n      \n</g>\n    </defs>\n  </svg>\n</iron-iconset-svg>"; document.head.appendChild($_documentContainer$3.content); var currentToast = null;/**
                           Material design: [Snackbars &
                           toasts](https://www.google.com/design/spec/components/snackbars-toasts.html)
                           
                           `paper-toast` provides a subtle notification toast. Only one `paper-toast` will
                           be visible on screen.
                           
                           Use `opened` to show the toast:
                           
                           Example:
                           
                               <paper-toast text="Hello world!" opened></paper-toast>
                           
                           Also `open()` or `show()` can be used to show the toast:
                           
                           Example:
                           
                               <paper-button on-click="openToast">Open Toast</paper-button>
                               <paper-toast id="toast" text="Hello world!"></paper-toast>
                           
                               ...
                           
                               openToast: function() {
                                 this.$.toast.open();
                               }
                           
                           Set `duration` to 0, a negative number or Infinity to persist the toast on
                           screen:
                           
                           Example:
                           
                               <paper-toast text="Terms and conditions" opened duration="0">
                                 <a href="#">Show more</a>
                               </paper-toast>
                           
                           
                           ### Styling
                           The following custom properties and mixins are available for styling:
                           
                           Custom property | Description | Default
                           ----------------|-------------|----------
                           `--paper-toast-background-color` | The paper-toast background-color | `#323232`
                           `--paper-toast-color` | The paper-toast color | `#f1f1f1`
                           
                           This element applies the mixin `--paper-font-common-base` but does not import
                           `paper-styles/typography.html`. In order to apply the `Roboto` font to this
                           element, make sure you've imported `paper-styles/typography.html`.
                           
                           @group Paper Elements
                           @element paper-toast
                           @demo demo/index.html
                           @hero hero.svg
                           */Polymer({
          _template: html(_templateObject41_e13d1b4010eb11ec83cd7fddb4847b33()), is: 'paper-toast', behaviors: [IronOverlayBehavior], properties: {/**
       * The element to fit `this` into.
       * Overridden from `Polymer.IronFitBehavior`.
       */fitInto: { type: Object, value: window, observer: '_onFitIntoChanged' },/**
       * The orientation against which to align the dropdown content
       * horizontally relative to `positionTarget`.
       * Overridden from `Polymer.IronFitBehavior`.
       */horizontalAlign: { type: String, value: 'left' },/**
       * The orientation against which to align the dropdown content
       * vertically relative to `positionTarget`.
       * Overridden from `Polymer.IronFitBehavior`.
       */verticalAlign: { type: String, value: 'bottom' },/**
       * The duration in milliseconds to show the toast.
       * Set to `0`, a negative number, or `Infinity`, to disable the
       * toast auto-closing.
       */duration: { type: Number, value: 3000 },/**
       * The text to display in the toast.
       */text: { type: String, value: '' },/**
       * Overridden from `IronOverlayBehavior`.
       * Set to false to enable closing of the toast by clicking outside it.
       */noCancelOnOutsideClick: { type: Boolean, value: true },/**
       * Overridden from `IronOverlayBehavior`.
       * Set to true to disable auto-focusing the toast or child nodes with
       * the `autofocus` attribute` when the overlay is opened.
       */noAutoFocus: { type: Boolean, value: true }
          }, listeners: { 'transitionend': '__onTransitionEnd' },/**
     * Read-only. Deprecated. Use `opened` from `IronOverlayBehavior`.
     * @property visible
     * @deprecated
     */get visible() { Base._warn('`visible` is deprecated, use `opened` instead'); return this.opened; },/**
     * Read-only. Can auto-close if duration is a positive finite number.
     * @property _canAutoClose
     */get _canAutoClose() { return this.duration > 0 && this.duration !== Infinity; }, created: function created() { this._autoClose = null; IronA11yAnnouncer.requestAvailability(); },/**
     * Show the toast. Without arguments, this is the same as `open()` from
     * `IronOverlayBehavior`.
     * @param {(Object|string)=} properties Properties to be set before opening the toast.
     * e.g. `toast.show('hello')` or `toast.show({text: 'hello', duration: 3000})`
     */show: function show(properties) { if (typeof properties == 'string') { properties = { text: properties }; } for (var property in properties) { if (property.indexOf('_') === 0) { Base._warn('The property "' + property + '" is private and was not set.'); } else if (property in this) { this[property] = properties[property]; } else { Base._warn('The property "' + property + '" is not valid.'); } } this.open(); },/**
     * Hide the toast. Same as `close()` from `IronOverlayBehavior`.
     */hide: function hide() { this.close(); },/**
     * Called on transitions of the toast, indicating a finished animation
     * @private
     */__onTransitionEnd: function __onTransitionEnd(e) {// there are different transitions that are happening when opening and
            // closing the toast. The last one so far is for `opacity`.
            // This marks the end of the transition, so we check for this to determine
            // if this is the correct event.
            if (e && e.target === this && e.propertyName === 'opacity') { if (this.opened) { this._finishRenderOpened(); } else { this._finishRenderClosed(); } }
          },/**
     * Overridden from `IronOverlayBehavior`.
     * Called when the value of `opened` changes.
     */_openedChanged: function _openedChanged() { if (this._autoClose !== null) { this.cancelAsync(this._autoClose); this._autoClose = null; } if (this.opened) { if (currentToast && currentToast !== this) { currentToast.close(); } currentToast = this; this.fire('iron-announce', { text: this.text }); if (this._canAutoClose) { this._autoClose = this.async(this.close, this.duration); } } else if (currentToast === this) { currentToast = null; } IronOverlayBehaviorImpl._openedChanged.apply(this, arguments); },/**
     * Overridden from `IronOverlayBehavior`.
     */_renderOpened: function _renderOpened() { this.classList.add('paper-toast-open'); },/**
     * Overridden from `IronOverlayBehavior`.
     */_renderClosed: function _renderClosed() { this.classList.remove('paper-toast-open'); },/**
     * @private
     */_onFitIntoChanged: function _onFitIntoChanged(fitInto) { this.positionTarget = fitInto; }/**
       * Fired when `paper-toast` is opened.
       *
       * @event 'iron-announce'
       * @param {{text: string}} detail Contains text that will be announced.
       */});
      });